From e566a43f842290bd5f7f9d32661f5a39493a686e Mon Sep 17 00:00:00 2001
From: "Mazlan, Hazwan Arif" <hazwan.arif.mazlan@intel.com>
Date: Thu, 24 Feb 2022 19:50:28 +0800
Subject: [PATCH 2/2] media-driver: RPL-P enablement

HSDES ID: NA

Signed-off-by: Mazlan, Hazwan Arif <hazwan.arif.mazlan@intel.com>
---
 .../cmake/linux/media_gen_flags_linux.cmake   |   8 ++
 .../linux/gen12/ddi/media_libva_caps_g12.cpp  |   5 +
 .../linux/gen12/ddi/media_sku_wa_g12.cpp      |  47 ++++++++
 .../linux/gen12/ddi/media_sysinfo_g12.cpp     |  40 +++++++
 .../media_interfaces_g12_rplp.cpp             | 101 ++++++++++++++++++
 .../media_interfaces_g12_rplp.h               |  43 ++++++++
 .../media_srcs.cmake                          |  48 +++++++++
 media_driver/media_interface/media_srcs.cmake |   5 +-
 8 files changed, 296 insertions(+), 1 deletion(-)
 create mode 100644 media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.cpp
 create mode 100644 media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.h
 create mode 100644 media_driver/media_interface/media_interfaces_m12_rplp/media_srcs.cmake

diff --git a/media_driver/cmake/linux/media_gen_flags_linux.cmake b/media_driver/cmake/linux/media_gen_flags_linux.cmake
index f7f879e2e94e..70a50611a723 100644
--- a/media_driver/cmake/linux/media_gen_flags_linux.cmake
+++ b/media_driver/cmake/linux/media_gen_flags_linux.cmake
@@ -105,6 +105,10 @@ cmake_dependent_option(GEN12_RPLS
     "Enabled RPLS support (Gen12)" ON
     "GEN12_TGLLP" OFF)
 
+cmake_dependent_option(GEN12_RPLP
+    "Enabled RPLP support (Gen12)" ON
+    "GEN12_TGLLP" OFF)
+
 if(GEN8)
     add_definitions(-DIGFX_GEN8_SUPPORTED)
 endif()
@@ -200,6 +204,10 @@ if(GEN12_RPLS)
        add_definitions(-DIGFX_GEN12_RPLS_SUPPORTED)
 endif()
 
+if(GEN12_RPLP)
+       add_definitions(-DIGFX_GEN12_RPLP_SUPPORTED)
+endif()
+
 if(DG2)
     add_definitions(-DIGFX_DG2_SUPPORTED)
     add_definitions(-DIGFX_DG2_CMFCPATCH_SUPPORTED)
diff --git a/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp b/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
index 43eec166e8e6..1b8ee5b6fa15 100644
--- a/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_libva_caps_g12.cpp
@@ -2822,3 +2822,8 @@ static bool adlnRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CON
 static bool rplsRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
     RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_RAPTORLAKE_S);
 #endif
+
+#ifdef IGFX_GEN12_RPLP_SUPPORTED
+static bool rplpRegistered = MediaLibvaCapsFactory<MediaLibvaCaps, DDI_MEDIA_CONTEXT>::
+    RegisterCaps<MediaLibvaCapsG12>((uint32_t)IGFX_RAPTORLAKE_P);
+#endif
diff --git a/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp b/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
index d374af00ac9c..f74f2d51feae 100644
--- a/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_sku_wa_g12.cpp
@@ -684,6 +684,53 @@ static bool rplsDeviceRegister = DeviceInfoFactory<LinuxDeviceInit>::
     RegisterDevice(IGFX_RAPTORLAKE_S, &rplsDeviceInit);
 #endif
 
+#ifdef IGFX_GEN12_RPLP_SUPPORTED
+static bool InitRplpMediaSku(struct GfxDeviceInfo *devInfo,
+    MediaFeatureTable *                            skuTable,
+    struct LinuxDriverInfo *                       drvInfo)
+{
+    if (!InitTglMediaSku(devInfo, skuTable, drvInfo))
+    {
+        return false;
+    }
+
+    if (devInfo->eGTType == GTTYPE_GT0_5)
+    {
+        MEDIA_WR_SKU(skuTable, FtrGT0_5, 1);
+    }
+
+    MEDIA_WR_SKU(skuTable, FtrAV1VLDLSTDecoding, 1);
+
+    return true;
+}
+
+static bool InitRplpMediaWa(struct GfxDeviceInfo *devInfo,
+    MediaWaTable *                                waTable,
+    struct LinuxDriverInfo *                      drvInfo)
+{
+    if (!InitTglMediaWa(devInfo, waTable, drvInfo))
+    {
+        return false;
+    }
+
+    //RPL-P not need this
+    MEDIA_WR_WA(waTable, Wa_1409820462, 0);
+
+    return true;
+}
+
+static struct LinuxDeviceInit rplpDeviceInit =
+    {
+        .productFamily    = IGFX_RAPTORLAKE_P,
+        .InitMediaFeature = InitRplpMediaSku,
+        .InitMediaWa      = InitRplpMediaWa,
+};
+
+static bool rplpDeviceRegister = DeviceInfoFactory<LinuxDeviceInit>::
+    RegisterDevice(IGFX_RAPTORLAKE_P, &rplpDeviceInit);
+
+#endif
+
 static struct LinuxDeviceInit tgllpDeviceInit =
 {
     .productFamily    = IGFX_TIGERLAKE_LP,
diff --git a/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp b/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
index 3e568bf17292..36f8de5e72e1 100644
--- a/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
+++ b/media_driver/linux/gen12/ddi/media_sysinfo_g12.cpp
@@ -545,6 +545,46 @@ static bool rplsGt1DeviceA783 = DeviceInfoFactory<GfxDeviceInfo>::
     RegisterDevice(0xA783, &rplsGt1fInfo);
 #endif
 
+#ifdef IGFX_GEN12_RPLP_SUPPORTED
+static struct GfxDeviceInfo rplpGt2Info = {
+    .platformType     = PLATFORM_DESKTOP,
+    .productFamily    = IGFX_RAPTORLAKE_P,
+    .displayFamily    = IGFX_GEN12_CORE,
+    .renderFamily     = IGFX_GEN12_CORE,
+    .eGTType          = GTTYPE_GT2,
+    .L3CacheSizeInKb  = 0,
+    .L3BankCount      = 0,
+    .EUCount          = 0,
+    .SliceCount       = 0,
+    .SubSliceCount    = 0,
+    .MaxEuPerSubSlice = 0,
+    .isLCIA           = 0,
+    .hasLLC           = 0,
+    .hasERAM          = 0,
+    .InitMediaSysInfo = InitTglMediaSysInfo,
+    .InitShadowSku    = InitTglShadowSku,
+    .InitShadowWa     = InitTglShadowWa,
+};
+
+static bool rplpGt2DeviceA7A0 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA7A0, &rplpGt2Info);
+
+static bool rplpGt2DeviceA720 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA720, &rplpGt2Info);
+
+static bool rplpGt2DeviceA7A8 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA7A8, &rplpGt2Info);
+
+static bool rplpGt2DeviceA7A1 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA7A1, &rplpGt2Info);
+
+static bool rplpGt2DeviceA721 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA721, &rplpGt2Info);
+
+static bool rplpGt2DeviceA7A9 = DeviceInfoFactory<GfxDeviceInfo>::
+    RegisterDevice(0xA7A9, &rplpGt2Info);
+#endif
+
 static bool tgllpGt2Device9a40 = DeviceInfoFactory<GfxDeviceInfo>::
     RegisterDevice(0x9A40, &tgllpGt2Info);
 
diff --git a/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.cpp b/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.cpp
new file mode 100644
index 000000000000..6c5402ec63da
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.cpp
@@ -0,0 +1,101 @@
+/*
+* Copyright (c) 2011-2021, Intel Corporation
+*
+* Permission is hereby granted, free of charge, to any person obtaining a
+* copy of this software and associated documentation files (the "Software"),
+* to deal in the Software without restriction, including without limitation
+* the rights to use, copy, modify, merge, publish, distribute, sublicense,
+* and/or sell copies of the Software, and to permit persons to whom the
+* Software is furnished to do so, subject to the following conditions:
+*
+* The above copyright notice and this permission notice shall be included
+* in all copies or substantial portions of the Software.
+*
+* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+* OTHER DEALINGS IN THE SOFTWARE.
+*/
+//!
+//! \file     media_interfaces_g12_rplp.cpp
+//! \brief    Helps with Gen12 RPLP factory creation.
+//!
+
+#include "media_interfaces_g12_rplp.h"
+
+extern template class MediaInterfacesFactory<MhwInterfaces>;
+extern template class MediaInterfacesFactory<MmdDevice>;
+extern template class MediaInterfacesFactory<MosUtilDevice>;
+extern template class MediaInterfacesFactory<CodechalDevice>;
+extern template class MediaInterfacesFactory<CMHalDevice>;
+extern template class MediaInterfacesFactory<VphalDevice>;
+extern template class MediaInterfacesFactory<RenderHalDevice>;
+extern template class MediaInterfacesFactory<Nv12ToP010Device>;
+extern template class MediaInterfacesFactory<DecodeHistogramDevice>;
+
+static bool rplpRegisteredVphal =
+MediaInterfacesFactory<VphalDevice>::
+RegisterHal<VphalInterfacesG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+static bool rplpRegisteredMhw =
+    MediaInterfacesFactory<MhwInterfaces>::
+    RegisterHal<MhwInterfacesG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+#ifdef _MMC_SUPPORTED
+static bool adlsRegisteredMmd =
+    MediaInterfacesFactory<MmdDevice>::
+    RegisterHal<MmdDeviceG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+#endif
+
+#define PLATFORM_INTEL_RPLP   26
+#define GENX_TGLLP            12
+
+static bool adlsRegisteredNv12ToP010 =
+    MediaInterfacesFactory<Nv12ToP010Device>::
+    RegisterHal<Nv12ToP010DeviceG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+static bool adlsRegisteredCodecHal =
+    MediaInterfacesFactory<CodechalDevice>::
+    RegisterHal<CodechalInterfacesG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+static bool adlsRegisteredCMHal =
+    MediaInterfacesFactory<CMHalDevice>::
+    RegisterHal<CMHalInterfacesG12Rplp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+MOS_STATUS CMHalInterfacesG12Rplp::Initialize(CM_HAL_STATE *pCmState)
+{
+    if (pCmState == nullptr)
+    {
+        MHW_ASSERTMESSAGE("pCmState is nullptr.")
+        return MOS_STATUS_INVALID_PARAMETER;
+    }
+
+    m_cmhalDevice = MOS_New(CMHal, pCmState);
+    if (m_cmhalDevice == nullptr)
+    {
+        MHW_ASSERTMESSAGE("Create CM Hal interfaces failed.")
+        return MOS_STATUS_NO_SPACE;
+    }
+
+    m_cmhalDevice->SetGenPlatformInfo(PLATFORM_INTEL_RPLP, PLATFORM_INTEL_GT2, "TGLLP");
+    uint32_t cisaIDs[] = { GENX_TGLLP };
+    m_cmhalDevice->AddSupportedCisaIDs(cisaIDs, sizeof(cisaIDs)/sizeof(uint32_t));
+    m_cmhalDevice->m_l3Plane = TGL_L3_PLANE;
+    m_cmhalDevice->m_l3ConfigCount = TGL_L3_CONFIG_NUM;
+    return MOS_STATUS_SUCCESS;
+}
+
+static bool rplpRegisteredMosUtil =
+    MediaInterfacesFactory<MosUtilDevice>::
+    RegisterHal<MosUtilDeviceG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+static bool rplpRegisteredRenderHal =
+    MediaInterfacesFactory<RenderHalDevice>::
+    RegisterHal<RenderHalInterfacesG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
+
+static bool rplpRegisteredDecodeHistogram =
+    MediaInterfacesFactory<DecodeHistogramDevice>::
+    RegisterHal<DecodeHistogramDeviceG12Tgllp>((uint32_t)IGFX_RAPTORLAKE_P);
diff --git a/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.h b/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.h
new file mode 100644
index 000000000000..0bc6b45ba69a
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_rplp/media_interfaces_g12_rplp.h
@@ -0,0 +1,43 @@
+/*
+* Copyright (c) 2011-2021, Intel Corporation
+*
+* Permission is hereby granted, free of charge, to any person obtaining a
+* copy of this software and associated documentation files (the "Software"),
+* to deal in the Software without restriction, including without limitation
+* the rights to use, copy, modify, merge, publish, distribute, sublicense,
+* and/or sell copies of the Software, and to permit persons to whom the
+* Software is furnished to do so, subject to the following conditions:
+*
+* The above copyright notice and this permission notice shall be included
+* in all copies or substantial portions of the Software.
+*
+* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+* OTHER DEALINGS IN THE SOFTWARE.
+*/
+//!
+//! \file     media_interfaces_g12_rplp.h
+//! \brief    All interfaces used for rplp that require factory creation
+//!
+
+#ifndef __MEDIA_INTERFACES_G12_rplp_H__
+#define __MEDIA_INTERFACES_G12_rplp_H__
+
+
+#include "media_interfaces_g12_tgllp.h"
+#include "renderhal_g12_base.h"
+
+
+class CMHalInterfacesG12Rplp : public CMHalDevice
+{
+protected:
+    using CMHal = CM_HAL_G12_X;
+    MOS_STATUS Initialize(
+        CM_HAL_STATE *pCmState);
+};
+
+#endif // __MEDIA_INTERFACES_G12_rplp_H__
diff --git a/media_driver/media_interface/media_interfaces_m12_rplp/media_srcs.cmake b/media_driver/media_interface/media_interfaces_m12_rplp/media_srcs.cmake
new file mode 100644
index 000000000000..74e1ee74ee46
--- /dev/null
+++ b/media_driver/media_interface/media_interfaces_m12_rplp/media_srcs.cmake
@@ -0,0 +1,48 @@
+# Copyright (c) 2021, Intel Corporation
+#
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+
+set(TMP_SOURCES_
+    ${CMAKE_CURRENT_LIST_DIR}/media_interfaces_g12_rplp.cpp
+)
+
+set(TMP_HEADERS_
+    ${CMAKE_CURRENT_LIST_DIR}/media_interfaces_g12_rplp.h
+)
+
+set(SOURCES_
+    ${SOURCES_}
+    ${TMP_SOURCES_}
+)
+
+set(HEADERS_
+    ${HEADERS_}
+    ${TMP_HEADERS_}
+)
+
+set(COMMON_SOURCES_
+    ${COMMON_SOURCES_}
+    ${TMP_SOURCES_}
+)
+
+set(COMMON_HEADERS_
+    ${COMMON_HEADERS_}
+    ${TMP_HEADERS_}
+)
+
diff --git a/media_driver/media_interface/media_srcs.cmake b/media_driver/media_interface/media_srcs.cmake
index c2788815e4bc..3af786125fa6 100644
--- a/media_driver/media_interface/media_srcs.cmake
+++ b/media_driver/media_interface/media_srcs.cmake
@@ -83,6 +83,10 @@ if(GEN12_RPLS)
     media_include_subdirectory(media_interfaces_m12_rpls)
 endif()
 
+if(GEN12_RPLP)
+    media_include_subdirectory(media_interfaces_m12_rplp)
+endif()
+
 if(XEHP_SDV)
     media_include_subdirectory(media_interfaces_xehp_sdv)
 endif()
@@ -95,5 +99,4 @@ if(PVC)
     media_include_subdirectory(media_interfaces_pvc)
 endif()
 
-
 include(${MEDIA_EXT}/media_interface/media_srcs.cmake OPTIONAL)
-- 
2.34.1

