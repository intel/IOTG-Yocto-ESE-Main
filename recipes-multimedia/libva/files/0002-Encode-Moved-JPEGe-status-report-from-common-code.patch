From 876ac7b2d3c9e43eaa13007f887969c6acaa6d9b Mon Sep 17 00:00:00 2001
From: dvolkov <denis.volkov@intel.com>
Date: Thu, 15 Oct 2020 05:44:46 +0800
Subject: [PATCH 2/2] [Encode] Moved JPEGe status report from common code

[Encode] Moved JPEGe status report from common code
- Moved common Status Report code to special function
- Added JPEGe Status report for specific checking

Change-Id: Ia228c52007357fe7436f949761b7fb10cd432e9b
---
 .../common/codec/hal/codechal_encode_jpeg.cpp |  23 ++++
 .../common/codec/hal/codechal_encode_jpeg.h   |   6 +-
 .../codec/hal/codechal_encoder_base.cpp       | 104 +++++++++---------
 .../common/codec/hal/codechal_encoder_base.h  |  13 +++
 .../codec/hal/codechal_encode_jpeg_g11.h      |   2 +-
 5 files changed, 90 insertions(+), 58 deletions(-)

diff --git a/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.cpp b/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.cpp
index 031c43e6..4ae03166 100644
--- a/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.cpp
+++ b/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.cpp
@@ -1326,6 +1326,27 @@ uint32_t CodechalEncodeJpegState::CalculateCommandBufferSize()
     return commandBufferSize;
 }
 
+MOS_STATUS CodechalEncodeJpegState::GetStatusReport(
+    EncodeStatus* encodeStatus,
+    EncodeStatusReport* encodeStatusReport)
+{
+    MOS_STATUS eStatus = MOS_STATUS_SUCCESS;
+
+    PMHW_VDBOX_IMAGE_STATUS_CONTROL imgStatusCtrl = &encodeStatus->ImageStatusCtrl;
+
+    // The huffman tables sent by application were incorrect (used only for JPEG encoding)
+    if (imgStatusCtrl->MissingHuffmanCode == 1)
+    {
+        CODECHAL_ENCODE_ASSERTMESSAGE("Error: JPEG standard encoding: missing huffman code");
+        encodeStatusReport->CodecStatus = CODECHAL_STATUS_ERROR;
+        return eStatus;
+    }
+
+    eStatus = GetStatusReportCommon(encodeStatus, encodeStatusReport);
+
+    return eStatus;
+}
+
 CodechalEncodeJpegState::CodechalEncodeJpegState(
         CodechalHwInterface* hwInterface,
         CodechalDebugInterface* debugInterface,
@@ -1335,6 +1356,8 @@ CodechalEncodeJpegState::CodechalEncodeJpegState(
     CODECHAL_ENCODE_FUNCTION_ENTER;
 
     memset(m_refList, 0, sizeof(m_refList));
+
+    m_codecGetStatusReportDefined = true;
 }
 
 #if USE_CODECHAL_DEBUG_TOOL
diff --git a/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.h b/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.h
index b448b332..283ccfb3 100644
--- a/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.h
+++ b/media_driver/agnostic/common/codec/hal/codechal_encode_jpeg.h
@@ -168,9 +168,9 @@ public:
 
     uint32_t CalculateCommandBufferSize() override;
 
-    MOS_STATUS GetStatusReport(
-            EncodeStatus*       encodeStatus,
-            EncodeStatusReport* encodeStatusReport) override { return MOS_STATUS_SUCCESS;};
+    virtual MOS_STATUS GetStatusReport(
+        EncodeStatus* encodeStatus,
+        EncodeStatusReport* encodeStatusReport) override;
 
     MOS_STATUS ExecuteKernelFunctions() override { return MOS_STATUS_SUCCESS;};
 
diff --git a/media_driver/agnostic/common/codec/hal/codechal_encoder_base.cpp b/media_driver/agnostic/common/codec/hal/codechal_encoder_base.cpp
index f051e6a9..49543765 100644
--- a/media_driver/agnostic/common/codec/hal/codechal_encoder_base.cpp
+++ b/media_driver/agnostic/common/codec/hal/codechal_encoder_base.cpp
@@ -3822,8 +3822,6 @@ MOS_STATUS CodechalEncoderState::GetStatusReport(
             index * encodeStatusBuf->dwReportSize);
         EncodeStatusReport* encodeStatusReport = &encodeStatus->encodeStatusReport;
         PCODEC_REF_LIST refList = encodeStatusReport->pCurrRefList;
-        PMHW_VDBOX_IMAGE_STATUS_CONTROL imgStatusCtrl = &encodeStatus->ImageStatusCtrl;
-        PMHW_VDBOX_PAK_NUM_OF_SLICES numSlices = &encodeStatus->NumSlices;
         uint32_t localCount = encodeStatus->dwStoredData - globalHWStoredData;
 
         if (localCount == 0 || localCount > globalCount)
@@ -3909,71 +3907,30 @@ MOS_STATUS CodechalEncoderState::GetStatusReport(
                      encodeStatusReport->bitstreamSize = CODECHAL_VP9_MB_CODE_SIZE * sizeof(uint32_t) * size;
                 }
             }
-            // The huffman tables sent by application were incorrect (used only for JPEG encoding)
-            else if(m_standard == CODECHAL_JPEG && imgStatusCtrl->MissingHuffmanCode == 1)
-            {
-                CODECHAL_ENCODE_ASSERTMESSAGE("Error: JPEG standard encoding: missing huffman code");
-                encodeStatusReport->CodecStatus = CODECHAL_STATUS_ERROR;
-            }
             else
             {
                 if (m_codecGetStatusReportDefined)
                 {
                     // Call corresponding CODEC's status report function if existing
                     eStatus = GetStatusReport(encodeStatus, encodeStatusReport);
-                    if (MOS_STATUS_SUCCESS != eStatus)
-                    {
-                        return eStatus;
-                    }
-
-                    if (m_osInterface->osCpInterface->IsCpEnabled() && m_skipFrameBasedHWCounterRead == false)
-                    {
-                        eStatus = ReadCounterValue(index, encodeStatusReport);
-                        if (MOS_STATUS_SUCCESS != eStatus)
-                        {
-                            return eStatus;
-                        }
-                    }
                 }
                 else
                 {
-                    encodeStatusReport->CodecStatus = CODECHAL_STATUS_SUCCESSFUL;
-                    encodeStatusReport->bitstreamSize =
-                        encodeStatus->dwMFCBitstreamByteCountPerFrame + encodeStatus->dwHeaderBytesInserted;
-
-                    // dwHeaderBytesInserted is for WAAVCSWHeaderInsertion
-                    // and is 0 otherwise
-                    encodeStatusReport->QpY = encodeStatus->BrcQPReport.DW0.QPPrimeY;
-                    encodeStatusReport->SuggestedQpYDelta =
-                        encodeStatus->ImageStatusCtrl.CumulativeSliceDeltaQP;
-                    encodeStatusReport->NumberPasses = (uint8_t)(encodeStatus->ImageStatusCtrl.TotalNumPass + 1);
-                    encodeStatusReport->SceneChangeDetected =
-                        (encodeStatus->dwSceneChangedFlag & CODECHAL_ENCODE_SCENE_CHANGE_DETECTED_MASK) ? 1 : 0;
-
-                    CODECHAL_ENCODE_CHK_NULL_RETURN(m_skuTable);
-
-                    if (m_osInterface->osCpInterface->IsCpEnabled() && m_skipFrameBasedHWCounterRead == false)
-                    {
-                        eStatus = ReadCounterValue(index, encodeStatusReport);
-                        if (MOS_STATUS_SUCCESS != eStatus)
-                        {
-                            return eStatus;
-                        }
-                    }
+                    eStatus = GetStatusReportCommon(encodeStatus, encodeStatusReport);
+                }
 
-                    if (m_picWidthInMb != 0 && m_frameFieldHeightInMb != 0)
-                    {
-                        encodeStatusReport->AverageQp = (unsigned char)(((uint32_t)encodeStatus->QpStatusCount.cumulativeQP)
-                            / (m_picWidthInMb * m_frameFieldHeightInMb));
-                    }
-                    encodeStatusReport->PanicMode = encodeStatus->ImageStatusCtrl.Panic;
+                if (MOS_STATUS_SUCCESS != eStatus)
+                {
+                    return eStatus;
+                }
 
-                    // If Num slices is greater than spec limit set NumSlicesNonCompliant to 1 and report error
-                    if (numSlices->NumberOfSlices > m_maxNumSlicesAllowed)
+                if (m_osInterface->osCpInterface->IsCpEnabled() && m_skipFrameBasedHWCounterRead == false)
+                {
+                    eStatus = ReadCounterValue(index, encodeStatusReport);
+                    if (MOS_STATUS_SUCCESS != eStatus)
                     {
-                        encodeStatusReport->NumSlicesNonCompliant = 1;
+                        return eStatus;
                     }
-                    encodeStatusReport->NumberSlices = numSlices->NumberOfSlices;
                 }
 
                 if (encodeStatusReport->bitstreamSize > m_bitstreamUpperBound)
@@ -4146,6 +4103,45 @@ MOS_STATUS CodechalEncoderState::GetStatusReport(
     return eStatus;
 }
 
+MOS_STATUS CodechalEncoderState::GetStatusReportCommon(
+    EncodeStatus* encodeStatus,
+    EncodeStatusReport* encodeStatusReport)
+{
+    MOS_STATUS eStatus = MOS_STATUS_SUCCESS;
+
+    encodeStatusReport->CodecStatus = CODECHAL_STATUS_SUCCESSFUL;
+    encodeStatusReport->bitstreamSize =
+        encodeStatus->dwMFCBitstreamByteCountPerFrame + encodeStatus->dwHeaderBytesInserted;
+
+    // dwHeaderBytesInserted is for WAAVCSWHeaderInsertion
+    // and is 0 otherwise
+    encodeStatusReport->QpY = encodeStatus->BrcQPReport.DW0.QPPrimeY;
+    encodeStatusReport->SuggestedQpYDelta =
+        encodeStatus->ImageStatusCtrl.CumulativeSliceDeltaQP;
+    encodeStatusReport->NumberPasses = (uint8_t)(encodeStatus->ImageStatusCtrl.TotalNumPass + 1);
+    encodeStatusReport->SceneChangeDetected =
+        (encodeStatus->dwSceneChangedFlag & CODECHAL_ENCODE_SCENE_CHANGE_DETECTED_MASK) ? 1 : 0;
+
+    CODECHAL_ENCODE_CHK_NULL_RETURN(m_skuTable);
+
+    if (m_picWidthInMb != 0 && m_frameFieldHeightInMb != 0)
+    {
+        encodeStatusReport->AverageQp = (unsigned char)(((uint32_t)encodeStatus->QpStatusCount.cumulativeQP)
+            / (m_picWidthInMb * m_frameFieldHeightInMb));
+    }
+    encodeStatusReport->PanicMode = encodeStatus->ImageStatusCtrl.Panic;
+
+    // If Num slices is greater than spec limit set NumSlicesNonCompliant to 1 and report error
+    PMHW_VDBOX_PAK_NUM_OF_SLICES numSlices = &encodeStatus->NumSlices;
+    if (numSlices->NumberOfSlices > m_maxNumSlicesAllowed)
+    {
+        encodeStatusReport->NumSlicesNonCompliant = 1;
+    }
+    encodeStatusReport->NumberSlices = numSlices->NumberOfSlices;
+
+    return eStatus;
+}
+
 //------------------------------------------------------------------------------
 //| Purpose:    Reports user feature keys used for encoding
 //| Return:     N/A
diff --git a/media_driver/agnostic/common/codec/hal/codechal_encoder_base.h b/media_driver/agnostic/common/codec/hal/codechal_encoder_base.h
index e64a6732..ac68a49b 100644
--- a/media_driver/agnostic/common/codec/hal/codechal_encoder_base.h
+++ b/media_driver/agnostic/common/codec/hal/codechal_encoder_base.h
@@ -1790,6 +1790,19 @@ public:
     //!
     MOS_STATUS GetStatusReport(void *status, uint16_t numStatus) override;
 
+    //!
+    //! \brief  Get Status Report for the common codec part
+    //! \param  [out] encodeStatus
+    //!         Encoder status
+    //! \param  [out] encodeStatusReport
+    //!         Encoder status report
+    //! \return MOS_STATUS
+    //!         MOS_STATUS_SUCCESS if success, else fail reason
+    //!
+    MOS_STATUS GetStatusReportCommon(
+        EncodeStatus* encodeStatus,
+        EncodeStatusReport* encodeStatusReport);
+
     //!
     //! \brief  Read counter value for encode.
     //! \param  [in] index
diff --git a/media_driver/agnostic/gen11/codec/hal/codechal_encode_jpeg_g11.h b/media_driver/agnostic/gen11/codec/hal/codechal_encode_jpeg_g11.h
index f50f7ef1..4faea020 100644
--- a/media_driver/agnostic/gen11/codec/hal/codechal_encode_jpeg_g11.h
+++ b/media_driver/agnostic/gen11/codec/hal/codechal_encode_jpeg_g11.h
@@ -48,7 +48,7 @@ public:
     //!
     //! \brief    Destructor
     //!
-    ~CodechalEncodeJpegStateG11();
+    virtual ~CodechalEncodeJpegStateG11();
 
     //derived from base class
     MOS_STATUS Initialize(CodechalSetting *settings) override;
-- 
2.24.3

