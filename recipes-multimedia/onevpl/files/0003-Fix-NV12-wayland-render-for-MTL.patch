From c8ed52eee60a724a41d2b5a19ca50f4569c0e584 Mon Sep 17 00:00:00 2001
From: Vincent Cheah Beng Keat <vincent.beng.keat.cheah@intel.com>
Date: Thu, 7 Sep 2023 23:49:51 +0800
Subject: [PATCH 3/7] Fix NV12 wayland render for MTL

Tested command: ./sample_decode h264 -vaapi -i test.h264 -rwld
---
 CHANGELOG.md                                  |  5 +++-
 .../wayland/include/class_wayland.h           |  4 ++++
 .../wayland/include/listener_wayland.h        | 12 ++++++++++
 .../sample_misc/wayland/src/class_wayland.cpp | 14 +++++++++--
 .../wayland/src/listener_wayland.cpp          | 24 +++++++++++++++++++
 5 files changed, 56 insertions(+), 3 deletions(-)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index ea4b2c4..3cd00ab 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -9,7 +9,9 @@ programming interface for video decoding, encoding, and processing to build
 portable media pipelines on CPUs, GPUs, and other accelerators.
 
 ## [Unreleased]
-### Fixed - rdrm NV12 and P010 render for MTL
+### Fixed
+- rdrm NV12 and P010 render for MTL
+- Fix NV12 wayland render for MTL
 
 ## [2023.3.1] - 2023-07-21
 
@@ -32,6 +34,7 @@ portable media pipelines on CPUs, GPUs, and other accelerators.
 - USE_ONEAPI_INSTALL_LAYOUT build shortcut
 - '-sw' option from examples
 
+
 ### Added
 - New MFXSetConfigFilterProperty property: `mfxExtendedDeviceId.RevisionID`
 
diff --git a/tools/legacy/sample_misc/wayland/include/class_wayland.h b/tools/legacy/sample_misc/wayland/include/class_wayland.h
index 02c361c..0fb0fa0 100644
--- a/tools/legacy/sample_misc/wayland/include/class_wayland.h
+++ b/tools/legacy/sample_misc/wayland/include/class_wayland.h
@@ -122,6 +122,9 @@ public:
     void SetDMABuf(struct zwp_linux_dmabuf_v1* dmabuf) {
         m_dmabuf = dmabuf;
     }
+    void SetReqiredTiled4() {
+        m_requiredTiled4 = true;
+    }
     #endif
     void DrmHandleDevice(const char* device);
     void DrmHandleAuthenticated();
@@ -173,6 +176,7 @@ private:
     char* m_device_name;
     int m_x, m_y;
     bool m_perf_mode;
+    bool m_requiredTiled4;
 
 protected:
     std::list<wld_buffer*> m_buffers_list;
diff --git a/tools/legacy/sample_misc/wayland/include/listener_wayland.h b/tools/legacy/sample_misc/wayland/include/listener_wayland.h
index 8401e2b..c9e001a 100644
--- a/tools/legacy/sample_misc/wayland/include/listener_wayland.h
+++ b/tools/legacy/sample_misc/wayland/include/listener_wayland.h
@@ -7,6 +7,7 @@
 #ifndef LISTENER_WAYLAND_H
 #define LISTENER_WAYLAND_H
 
+#include <drm_fourcc.h>
 #include <stdint.h>
 #include "class_wayland.h"
 
@@ -56,4 +57,15 @@ void xdg_toplevel_configure(void* data,
 void xdg_toplevel_close(void* data, struct xdg_toplevel* xdg_toplevel);
 #endif
 
+#if defined(WAYLAND_LINUX_DMABUF_SUPPORT)
+/* dmabuf listener */
+void dmabuf_format(void* data, struct zwp_linux_dmabuf_v1* zwp_linux_dmabuf, uint32_t format);
+
+void dmabuf_modifier(void* data,
+                     struct zwp_linux_dmabuf_v1* zwp_linux_dmabuf,
+                     uint32_t format,
+                     uint32_t modifier_hi,
+                     uint32_t modifier_lo);
+#endif
+
 #endif /* LISTENER_WAYLAND_H */
diff --git a/tools/legacy/sample_misc/wayland/src/class_wayland.cpp b/tools/legacy/sample_misc/wayland/src/class_wayland.cpp
index ac8ba65..85719bf 100644
--- a/tools/legacy/sample_misc/wayland/src/class_wayland.cpp
+++ b/tools/legacy/sample_misc/wayland/src/class_wayland.cpp
@@ -61,6 +61,7 @@ Wayland::Wayland()
           m_x(0),
           m_y(0),
           m_perf_mode(false),
+          m_requiredTiled4(false),
           m_buffers_list() {
     std::memset(&m_poll, 0, sizeof(m_poll));
 }
@@ -364,6 +365,11 @@ struct wl_buffer* Wayland::CreatePrimeBuffer(uint32_t name,
         int i                                            = 0;
         uint64_t modifier                                = I915_FORMAT_MOD_Y_TILED;
 
+    #if defined(DRM_LINUX_MODIFIER_TILED4_SUPPORT)
+        if (m_requiredTiled4)
+            modifier = I915_FORMAT_MOD_4_TILED;
+    #endif
+
         dmabuf_params = zwp_linux_dmabuf_v1_create_params(m_dmabuf);
         for (i = 0; i < 2; i++) {
             zwp_linux_buffer_params_v1_add(dmabuf_params,
@@ -459,9 +465,13 @@ void Wayland::RegistryGlobal(struct wl_registry* registry,
         wl_drm_add_listener(m_drm, &drm_listener, this);
     }
 #if defined(WAYLAND_LINUX_DMABUF_SUPPORT)
-    else if (msdk_match(interface, "zwp_linux_dmabuf_v1"))
+    else if (msdk_match(interface, "zwp_linux_dmabuf_v1")) {
+        static const struct zwp_linux_dmabuf_v1_listener dmabuf_listener = { dmabuf_format,
+                                                                             dmabuf_modifier };
         m_dmabuf = static_cast<zwp_linux_dmabuf_v1*>(
-            wl_registry_bind(registry, name, &zwp_linux_dmabuf_v1_interface, version));
+            wl_registry_bind(registry, name, &zwp_linux_dmabuf_v1_interface, 3));
+        zwp_linux_dmabuf_v1_add_listener(m_dmabuf, &dmabuf_listener, this);
+    }
 #endif
 }
 
diff --git a/tools/legacy/sample_misc/wayland/src/listener_wayland.cpp b/tools/legacy/sample_misc/wayland/src/listener_wayland.cpp
index b62cd70..54c30b2 100644
--- a/tools/legacy/sample_misc/wayland/src/listener_wayland.cpp
+++ b/tools/legacy/sample_misc/wayland/src/listener_wayland.cpp
@@ -88,3 +88,27 @@ void xdg_toplevel_close(void* data, struct xdg_toplevel* xdg_toplevel) {
     /* NOT IMPLEMENTED */
 }
 #endif
+
+#if defined(WAYLAND_LINUX_DMABUF_SUPPORT)
+/* dmabuf listener */
+void dmabuf_format(void* data, struct zwp_linux_dmabuf_v1* zwp_linux_dmabuf, uint32_t format) {
+    /* NOT IMPLEMENTED */
+}
+
+void dmabuf_modifier(void* data,
+                     struct zwp_linux_dmabuf_v1* zwp_linux_dmabuf,
+                     uint32_t format,
+                     uint32_t modifier_hi,
+                     uint32_t modifier_lo) {
+    uint64_t modifier = (uint64_t)modifier_hi << 32 | modifier_lo;
+
+    if (modifier == DRM_FORMAT_MOD_INVALID)
+        return;
+
+    #if defined(DRM_LINUX_MODIFIER_TILED4_SUPPORT)
+    Wayland* wayland = static_cast<Wayland*>(data);
+    if (format == WL_DRM_FORMAT_NV12 && modifier == I915_FORMAT_MOD_4_TILED)
+        wayland->SetReqiredTiled4();
+    #endif
+}
+#endif
-- 
2.40.1

