From 9401cd7c8f4b0799b6dc3431041035f2f11c3dcb Mon Sep 17 00:00:00 2001
From: "Hoe, Sheng Yang" <sheng.yang.hoe@intel.com>
Date: Fri, 27 Oct 2023 17:29:29 +0800
Subject: [PATCH 10/11] Fix X11 render

Signed-off-by: Hoe, Sheng Yang <sheng.yang.hoe@intel.com>
---
 .../sample_common/include/vaapi_device.h      | 10 ++--
 .../sample_common/include/vaapi_utils_x11.h   |  6 ++-
 .../legacy/sample_common/src/vaapi_device.cpp | 35 ++++++------
 .../sample_common/src/vaapi_utils_x11.cpp     | 54 +++++++++++++------
 4 files changed, 64 insertions(+), 41 deletions(-)

diff --git a/tools/legacy/sample_common/include/vaapi_device.h b/tools/legacy/sample_common/include/vaapi_device.h
index 41b83727..4ea2f57f 100644
--- a/tools/legacy/sample_common/include/vaapi_device.h
+++ b/tools/legacy/sample_common/include/vaapi_device.h
@@ -67,7 +67,7 @@ private:
 /** VAAPI X11 implementation. */
 class CVAAPIDeviceX11 : public CHWDevice {
 public:
-    CVAAPIDeviceX11() {
+    CVAAPIDeviceX11(const std::string& devicePath) : m_X11LibVA(devicePath) {
         m_window      = NULL;
         m_nRenderWinX = 0;
         m_nRenderWinY = 0;
@@ -75,9 +75,10 @@ public:
         m_nRenderWinH = 0;
         m_bRenderWin  = false;
         #if defined(X11_DRI3_SUPPORT)
-        m_dri_fd  = 0;
-        m_bufmgr  = NULL;
-        m_xcbconn = NULL;
+        m_dri_fd      = 0;
+        m_bufmgr      = NULL;
+        m_xcbconn     = NULL;
+        m_device_path = devicePath;
         #endif
     }
     virtual ~CVAAPIDeviceX11(void);
@@ -108,6 +109,7 @@ private:
     int m_dri_fd;
     drm_intel_bufmgr* m_bufmgr;
     xcb_connection_t* m_xcbconn;
+    std::string m_device_path;
         #endif
     // no copies allowed
     CVAAPIDeviceX11(const CVAAPIDeviceX11&);
diff --git a/tools/legacy/sample_common/include/vaapi_utils_x11.h b/tools/legacy/sample_common/include/vaapi_utils_x11.h
index e027ed33..acdd78e1 100644
--- a/tools/legacy/sample_common/include/vaapi_utils_x11.h
+++ b/tools/legacy/sample_common/include/vaapi_utils_x11.h
@@ -14,7 +14,7 @@
 
 class X11LibVA : public CLibVA {
 public:
-    X11LibVA(void);
+    X11LibVA(const std::string& devicePath = "");
     virtual ~X11LibVA(void);
 
     void* GetXDisplay(void) {
@@ -67,6 +67,10 @@ private:
     DISALLOW_COPY_AND_ASSIGN(X11LibVA);
 };
 
+    #if defined(X11_DRI3_SUPPORT)
+int open_intel_adapter(const std::string& devicePath);
+    #endif
+
 #endif // #if defined(LIBVA_X11_SUPPORT)
 
 #endif // #ifndef __VAAPI_UTILS_X11_H__
diff --git a/tools/legacy/sample_common/src/vaapi_device.cpp b/tools/legacy/sample_common/src/vaapi_device.cpp
index b4d2d427..cdde38e8 100644
--- a/tools/legacy/sample_common/src/vaapi_device.cpp
+++ b/tools/legacy/sample_common/src/vaapi_device.cpp
@@ -77,24 +77,21 @@ mfxStatus CVAAPIDeviceX11::Init(mfxHDL hWindow, mfxU16 nViews, mfxU32 nAdapterNu
 
     m_xcbconn = x11xcblib.XGetXCBConnection(VAAPI_GET_X_DISPLAY(m_X11LibVA.GetXDisplay()));
 
-    // it's enough to pass render node, because we only request
-    // information from kernel via m_dri_fd
-    for (mfxU32 i = 0; i < MFX_DEVICE_MAX_NODES; ++i) {
-        std::string devPath = MFX_DEVICE_NODE_RENDER + std::to_string(MFX_DEVICE_NODE_INDEX + i);
-        m_dri_fd            = open(devPath.c_str(), O_RDWR);
-        if (m_dri_fd < 0)
-            continue;
-
-        char driverName[MFX_DEVICE_DRIVER_NAME_LEN + 1] = {};
-        drm_version_t version                           = {};
-        version.name_len                                = MFX_DEVICE_DRIVER_NAME_LEN;
-        version.name                                    = driverName;
-
-        if (!ioctl(m_dri_fd, DRM_IOWR(0, drm_version), &version) &&
-            msdk_match(driverName, MFX_DEVICE_DRIVER_NAME)) {
-            break;
+    if (m_device_path.empty()) {
+        // it's enough to pass render node, because we only request
+        // information from kernel via m_dri_fd
+        for (mfxU32 i = 0; i < MFX_DEVICE_MAX_NODES; ++i) {
+            std::string devPath =
+                MFX_DEVICE_NODE_RENDER + std::to_string(MFX_DEVICE_NODE_INDEX + i);
+            m_dri_fd = open_intel_adapter(devPath);
+            if (m_dri_fd < 0)
+                continue;
+            else
+                break;
         }
-        close(m_dri_fd);
+    }
+    else {
+        m_dri_fd = open_intel_adapter(m_device_path);
     }
 
     if (m_dri_fd < 0) {
@@ -493,7 +490,7 @@ CHWDevice* CreateVAAPIDevice(const std::string& devicePath, int type) {
         case MFX_LIBVA_X11:
         #if defined(LIBVA_X11_SUPPORT)
             try {
-                device = new CVAAPIDeviceX11;
+                device = new CVAAPIDeviceX11(devicePath);
             }
             catch (std::exception&) {
             }
@@ -507,7 +504,7 @@ CHWDevice* CreateVAAPIDevice(const std::string& devicePath, int type) {
         case MFX_LIBVA_AUTO:
         #if defined(LIBVA_X11_SUPPORT)
             try {
-                device = new CVAAPIDeviceX11;
+                device = new CVAAPIDeviceX11(devicePath);
             }
             catch (std::exception&) {
             }
diff --git a/tools/legacy/sample_common/src/vaapi_utils_x11.cpp b/tools/legacy/sample_common/src/vaapi_utils_x11.cpp
index 3eae3f44..ec44752c 100644
--- a/tools/legacy/sample_common/src/vaapi_utils_x11.cpp
+++ b/tools/legacy/sample_common/src/vaapi_utils_x11.cpp
@@ -23,7 +23,32 @@ constexpr mfxU32 MFX_X11_DRIVER_NAME_LEN = 4;
 constexpr mfxU32 MFX_X11_NODE_INDEX      = 128;
 constexpr mfxU32 MFX_X11_MAX_NODES       = 16;
 
-X11LibVA::X11LibVA(void)
+    #if defined(X11_DRI3_SUPPORT)
+int open_intel_adapter(const std::string& devicePath) {
+    int fd = open(devicePath.c_str(), O_RDWR);
+
+    if (fd < 0) {
+        printf("Failed to open device: %s\n", devicePath.c_str());
+        return -1;
+    }
+
+    char driverName[MFX_X11_DRIVER_NAME_LEN + 1] = {};
+    drm_version_t version                        = {};
+    version.name_len                             = MFX_X11_DRIVER_NAME_LEN;
+    version.name                                 = driverName;
+
+    if (!ioctl(fd, DRM_IOWR(0, drm_version), &version) &&
+        msdk_match(driverName, MFX_X11_DRIVER_NAME)) {
+        return fd;
+    }
+
+    close(fd);
+    printf("%s is not Intel device\n", devicePath.c_str());
+    return -1;
+}
+    #endif
+
+X11LibVA::X11LibVA(const std::string& devicePath)
         : CLibVA(MFX_LIBVA_X11),
           m_display(0),
           m_configID(VA_INVALID_ID),
@@ -40,23 +65,18 @@ X11LibVA::X11LibVA(void)
     }
 
     #if defined(X11_DRI3_SUPPORT)
-    for (mfxU32 i = 0; i < MFX_X11_MAX_NODES; ++i) {
-        std::string devPath = MFX_X11_NODE_RENDER + std::to_string(MFX_X11_NODE_INDEX + i);
-        fd                  = open(devPath.c_str(), O_RDWR);
-        if (fd < 0)
-            continue;
-
-        char driverName[MFX_X11_DRIVER_NAME_LEN + 1] = {};
-        drm_version_t version                        = {};
-        version.name_len                             = MFX_X11_DRIVER_NAME_LEN;
-        version.name                                 = driverName;
-
-        if (!ioctl(fd, DRM_IOWR(0, drm_version), &version) &&
-            msdk_match(driverName, MFX_X11_DRIVER_NAME)) {
-            break;
+    if (devicePath.empty()) {
+        for (mfxU32 i = 0; i < MFX_X11_MAX_NODES; ++i) {
+            std::string devPath = MFX_X11_NODE_RENDER + std::to_string(MFX_X11_NODE_INDEX + i);
+            fd                  = open_intel_adapter(devPath);
+            if (fd < 0)
+                continue;
+            else
+                break;
         }
-        close(fd);
-        fd = -1;
+    }
+    else {
+        fd = open_intel_adapter(devicePath);
     }
 
     if (fd < 0) {
-- 
2.34.1

