From 145e12615bcda41c08afe79e00d192af32fbc47c Mon Sep 17 00:00:00 2001
From: Vincent Cheah Beng Keat <vincent.beng.keat.cheah@intel.com>
Date: Fri, 17 Nov 2023 20:43:35 +0800
Subject: [PATCH] Enable JPEG BGR4 encode

---
 .../sample_common/src/d3d11_allocator.cpp     | 12 +++++++
 .../sample_common/src/d3d_allocator.cpp       | 13 +++++--
 .../legacy/sample_common/src/sample_utils.cpp |  3 ++
 .../sample_common/src/vaapi_allocator.cpp     | 34 +++++++++++--------
 .../sample_encode/src/sample_encode.cpp       | 15 ++++++--
 5 files changed, 58 insertions(+), 19 deletions(-)

diff --git a/tools/legacy/sample_common/src/d3d11_allocator.cpp b/tools/legacy/sample_common/src/d3d11_allocator.cpp
index ed6e3b3..96598c5 100644
--- a/tools/legacy/sample_common/src/d3d11_allocator.cpp
+++ b/tools/legacy/sample_common/src/d3d11_allocator.cpp
@@ -111,6 +111,7 @@ mfxStatus D3D11FrameAllocator::LockFrame(mfxMemId mid, mfxFrameData* ptr) {
 
             if (DXGI_FORMAT_NV12 != desc.Format && DXGI_FORMAT_420_OPAQUE != desc.Format &&
                 DXGI_FORMAT_YUY2 != desc.Format && DXGI_FORMAT_P8 != desc.Format &&
+                DXGI_FORMAT_R8G8B8A8_UNORM != desc.Format &&
                 DXGI_FORMAT_B8G8R8A8_UNORM != desc.Format && DXGI_FORMAT_R16_UINT != desc.Format &&
                 DXGI_FORMAT_R16_UNORM != desc.Format &&
                 DXGI_FORMAT_R10G10B10A2_UNORM != desc.Format &&
@@ -197,6 +198,13 @@ mfxStatus D3D11FrameAllocator::LockFrame(mfxMemId mid, mfxFrameData* ptr) {
             ptr->R     = ptr->B + 2;
             ptr->A     = ptr->B + 3;
 
+            break;
+        case DXGI_FORMAT_R8G8B8A8_UNORM:
+            ptr->Pitch = (mfxU16)lockedRect.RowPitch;
+            ptr->R     = (mfxU8*)lockedRect.pData;
+            ptr->G     = ptr->R + 1;
+            ptr->B     = ptr->R + 2;
+            ptr->A     = ptr->R + 3;
             break;
         case DXGI_FORMAT_R10G10B10A2_UNORM:
             ptr->Pitch = (mfxU16)lockedRect.RowPitch;
@@ -409,6 +417,8 @@ mfxStatus D3D11FrameAllocator::AllocImpl(mfxFrameAllocRequest* request,
             desc.BindFlags = D3D11_BIND_DECODER;
 
         if ((MFX_MEMTYPE_FROM_VPPIN & request->Type) && (DXGI_FORMAT_YUY2 == desc.Format) ||
+            (MFX_MEMTYPE_FROM_ENCODE & request->Type) &&
+                (DXGI_FORMAT_R8G8B8A8_UNORM == desc.Format) ||
             (DXGI_FORMAT_B8G8R8A8_UNORM == desc.Format) ||
             (DXGI_FORMAT_R10G10B10A2_UNORM == desc.Format) ||
             (DXGI_FORMAT_R16G16B16A16_UNORM == desc.Format)) {
@@ -502,6 +512,8 @@ DXGI_FORMAT D3D11FrameAllocator::ConverColortFormat(mfxU32 fourcc) {
 
         case MFX_FOURCC_RGB4:
             return DXGI_FORMAT_B8G8R8A8_UNORM;
+        case MFX_FOURCC_BGR4:
+            return DXGI_FORMAT_R8G8B8A8_UNORM;
 
         case MFX_FOURCC_P8:
         case MFX_FOURCC_P8_TEXTURE:
diff --git a/tools/legacy/sample_common/src/d3d_allocator.cpp b/tools/legacy/sample_common/src/d3d_allocator.cpp
index 97fc1c5..3e9421a 100644
--- a/tools/legacy/sample_common/src/d3d_allocator.cpp
+++ b/tools/legacy/sample_common/src/d3d_allocator.cpp
@@ -49,6 +49,8 @@ D3DFORMAT ConvertMfxFourccToD3dFormat(mfxU32 fourcc) {
             return D3DFMT_R8G8B8;
         case MFX_FOURCC_RGB4:
             return D3DFMT_A8R8G8B8;
+        case MFX_FOURCC_BGR4:
+            return D3DFMT_A8B8G8R8;
         case MFX_FOURCC_P8:
             return D3DFMT_P8;
         case MFX_FOURCC_P010:
@@ -137,8 +139,8 @@ mfxStatus D3DFrameAllocator::LockFrame(mfxMemId mid, mfxFrameData* ptr) {
         return MFX_ERR_LOCK_MEMORY;
 
     if (desc.Format != D3DFMT_NV12 && desc.Format != D3DFMT_YV12 && desc.Format != D3DFMT_YUY2 &&
-        desc.Format != D3DFMT_R8G8B8 && desc.Format != D3DFMT_A8R8G8B8 &&
-        desc.Format != D3DFMT_P8 && desc.Format != D3DFMT_P010 &&
+        desc.Format != D3DFMT_A8B8G8R8 && desc.Format != D3DFMT_R8G8B8 &&
+        desc.Format != D3DFMT_A8R8G8B8 && desc.Format != D3DFMT_P8 && desc.Format != D3DFMT_P010 &&
         desc.Format != D3DFMT_A2R10G10B10 && desc.Format != D3DFMT_A16B16G16R16 &&
         desc.Format != D3DFMT_IMC3 && desc.Format != D3DFMT_AYUV && desc.Format != D3DFMT_Y210 &&
         desc.Format != D3DFMT_P016 && desc.Format != D3DFMT_Y216 && desc.Format != D3DFMT_Y410 &&
@@ -178,6 +180,13 @@ mfxStatus D3DFrameAllocator::LockFrame(mfxMemId mid, mfxFrameData* ptr) {
             ptr->G     = ptr->B + 1;
             ptr->R     = ptr->B + 2;
             break;
+        case D3DFMT_A8B8G8R8:
+            ptr->Pitch = (mfxU16)locked.Pitch;
+            ptr->R     = (mfxU8*)locked.pBits;
+            ptr->G     = ptr->R + 1;
+            ptr->B     = ptr->R + 2;
+            ptr->A     = ptr->R + 3;
+            break;
         case D3DFMT_A8R8G8B8:
         case D3DFMT_A2R10G10B10:
             ptr->Pitch = (mfxU16)locked.Pitch;
diff --git a/tools/legacy/sample_common/src/sample_utils.cpp b/tools/legacy/sample_common/src/sample_utils.cpp
index 82556eb..859713e 100644
--- a/tools/legacy/sample_common/src/sample_utils.cpp
+++ b/tools/legacy/sample_common/src/sample_utils.cpp
@@ -2020,6 +2020,8 @@ const char* ColorFormatToStr(mfxU32 format) {
             return "I422";
         case MFX_FOURCC_RGB4:
             return "RGB4";
+        case MFX_FOURCC_BGR4:
+            return "BGR4";
         case MFX_FOURCC_YUY2:
             return "YUY2";
         case MFX_FOURCC_UYVY:
@@ -2841,6 +2843,7 @@ mfxU16 FourCCToChroma(mfxU32 fourCC) {
         case MFX_FOURCC_A2RGB10:
         case MFX_FOURCC_AYUV:
         case MFX_FOURCC_RGB4:
+        case MFX_FOURCC_BGR4:
             return MFX_CHROMAFORMAT_YUV444;
     }
 
diff --git a/tools/legacy/sample_common/src/vaapi_allocator.cpp b/tools/legacy/sample_common/src/vaapi_allocator.cpp
index fadba6e..04dcc98 100644
--- a/tools/legacy/sample_common/src/vaapi_allocator.cpp
+++ b/tools/legacy/sample_common/src/vaapi_allocator.cpp
@@ -221,7 +221,8 @@ mfxStatus vaapiFrameAllocator::AllocImpl(mfxFrameAllocRequest* request,
     VAStatus va_res        = VA_STATUS_SUCCESS;
     unsigned int va_fourcc = 0;
     VASurfaceID* surfaces  = NULL;
-    VASurfaceAttrib attrib;
+    VASurfaceAttrib attrib[2];
+    unsigned int attrCnt   = 0;
     vaapiMemId *vaapi_mids = NULL, *vaapi_mid = NULL;
     mfxMemId* mids      = NULL;
     mfxU32 fourcc       = request->Info.FourCC;
@@ -249,21 +250,24 @@ mfxStatus vaapiFrameAllocator::AllocImpl(mfxFrameAllocRequest* request,
         if (VA_FOURCC_P208 != va_fourcc) {
             unsigned int format;
 
-            attrib.type          = VASurfaceAttribPixelFormat;
-            attrib.flags         = VA_SURFACE_ATTRIB_SETTABLE;
-            attrib.value.type    = VAGenericValueTypeInteger;
-            attrib.value.value.i = va_fourcc;
-            format               = va_fourcc;
-
-            if (fourcc == MFX_FOURCC_VP8_NV12) {
-                // special configuration for NV12 surf allocation for VP8 hybrid encoder is required
-                attrib.type          = (VASurfaceAttribType)VASurfaceAttribUsageHint;
-                attrib.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER;
+            attrib[attrCnt].type          = VASurfaceAttribPixelFormat;
+            attrib[attrCnt].flags         = VA_SURFACE_ATTRIB_SETTABLE;
+            attrib[attrCnt].value.type    = VAGenericValueTypeInteger;
+            attrib[attrCnt].value.value.i = va_fourcc;
+            format                        = va_fourcc;
+
+            if ((fourcc == MFX_FOURCC_VP8_NV12) ||
+                ((MFX_MEMTYPE_FROM_ENCODE & request->Type) && (fourcc == MFX_FOURCC_BGR4))) {
+                /* special configuration for NV12 surf allocation for VP8 hybrid encoder is required
+                 * RGB32 for JPEG is required
+		 */
+                attrib[attrCnt].type            = (VASurfaceAttribType)VASurfaceAttribUsageHint;
+                attrib[attrCnt++].value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER;
             }
             else if (fourcc == MFX_FOURCC_VP8_MBDATA) {
                 // special configuration for MB data surf allocation for VP8 hybrid encoder is required
-                attrib.value.value.i = VA_FOURCC_P208;
-                format               = VA_FOURCC_P208;
+                attrib[attrCnt].value.value.i = VA_FOURCC_P208;
+                format                        = VA_FOURCC_P208;
             }
             else if (va_fourcc == VA_FOURCC_NV12) {
                 format = VA_RT_FORMAT_YUV420;
@@ -287,8 +291,8 @@ mfxStatus vaapiFrameAllocator::AllocImpl(mfxFrameAllocRequest* request,
                                                request->Info.Height,
                                                surfaces,
                                                surfaces_num,
-                                               &attrib,
-                                               1);
+                                               &attrib[0],
+                                               attrCnt);
 
             mfx_res             = va_to_mfx_status(va_res);
             bCreateSrfSucceeded = (MFX_ERR_NONE == mfx_res);
diff --git a/tools/legacy/sample_encode/src/sample_encode.cpp b/tools/legacy/sample_encode/src/sample_encode.cpp
index 6ff1b0a..8eb98e6 100644
--- a/tools/legacy/sample_encode/src/sample_encode.cpp
+++ b/tools/legacy/sample_encode/src/sample_encode.cpp
@@ -93,7 +93,7 @@ void PrintHelp(char* strAppName, const char* strErrorMessage, ...) {
     MOD_ENC_PRINT_HELP;
 #endif
     printf(
-        "   [-nv12|nv16|yuy2|uyvy|ayuv|rgb4|p010|y210|y410|a2rgb10|p016|p210|y216|i010|i420] - input color format (by default YUV420 is expected).\n");
+        "   [-nv12|nv16|yuy2|uyvy|ayuv|rgb4|bgr4|p010|y210|y410|a2rgb10|p016|p210|y216|i010|i420] - input color format (by default YUV420 is expected).\n");
 #if (defined(_WIN64) || defined(_WIN32))
     printf(
         "   [-yuv400] -  input color format is YUV400 (grayscale) and will be converted to NV12 for encoding (JPEG only).\n");
@@ -101,7 +101,7 @@ void PrintHelp(char* strAppName, const char* strErrorMessage, ...) {
     printf(
         "   [-msb10] - 10-bit color format is expected to have data in Most Significant Bits of words.\n                 (LSB data placement is expected by default).\n                 This option also disables data shifting during file reading.\n");
     printf(
-        "   [-ec::p010|yuy2|nv12|nv16|rgb4|ayuv|uyvy|y210|y410|p016|y216|i010|i420] - force output color format for encoder (conversion will be made if necessary). Default value: input color format\n");
+        "   [-ec::p010|yuy2|nv12|nv16|rgb4|bgr4|ayuv|uyvy|y210|y410|p016|y216|i010|i420] - force output color format for encoder (conversion will be made if necessary). Default value: input color format\n");
     printf(
         "   [-tff|bff] - input stream is interlaced, top|bottom fielf first, if not specified progressive is expected\n");
     printf("   [-bref] - arrange B frames in B pyramid reference structure\n");
@@ -541,6 +541,9 @@ mfxStatus ParseAdditionalParams(char* strInput[],
     else if (msdk_match(strInput[i], "-y216")) {
         pParams->FileInputFourCC = MFX_FOURCC_Y216;
     }
+    else if (msdk_match(strInput[i], "-bgr4")) {
+        pParams->FileInputFourCC = MFX_FOURCC_BGR4;
+    }
     else if (msdk_match(strInput[i], "-ec::yuy2")) {
         pParams->EncodeFourCC = MFX_FOURCC_YUY2;
     }
@@ -550,6 +553,9 @@ mfxStatus ParseAdditionalParams(char* strInput[],
     else if (msdk_match(strInput[i], "-ec::rgb4")) {
         pParams->EncodeFourCC = MFX_FOURCC_RGB4;
     }
+    else if (msdk_match(strInput[i], "-ec::bgr4")) {
+        pParams->EncodeFourCC = MFX_FOURCC_BGR4;
+    }
     else if (msdk_match(strInput[i], "-ec::ayuv")) {
         pParams->EncodeFourCC = MFX_FOURCC_AYUV;
     }
@@ -1599,6 +1605,11 @@ mfxStatus ParseInputString(char* strInput[], mfxU32 nArgNum, sInputParams* pPara
         return MFX_ERR_UNSUPPORTED;
     }
 
+    if (MFX_CODEC_JPEG != pParams->CodecId && pParams->EncodeFourCC == MFX_FOURCC_BGR4) {
+        PrintHelp(strInput[0], "-ec::bgr4 option is supported only for JPEG encoder");
+        return MFX_ERR_UNSUPPORTED;
+    }
+
     if (MFX_CODEC_HEVC != pParams->CodecId && MFX_CODEC_VP9 != pParams->CodecId &&
         MFX_CODEC_AV1 != pParams->CodecId && (pParams->EncodeFourCC == MFX_FOURCC_P010)) {
         PrintHelp(strInput[0], "P010 surfaces are supported only for HEVC, VP9 and AV1 encoder");
-- 
2.25.1

