From 43329b80837853624da8ea7a5aa9a56cce88709f Mon Sep 17 00:00:00 2001
From: "Soon, Thean Siew" <thean.siew.soon@intel.com>
Date: Fri, 26 Oct 2018 17:54:37 +0800
Subject: [PATCH] encoder: h265: Add support for low power/high performance
 encoding mode

Signed-off-by: Soon, Thean Siew <thean.siew.soon@intel.com>
---
 gst-libs/gst/vaapi/gstvaapiencoder_h265.c | 20 +++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/gst-libs/gst/vaapi/gstvaapiencoder_h265.c b/gst-libs/gst/vaapi/gstvaapiencoder_h265.c
index 1348e64b..8908e434 100644
--- a/gst-libs/gst/vaapi/gstvaapiencoder_h265.c
+++ b/gst-libs/gst/vaapi/gstvaapiencoder_h265.c
@@ -44,7 +44,8 @@
 
 /* Supported set of tuning options, within this implementation */
 #define SUPPORTED_TUNE_OPTIONS                          \
-  (GST_VAAPI_ENCODER_TUNE_MASK (NONE))
+  (GST_VAAPI_ENCODER_TUNE_MASK (NONE) |                 \
+   GST_VAAPI_ENCODER_TUNE_MASK (LOW_POWER))
 
 /* Supported set of VA packed headers, within this implementation */
 #define SUPPORTED_PACKED_HEADERS                \
@@ -92,6 +93,7 @@ struct _GstVaapiEncoderH265
   GstVaapiProfile profile;
   GstVaapiTierH265 tier;
   GstVaapiLevelH265 level;
+  GstVaapiEntrypoint entrypoint;
   guint8 profile_idc;
   guint8 max_profile_idc;
   guint8 hw_max_profile_idc;
@@ -916,7 +918,7 @@ static gboolean
 ensure_hw_profile (GstVaapiEncoderH265 * encoder)
 {
   GstVaapiDisplay *const display = GST_VAAPI_ENCODER_DISPLAY (encoder);
-  GstVaapiEntrypoint entrypoint = GST_VAAPI_ENTRYPOINT_SLICE_ENCODE;
+  GstVaapiEntrypoint entrypoint = encoder->entrypoint;
   GstVaapiProfile profile, profiles[4];
   guint i, num_profiles = 0;
 
@@ -1068,6 +1070,10 @@ ensure_tuning (GstVaapiEncoderH265 * encoder)
     case GST_VAAPI_ENCODER_TUNE_HIGH_COMPRESSION:
       success = ensure_tuning_high_compression (encoder);
       break;
+    case GST_VAAPI_ENCODER_TUNE_LOW_POWER:
+      encoder->entrypoint = GST_VAAPI_ENTRYPOINT_SLICE_ENCODE_LP;
+      success = TRUE;
+      break;
     default:
       success = TRUE;
       break;
@@ -2044,11 +2050,10 @@ reset_properties (GstVaapiEncoderH265 * encoder)
 
   ctu_size = encoder->ctu_width * encoder->ctu_height;
   g_assert (gst_vaapi_encoder_ensure_num_slices (base_encoder, encoder->profile,
-          GST_VAAPI_ENTRYPOINT_SLICE_ENCODE, (ctu_size + 1) / 2,
-          &encoder->num_slices));
+	  encoder->entrypoint, (ctu_size + 1) / 2, &encoder->num_slices));
 
   gst_vaapi_encoder_ensure_max_num_ref_frames (base_encoder, encoder->profile,
-      GST_VAAPI_ENTRYPOINT_SLICE_ENCODE);
+      encoder->entrypoint);
 
   if (base_encoder->max_num_ref_frames_1 < 1 && encoder->num_bframes > 0) {
     GST_WARNING ("Disabling b-frame since the driver doesn't support it");
@@ -2453,6 +2458,8 @@ set_context_info (GstVaapiEncoder * base_encoder)
   base_encoder->codedbuf_size += GST_ROUND_UP_16 (vip->width) *
       GST_ROUND_UP_16 (vip->height) * 3 / 2;
 
+  base_encoder->context_info.entrypoint = encoder->entrypoint;
+
   return GST_VAAPI_ENCODER_STATUS_SUCCESS;
 }
 
@@ -2508,6 +2515,9 @@ gst_vaapi_encoder_h265_init (GstVaapiEncoder * base_encoder)
   GstVaapiH265ReorderPool *reorder_pool;
   GstVaapiH265RefPool *ref_pool;
 
+  /* Default encoding entrypoint */
+  encoder->entrypoint = GST_VAAPI_ENTRYPOINT_SLICE_ENCODE;
+
   encoder->conformance_window_flag = 0;
   encoder->num_slices = 1;
 
-- 
2.19.0

