From 76afffef5cc6a07bf059804f80aa6fcf22ebd6f9 Mon Sep 17 00:00:00 2001
From: Mengkejiergeli Ba <mengkejiergeli.ba@intel.com>
Date: Tue, 14 Feb 2023 14:32:56 +0800
Subject: [PATCH 3/8] vaapi: Fix some code defects

Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/3954>
---
 gst-libs/gst/vaapi/gstvaapidecoder_h265.c |  3 +--
 gst-libs/gst/vaapi/gstvaapiencoder_h264.c |  2 +-
 tests/check/elements/vaapioverlay.c       | 16 ++++++++++++----
 tests/internal/simple-encoder.c           |  6 +++++-
 4 files changed, 19 insertions(+), 8 deletions(-)

diff --git a/gst-libs/gst/vaapi/gstvaapidecoder_h265.c b/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
index afd4f79f..20d092fe 100644
--- a/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
+++ b/gst-libs/gst/vaapi/gstvaapidecoder_h265.c
@@ -499,8 +499,7 @@ nal_is_rasl (guint8 nal_type)
 static gboolean
 nal_is_slice (guint8 nal_type)
 {
-  if ((nal_type >= GST_H265_NAL_SLICE_TRAIL_N) &&
-      (nal_type <= GST_H265_NAL_SLICE_CRA_NUT))
+  if ((nal_type <= GST_H265_NAL_SLICE_CRA_NUT))
     return TRUE;
   return FALSE;
 }
diff --git a/gst-libs/gst/vaapi/gstvaapiencoder_h264.c b/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
index dc005e56..8469ac60 100644
--- a/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
+++ b/gst-libs/gst/vaapi/gstvaapiencoder_h264.c
@@ -3017,11 +3017,11 @@ gst_vaapi_encoder_h264_get_pending_reordered (GstVaapiEncoder * base_encoder,
     iter->pic_type = GST_VAAPI_PICTURE_TYPE_B;
   } else if (iter->pic_type == GST_VAAPI_PICTURE_TYPE_B) {
     pic = g_queue_pop_head (&reorder_pool->reorder_frame_list);
-    g_assert (pic);
   } else {
     GST_WARNING ("Unhandled pending picture type");
   }
 
+  g_assert (pic);
   set_frame_num (encoder, pic);
 
   if (GST_CLOCK_TIME_IS_VALID (pic->frame->pts))
diff --git a/tests/check/elements/vaapioverlay.c b/tests/check/elements/vaapioverlay.c
index 8cc87dc4..5b084475 100644
--- a/tests/check/elements/vaapioverlay.c
+++ b/tests/check/elements/vaapioverlay.c
@@ -152,11 +152,16 @@ GST_START_TEST (test_overlay_position)
   fail_unless (handoff_buffer != NULL);
   pad = gst_element_get_static_pad (sink, "sink");
   caps = gst_pad_get_current_caps (pad);
-  gst_video_info_from_caps (&vinfo, caps);
-  gst_caps_unref (caps);
-  gst_object_unref (pad);
+  if (!gst_video_info_from_caps (&vinfo, caps)) {
+    GST_ERROR ("Failed to parse the caps");
+    goto end;
+  }
+
+  if (!gst_video_frame_map (&frame, &vinfo, handoff_buffer, GST_MAP_READ)) {
+    GST_ERROR ("Failed to map the frame");
+    goto end;
+  }
 
-  gst_video_frame_map (&frame, &vinfo, handoff_buffer, GST_MAP_READ);
   {
     guint i, j, n_planes, plane;
     n_planes = GST_VIDEO_FRAME_N_PLANES (&frame);
@@ -193,7 +198,10 @@ GST_START_TEST (test_overlay_position)
   }
   gst_video_frame_unmap (&frame);
 
+end:
   /* cleanup */
+  gst_caps_unref (caps);
+  gst_object_unref (pad);
   gst_buffer_replace (&handoff_buffer, NULL);
   gst_element_set_state (bin, GST_STATE_NULL);
   g_main_loop_unref (main_loop);
diff --git a/tests/internal/simple-encoder.c b/tests/internal/simple-encoder.c
index 6953eef1..b51b92e5 100644
--- a/tests/internal/simple-encoder.c
+++ b/tests/internal/simple-encoder.c
@@ -298,7 +298,11 @@ app_free (App * app)
     y4m_reader_close (app->parser);
 
   if (app->encoder) {
-    gst_vaapi_encoder_flush (app->encoder);
+    if ((gst_vaapi_encoder_flush (app->encoder)) !=
+        GST_VAAPI_ENCODER_STATUS_SUCCESS)
+      GST_WARNING_OBJECT (app->encoder,
+          "Failed to flush pending encoded frames");
+
     gst_object_unref (app->encoder);
   }
 
-- 
2.40.1

