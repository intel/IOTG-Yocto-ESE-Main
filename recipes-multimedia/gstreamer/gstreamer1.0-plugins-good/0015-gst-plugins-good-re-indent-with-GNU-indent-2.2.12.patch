From 35363cb8698df47e6165ea2f42724e9950f9e850 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim-Philipp=20M=C3=BCller?= <tim@centricular.com>
Date: Wed, 15 Mar 2023 18:52:48 +0000
Subject: [PATCH 15/16] gst-plugins-good: re-indent with GNU indent 2.2.12

Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/4182>
---
 ext/flac/gstflacdec.c              |   6 +-
 ext/gtk/gstgtkbasesink.c           |   4 +-
 ext/jpeg/gstjpegdec.c              |   6 +-
 ext/pulse/pulsesink.c              |   2 +-
 ext/pulse/pulsesrc.c               |   2 +-
 ext/pulse/pulseutil.c              |  56 ++++++-----
 ext/wavpack/gstwavpackcommon.c     |  36 +++----
 gst/alpha/gstalpha.c               |   2 +-
 gst/apetag/gstapedemux.c           |  42 ++++----
 gst/audiofx/audioamplify.c         |  78 ++++++++-------
 gst/audiofx/gstscaletempo.c        |   2 +-
 gst/audioparsers/gstac3parse.c     | 152 ++++++++++++++---------------
 gst/audioparsers/gstwavpackparse.c |  36 +++----
 gst/avi/gstavidemux.c              |  12 +--
 gst/avi/gstavimux.c                |  22 ++---
 gst/deinterlace/gstdeinterlace.c   |  28 +++---
 gst/flv/gstflvdemux.c              |  10 +-
 gst/goom/mmx.c                     |   1 -
 gst/imagefreeze/gstimagefreeze.c   |   2 +-
 gst/isomp4/qtdemux.c               |  16 +--
 gst/isomp4/qtdemux_tags.c          | 131 +++++++++++++------------
 gst/matroska/matroska-demux.c      |  12 +--
 gst/matroska/matroska-mux.c        |  30 +++---
 gst/rtp/dboolhuff.c                |  35 +++----
 gst/rtp/gstrtph263depay.c          |   2 +-
 gst/rtp/gstrtpmparobustdepay.c     |   4 +-
 gst/rtp/gstrtpsv3vdepay.c          |  14 +--
 gst/rtsp/gstrtspsrc.c              |   2 +-
 gst/videofilter/gstvideotemplate.c |   1 -
 gst/wavenc/gstwavenc.c             |  26 ++---
 sys/oss4/oss4-sink.c               |   2 +-
 sys/v4l2/gstv4l2object.c           |   7 +-
 sys/v4l2/gstv4l2transform.c        |   3 +-
 sys/v4l2/v4l2_calls.c              |   8 +-
 tests/check/elements/dtmf.c        |   2 +-
 tests/check/elements/rtpvp8.c      |  52 +++++-----
 tests/check/elements/rtpvp9.c      |  50 +++++-----
 tests/check/elements/videocrop.c   |  32 +++---
 tests/check/elements/videofilter.c |   7 +-
 tests/check/elements/vp8enc.c      |  36 +++----
 40 files changed, 491 insertions(+), 480 deletions(-)

diff --git a/ext/flac/gstflacdec.c b/ext/flac/gstflacdec.c
index 49cb1480..5a9910f2 100644
--- a/ext/flac/gstflacdec.c
+++ b/ext/flac/gstflacdec.c
@@ -96,7 +96,7 @@ GST_DEBUG_CATEGORY_STATIC (flacdec_debug);
 
 static FLAC__StreamDecoderReadStatus
 gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
-    FLAC__byte buffer[], size_t * bytes, void *client_data);
+    FLAC__byte buffer[], size_t *bytes, void *client_data);
 static FLAC__StreamDecoderWriteStatus
 gst_flac_dec_write_stream (const FLAC__StreamDecoder * decoder,
     const FLAC__Frame * frame,
@@ -387,7 +387,7 @@ gst_flac_dec_scan_got_frame (GstFlacDec * flacdec, const guint8 * data,
   if (data[0] != 0xFF || (data[1] & 0xFC) != 0xF8)
     return FALSE;
 
-  vbs = ! !(data[1] & 1);       /* variable blocksize */
+  vbs = !!(data[1] & 1);        /* variable blocksize */
   bs = (data[2] & 0xF0) >> 4;   /* blocksize marker   */
   sr = (data[2] & 0x0F);        /* samplerate marker  */
   ca = (data[3] & 0xF0) >> 4;   /* channel assignment */
@@ -567,7 +567,7 @@ gst_flac_dec_error_cb (const FLAC__StreamDecoder * d,
 
 static FLAC__StreamDecoderReadStatus
 gst_flac_dec_read_stream (const FLAC__StreamDecoder * decoder,
-    FLAC__byte buffer[], size_t * bytes, void *client_data)
+    FLAC__byte buffer[], size_t *bytes, void *client_data)
 {
   GstFlacDec *dec = GST_FLAC_DEC (client_data);
   guint len;
diff --git a/ext/gtk/gstgtkbasesink.c b/ext/gtk/gstgtkbasesink.c
index 243522dd..3526171c 100644
--- a/ext/gtk/gstgtkbasesink.c
+++ b/ext/gtk/gstgtkbasesink.c
@@ -405,7 +405,7 @@ gst_gtk_base_sink_start_on_main (GstBaseSink * bsink)
 static gboolean
 gst_gtk_base_sink_start (GstBaseSink * bsink)
 {
-  return ! !gst_gtk_invoke_on_main ((GThreadFunc)
+  return !!gst_gtk_invoke_on_main ((GThreadFunc)
       gst_gtk_base_sink_start_on_main, bsink);
 }
 
@@ -429,7 +429,7 @@ gst_gtk_base_sink_stop (GstBaseSink * bsink)
   GstGtkBaseSink *gst_sink = GST_GTK_BASE_SINK (bsink);
 
   if (gst_sink->window)
-    return ! !gst_gtk_invoke_on_main ((GThreadFunc)
+    return !!gst_gtk_invoke_on_main ((GThreadFunc)
         gst_gtk_base_sink_stop_on_main, bsink);
 
   return TRUE;
diff --git a/ext/jpeg/gstjpegdec.c b/ext/jpeg/gstjpegdec.c
index 34d2eba3..a290e952 100644
--- a/ext/jpeg/gstjpegdec.c
+++ b/ext/jpeg/gstjpegdec.c
@@ -234,20 +234,20 @@ gst_jpeg_dec_term_source (j_decompress_ptr cinfo)
 }
 
 METHODDEF (void)
-    gst_jpeg_dec_my_output_message (j_common_ptr cinfo)
+gst_jpeg_dec_my_output_message (j_common_ptr cinfo)
 {
   return;                       /* do nothing */
 }
 
 METHODDEF (void)
-    gst_jpeg_dec_my_emit_message (j_common_ptr cinfo, int msg_level)
+gst_jpeg_dec_my_emit_message (j_common_ptr cinfo, int msg_level)
 {
   /* GST_LOG_OBJECT (CINFO_GET_JPEGDEC (&cinfo), "msg_level=%d", msg_level); */
   return;
 }
 
 METHODDEF (void)
-    gst_jpeg_dec_my_error_exit (j_common_ptr cinfo)
+gst_jpeg_dec_my_error_exit (j_common_ptr cinfo)
 {
   struct GstJpegDecErrorMgr *err_mgr = (struct GstJpegDecErrorMgr *) cinfo->err;
 
diff --git a/ext/pulse/pulsesink.c b/ext/pulse/pulsesink.c
index e965e1b0..33fbfc06 100644
--- a/ext/pulse/pulsesink.c
+++ b/ext/pulse/pulsesink.c
@@ -1567,7 +1567,7 @@ gst_pulseringbuffer_commit (GstAudioRingBuffer * buf, guint64 * sample,
           goto fake_done;
         }
 
-        if (pbuf->m_writable == (size_t) - 1)
+        if (pbuf->m_writable == (size_t) -1)
           goto writable_size_failed;
 
         pbuf->m_writable /= bpf;
diff --git a/ext/pulse/pulsesrc.c b/ext/pulse/pulsesrc.c
index a337a59f..41252bdf 100644
--- a/ext/pulse/pulsesrc.c
+++ b/ext/pulse/pulsesrc.c
@@ -1638,7 +1638,7 @@ gst_pulsesrc_success_cb (pa_stream * s, int success, void *userdata)
 {
   GstPulseSrc *pulsesrc = GST_PULSESRC_CAST (userdata);
 
-  pulsesrc->operation_success = ! !success;
+  pulsesrc->operation_success = !!success;
   pa_threaded_mainloop_signal (pulsesrc->mainloop, 0);
 }
 
diff --git a/ext/pulse/pulseutil.c b/ext/pulse/pulseutil.c
index aa90ce97..69fae00c 100644
--- a/ext/pulse/pulseutil.c
+++ b/ext/pulse/pulseutil.c
@@ -40,33 +40,35 @@ static const struct
   pa_channel_position_t pa_pos;
 } gst_pa_pos_table[] = {
   {
-  GST_AUDIO_CHANNEL_POSITION_MONO, PA_CHANNEL_POSITION_MONO}, {
-  GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT, PA_CHANNEL_POSITION_FRONT_LEFT}, {
-  GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT, PA_CHANNEL_POSITION_FRONT_RIGHT}, {
-  GST_AUDIO_CHANNEL_POSITION_REAR_CENTER, PA_CHANNEL_POSITION_REAR_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_REAR_LEFT, PA_CHANNEL_POSITION_REAR_LEFT}, {
-  GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT, PA_CHANNEL_POSITION_REAR_RIGHT}, {
-  GST_AUDIO_CHANNEL_POSITION_LFE1, PA_CHANNEL_POSITION_LFE}, {
-  GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER, PA_CHANNEL_POSITION_FRONT_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,
-        PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,
-        PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT, PA_CHANNEL_POSITION_SIDE_LEFT}, {
-  GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT, PA_CHANNEL_POSITION_SIDE_RIGHT}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_CENTER, PA_CHANNEL_POSITION_TOP_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT,
-        PA_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT,
-        PA_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER,
-        PA_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT, PA_CHANNEL_POSITION_TOP_REAR_LEFT}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT,
-        PA_CHANNEL_POSITION_TOP_REAR_RIGHT}, {
-  GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER,
-        PA_CHANNEL_POSITION_TOP_REAR_CENTER}, {
-  GST_AUDIO_CHANNEL_POSITION_NONE, PA_CHANNEL_POSITION_INVALID}
+      GST_AUDIO_CHANNEL_POSITION_MONO, PA_CHANNEL_POSITION_MONO}, {
+      GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT, PA_CHANNEL_POSITION_FRONT_LEFT}, {
+      GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT, PA_CHANNEL_POSITION_FRONT_RIGHT}, {
+      GST_AUDIO_CHANNEL_POSITION_REAR_CENTER, PA_CHANNEL_POSITION_REAR_CENTER}, {
+      GST_AUDIO_CHANNEL_POSITION_REAR_LEFT, PA_CHANNEL_POSITION_REAR_LEFT}, {
+      GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT, PA_CHANNEL_POSITION_REAR_RIGHT}, {
+      GST_AUDIO_CHANNEL_POSITION_LFE1, PA_CHANNEL_POSITION_LFE}, {
+        GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER,
+      PA_CHANNEL_POSITION_FRONT_CENTER}, {
+        GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,
+      PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
+        GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,
+      PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
+      GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT, PA_CHANNEL_POSITION_SIDE_LEFT}, {
+      GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT, PA_CHANNEL_POSITION_SIDE_RIGHT}, {
+      GST_AUDIO_CHANNEL_POSITION_TOP_CENTER, PA_CHANNEL_POSITION_TOP_CENTER}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT,
+      PA_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT,
+      PA_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER,
+      PA_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT,
+      PA_CHANNEL_POSITION_TOP_REAR_LEFT}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT,
+      PA_CHANNEL_POSITION_TOP_REAR_RIGHT}, {
+        GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER,
+      PA_CHANNEL_POSITION_TOP_REAR_CENTER}, {
+      GST_AUDIO_CHANNEL_POSITION_NONE, PA_CHANNEL_POSITION_INVALID}
 };
 
 static gboolean
diff --git a/ext/wavpack/gstwavpackcommon.c b/ext/wavpack/gstwavpackcommon.c
index a17c9b26..35a2aabf 100644
--- a/ext/wavpack/gstwavpackcommon.c
+++ b/ext/wavpack/gstwavpackcommon.c
@@ -139,24 +139,24 @@ static const struct
   const GstAudioChannelPosition gst_pos;
 } layout_mapping[] = {
   {
-  0x00001, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT}, {
-  0x00002, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT}, {
-  0x00004, GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER}, {
-  0x00008, GST_AUDIO_CHANNEL_POSITION_LFE1}, {
-  0x00010, GST_AUDIO_CHANNEL_POSITION_REAR_LEFT}, {
-  0x00020, GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT}, {
-  0x00040, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
-  0x00080, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
-  0x00100, GST_AUDIO_CHANNEL_POSITION_REAR_CENTER}, {
-  0x00200, GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT}, {
-  0x00400, GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT}, {
-  0x00800, GST_AUDIO_CHANNEL_POSITION_TOP_CENTER}, {
-  0x01000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
-  0x02000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
-  0x04000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
-  0x08000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT}, {
-  0x10000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER}, {
-  0x20000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT}
+      0x00001, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT}, {
+      0x00002, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT}, {
+      0x00004, GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER}, {
+      0x00008, GST_AUDIO_CHANNEL_POSITION_LFE1}, {
+      0x00010, GST_AUDIO_CHANNEL_POSITION_REAR_LEFT}, {
+      0x00020, GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT}, {
+      0x00040, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
+      0x00080, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
+      0x00100, GST_AUDIO_CHANNEL_POSITION_REAR_CENTER}, {
+      0x00200, GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT}, {
+      0x00400, GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT}, {
+      0x00800, GST_AUDIO_CHANNEL_POSITION_TOP_CENTER}, {
+      0x01000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
+      0x02000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
+      0x04000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
+      0x08000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT}, {
+      0x10000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER}, {
+      0x20000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT}
 };
 
 #define MAX_CHANNEL_POSITIONS G_N_ELEMENTS (layout_mapping)
diff --git a/gst/alpha/gstalpha.c b/gst/alpha/gstalpha.c
index bdd11ca0..74ba32ab 100644
--- a/gst/alpha/gstalpha.c
+++ b/gst/alpha/gstalpha.c
@@ -375,7 +375,7 @@ gst_alpha_set_property (GObject * object, guint prop_id,
     case PROP_PREFER_PASSTHROUGH:{
       gboolean prefer_passthrough = g_value_get_boolean (value);
 
-      reconfigure = ((! !prefer_passthrough) != (! !alpha->prefer_passthrough))
+      reconfigure = ((!!prefer_passthrough) != (!!alpha->prefer_passthrough))
           && (alpha->method == ALPHA_METHOD_SET) && (alpha->alpha == 1.0);
       alpha->prefer_passthrough = prefer_passthrough;
       break;
diff --git a/gst/apetag/gstapedemux.c b/gst/apetag/gstapedemux.c
index a357f84a..edd2aad0 100644
--- a/gst/apetag/gstapedemux.c
+++ b/gst/apetag/gstapedemux.c
@@ -118,27 +118,27 @@ static const struct _GstApeDemuxTagTableEntry
   const gchar *gst_tag;
 } tag_table[] = {
   {
-  "replaygain_track_gain", GST_TAG_TRACK_GAIN}, {
-  "replaygain_track_peak", GST_TAG_TRACK_PEAK}, {
-  "replaygain_album_gain", GST_TAG_ALBUM_GAIN}, {
-  "replaygain_album_peak", GST_TAG_ALBUM_PEAK}, {
-  "title", GST_TAG_TITLE}, {
-  "artist", GST_TAG_ARTIST}, {
-  "album", GST_TAG_ALBUM}, {
-  "composer", GST_TAG_COMPOSER}, {
-  "comment", GST_TAG_COMMENT}, {
-  "comments", GST_TAG_COMMENT}, {
-  "copyright", GST_TAG_COPYRIGHT}, {
-  "genre", GST_TAG_GENRE}, {
-  "isrc", GST_TAG_ISRC}, {
-  "disc", GST_TAG_ALBUM_VOLUME_NUMBER}, {
-  "disk", GST_TAG_ALBUM_VOLUME_NUMBER}, {
-  "discnumber", GST_TAG_ALBUM_VOLUME_NUMBER}, {
-  "disknumber", GST_TAG_ALBUM_VOLUME_NUMBER}, {
-  "track", GST_TAG_TRACK_NUMBER}, {
-  "tracknumber", GST_TAG_TRACK_NUMBER}, {
-  "year", GST_TAG_DATE}, {
-  "file", GST_TAG_LOCATION}
+      "replaygain_track_gain", GST_TAG_TRACK_GAIN}, {
+      "replaygain_track_peak", GST_TAG_TRACK_PEAK}, {
+      "replaygain_album_gain", GST_TAG_ALBUM_GAIN}, {
+      "replaygain_album_peak", GST_TAG_ALBUM_PEAK}, {
+      "title", GST_TAG_TITLE}, {
+      "artist", GST_TAG_ARTIST}, {
+      "album", GST_TAG_ALBUM}, {
+      "composer", GST_TAG_COMPOSER}, {
+      "comment", GST_TAG_COMMENT}, {
+      "comments", GST_TAG_COMMENT}, {
+      "copyright", GST_TAG_COPYRIGHT}, {
+      "genre", GST_TAG_GENRE}, {
+      "isrc", GST_TAG_ISRC}, {
+      "disc", GST_TAG_ALBUM_VOLUME_NUMBER}, {
+      "disk", GST_TAG_ALBUM_VOLUME_NUMBER}, {
+      "discnumber", GST_TAG_ALBUM_VOLUME_NUMBER}, {
+      "disknumber", GST_TAG_ALBUM_VOLUME_NUMBER}, {
+      "track", GST_TAG_TRACK_NUMBER}, {
+      "tracknumber", GST_TAG_TRACK_NUMBER}, {
+      "year", GST_TAG_DATE}, {
+      "file", GST_TAG_LOCATION}
 };
 
 static gboolean
diff --git a/gst/audiofx/audioamplify.c b/gst/audiofx/audioamplify.c
index 8228ebdb..3507d281 100644
--- a/gst/audiofx/audioamplify.c
+++ b/gst/audiofx/audioamplify.c
@@ -329,43 +329,47 @@ gst_audio_amplify_process_function (gint clipping, GstAudioFormat format)
     GstAudioAmplifyProcessFunc func;
   } process[] = {
     {
-    GST_AUDIO_FORMAT_F32, METHOD_CLIP, gst_audio_amplify_transform_gfloat_clip}, {
-    GST_AUDIO_FORMAT_F32, METHOD_WRAP_NEGATIVE,
-          gst_audio_amplify_transform_gfloat_wrap_negative}, {
-    GST_AUDIO_FORMAT_F32, METHOD_WRAP_POSITIVE,
-          gst_audio_amplify_transform_gfloat_wrap_positive}, {
-    GST_AUDIO_FORMAT_F32, METHOD_NOCLIP,
-          gst_audio_amplify_transform_gfloat_noclip}, {
-    GST_AUDIO_FORMAT_F64, METHOD_CLIP,
-          gst_audio_amplify_transform_gdouble_clip}, {
-    GST_AUDIO_FORMAT_F64, METHOD_WRAP_NEGATIVE,
-          gst_audio_amplify_transform_gdouble_wrap_negative}, {
-    GST_AUDIO_FORMAT_F64, METHOD_WRAP_POSITIVE,
-          gst_audio_amplify_transform_gdouble_wrap_positive}, {
-    GST_AUDIO_FORMAT_F64, METHOD_NOCLIP,
-          gst_audio_amplify_transform_gdouble_noclip}, {
-    GST_AUDIO_FORMAT_S8, METHOD_CLIP, gst_audio_amplify_transform_gint8_clip}, {
-    GST_AUDIO_FORMAT_S8, METHOD_WRAP_NEGATIVE,
-          gst_audio_amplify_transform_gint8_wrap_negative}, {
-    GST_AUDIO_FORMAT_S8, METHOD_WRAP_POSITIVE,
-          gst_audio_amplify_transform_gint8_wrap_positive}, {
-    GST_AUDIO_FORMAT_S8, METHOD_NOCLIP,
-          gst_audio_amplify_transform_gint8_noclip}, {
-    GST_AUDIO_FORMAT_S16, METHOD_CLIP, gst_audio_amplify_transform_gint16_clip}, {
-    GST_AUDIO_FORMAT_S16, METHOD_WRAP_NEGATIVE,
-          gst_audio_amplify_transform_gint16_wrap_negative}, {
-    GST_AUDIO_FORMAT_S16, METHOD_WRAP_POSITIVE,
-          gst_audio_amplify_transform_gint16_wrap_positive}, {
-    GST_AUDIO_FORMAT_S16, METHOD_NOCLIP,
-          gst_audio_amplify_transform_gint16_noclip}, {
-    GST_AUDIO_FORMAT_S32, METHOD_CLIP, gst_audio_amplify_transform_gint32_clip}, {
-    GST_AUDIO_FORMAT_S32, METHOD_WRAP_NEGATIVE,
-          gst_audio_amplify_transform_gint32_wrap_negative}, {
-    GST_AUDIO_FORMAT_S32, METHOD_WRAP_POSITIVE,
-          gst_audio_amplify_transform_gint32_wrap_positive}, {
-    GST_AUDIO_FORMAT_S32, METHOD_NOCLIP,
-          gst_audio_amplify_transform_gint32_noclip}, {
-    0, 0, NULL}
+          GST_AUDIO_FORMAT_F32, METHOD_CLIP,
+        gst_audio_amplify_transform_gfloat_clip}, {
+          GST_AUDIO_FORMAT_F32, METHOD_WRAP_NEGATIVE,
+        gst_audio_amplify_transform_gfloat_wrap_negative}, {
+          GST_AUDIO_FORMAT_F32, METHOD_WRAP_POSITIVE,
+        gst_audio_amplify_transform_gfloat_wrap_positive}, {
+          GST_AUDIO_FORMAT_F32, METHOD_NOCLIP,
+        gst_audio_amplify_transform_gfloat_noclip}, {
+          GST_AUDIO_FORMAT_F64, METHOD_CLIP,
+        gst_audio_amplify_transform_gdouble_clip}, {
+          GST_AUDIO_FORMAT_F64, METHOD_WRAP_NEGATIVE,
+        gst_audio_amplify_transform_gdouble_wrap_negative}, {
+          GST_AUDIO_FORMAT_F64, METHOD_WRAP_POSITIVE,
+        gst_audio_amplify_transform_gdouble_wrap_positive}, {
+          GST_AUDIO_FORMAT_F64, METHOD_NOCLIP,
+        gst_audio_amplify_transform_gdouble_noclip}, {
+          GST_AUDIO_FORMAT_S8, METHOD_CLIP,
+        gst_audio_amplify_transform_gint8_clip}, {
+          GST_AUDIO_FORMAT_S8, METHOD_WRAP_NEGATIVE,
+        gst_audio_amplify_transform_gint8_wrap_negative}, {
+          GST_AUDIO_FORMAT_S8, METHOD_WRAP_POSITIVE,
+        gst_audio_amplify_transform_gint8_wrap_positive}, {
+          GST_AUDIO_FORMAT_S8, METHOD_NOCLIP,
+        gst_audio_amplify_transform_gint8_noclip}, {
+          GST_AUDIO_FORMAT_S16, METHOD_CLIP,
+        gst_audio_amplify_transform_gint16_clip}, {
+          GST_AUDIO_FORMAT_S16, METHOD_WRAP_NEGATIVE,
+        gst_audio_amplify_transform_gint16_wrap_negative}, {
+          GST_AUDIO_FORMAT_S16, METHOD_WRAP_POSITIVE,
+        gst_audio_amplify_transform_gint16_wrap_positive}, {
+          GST_AUDIO_FORMAT_S16, METHOD_NOCLIP,
+        gst_audio_amplify_transform_gint16_noclip}, {
+          GST_AUDIO_FORMAT_S32, METHOD_CLIP,
+        gst_audio_amplify_transform_gint32_clip}, {
+          GST_AUDIO_FORMAT_S32, METHOD_WRAP_NEGATIVE,
+        gst_audio_amplify_transform_gint32_wrap_negative}, {
+          GST_AUDIO_FORMAT_S32, METHOD_WRAP_POSITIVE,
+        gst_audio_amplify_transform_gint32_wrap_positive}, {
+          GST_AUDIO_FORMAT_S32, METHOD_NOCLIP,
+        gst_audio_amplify_transform_gint32_noclip}, {
+        0, 0, NULL}
   };
   const struct process *p;
 
diff --git a/gst/audiofx/gstscaletempo.c b/gst/audiofx/gstscaletempo.c
index 646181fc..4dfd40d0 100644
--- a/gst/audiofx/gstscaletempo.c
+++ b/gst/audiofx/gstscaletempo.c
@@ -602,7 +602,7 @@ gst_scaletempo_sink_event (GstBaseTransform * trans, GstEvent * event)
 
     if (segment.format != GST_FORMAT_TIME
         || scaletempo->scale != ABS (segment.rate)
-        || ! !scaletempo->reverse != ! !(segment.rate < 0.0)) {
+        || !!scaletempo->reverse != !!(segment.rate < 0.0)) {
       if (segment.format != GST_FORMAT_TIME || ABS (segment.rate - 1.0) < 1e-10) {
         scaletempo->scale = 1.0;
         gst_base_transform_set_passthrough (GST_BASE_TRANSFORM (scaletempo),
diff --git a/gst/audioparsers/gstac3parse.c b/gst/audioparsers/gstac3parse.c
index 64b3ca3c..44e75ff5 100644
--- a/gst/audioparsers/gstac3parse.c
+++ b/gst/audioparsers/gstac3parse.c
@@ -59,82 +59,82 @@ static const struct
   const guint frame_size[3];    /* frame size for 32kHz, 44kHz, and 48kHz */
 } frmsizcod_table[38] = {
   {
-    32, {
-  64, 69, 96}}, {
-    32, {
-  64, 70, 96}}, {
-    40, {
-  80, 87, 120}}, {
-    40, {
-  80, 88, 120}}, {
-    48, {
-  96, 104, 144}}, {
-    48, {
-  96, 105, 144}}, {
-    56, {
-  112, 121, 168}}, {
-    56, {
-  112, 122, 168}}, {
-    64, {
-  128, 139, 192}}, {
-    64, {
-  128, 140, 192}}, {
-    80, {
-  160, 174, 240}}, {
-    80, {
-  160, 175, 240}}, {
-    96, {
-  192, 208, 288}}, {
-    96, {
-  192, 209, 288}}, {
-    112, {
-  224, 243, 336}}, {
-    112, {
-  224, 244, 336}}, {
-    128, {
-  256, 278, 384}}, {
-    128, {
-  256, 279, 384}}, {
-    160, {
-  320, 348, 480}}, {
-    160, {
-  320, 349, 480}}, {
-    192, {
-  384, 417, 576}}, {
-    192, {
-  384, 418, 576}}, {
-    224, {
-  448, 487, 672}}, {
-    224, {
-  448, 488, 672}}, {
-    256, {
-  512, 557, 768}}, {
-    256, {
-  512, 558, 768}}, {
-    320, {
-  640, 696, 960}}, {
-    320, {
-  640, 697, 960}}, {
-    384, {
-  768, 835, 1152}}, {
-    384, {
-  768, 836, 1152}}, {
-    448, {
-  896, 975, 1344}}, {
-    448, {
-  896, 976, 1344}}, {
-    512, {
-  1024, 1114, 1536}}, {
-    512, {
-  1024, 1115, 1536}}, {
-    576, {
-  1152, 1253, 1728}}, {
-    576, {
-  1152, 1254, 1728}}, {
-    640, {
-  1280, 1393, 1920}}, {
-    640, {
-  1280, 1394, 1920}}
+        32, {
+          64, 69, 96}}, {
+        32, {
+          64, 70, 96}}, {
+        40, {
+          80, 87, 120}}, {
+        40, {
+          80, 88, 120}}, {
+        48, {
+          96, 104, 144}}, {
+        48, {
+          96, 105, 144}}, {
+        56, {
+          112, 121, 168}}, {
+        56, {
+          112, 122, 168}}, {
+        64, {
+          128, 139, 192}}, {
+        64, {
+          128, 140, 192}}, {
+        80, {
+          160, 174, 240}}, {
+        80, {
+          160, 175, 240}}, {
+        96, {
+          192, 208, 288}}, {
+        96, {
+          192, 209, 288}}, {
+        112, {
+          224, 243, 336}}, {
+        112, {
+          224, 244, 336}}, {
+        128, {
+          256, 278, 384}}, {
+        128, {
+          256, 279, 384}}, {
+        160, {
+          320, 348, 480}}, {
+        160, {
+          320, 349, 480}}, {
+        192, {
+          384, 417, 576}}, {
+        192, {
+          384, 418, 576}}, {
+        224, {
+          448, 487, 672}}, {
+        224, {
+          448, 488, 672}}, {
+        256, {
+          512, 557, 768}}, {
+        256, {
+          512, 558, 768}}, {
+        320, {
+          640, 696, 960}}, {
+        320, {
+          640, 697, 960}}, {
+        384, {
+          768, 835, 1152}}, {
+        384, {
+          768, 836, 1152}}, {
+        448, {
+          896, 975, 1344}}, {
+        448, {
+          896, 976, 1344}}, {
+        512, {
+          1024, 1114, 1536}}, {
+        512, {
+          1024, 1115, 1536}}, {
+        576, {
+          1152, 1253, 1728}}, {
+        576, {
+          1152, 1254, 1728}}, {
+        640, {
+          1280, 1393, 1920}}, {
+        640, {
+          1280, 1394, 1920}}
 };
 
 static const guint fscod_rates[4] = { 48000, 44100, 32000, 0 };
diff --git a/gst/audioparsers/gstwavpackparse.c b/gst/audioparsers/gstwavpackparse.c
index 16b9b4e5..0a59a76a 100644
--- a/gst/audioparsers/gstwavpackparse.c
+++ b/gst/audioparsers/gstwavpackparse.c
@@ -206,24 +206,24 @@ static const struct
   const GstAudioChannelPosition gst_pos;
 } layout_mapping[] = {
   {
-  0x00001, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT}, {
-  0x00002, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT}, {
-  0x00004, GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER}, {
-  0x00008, GST_AUDIO_CHANNEL_POSITION_LFE1}, {
-  0x00010, GST_AUDIO_CHANNEL_POSITION_REAR_LEFT}, {
-  0x00020, GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT}, {
-  0x00040, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
-  0x00080, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
-  0x00100, GST_AUDIO_CHANNEL_POSITION_REAR_CENTER}, {
-  0x00200, GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT}, {
-  0x00400, GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT}, {
-  0x00800, GST_AUDIO_CHANNEL_POSITION_TOP_CENTER}, {
-  0x01000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
-  0x02000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
-  0x04000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
-  0x08000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT}, {
-  0x10000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER}, {
-  0x20000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT}
+      0x00001, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT}, {
+      0x00002, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT}, {
+      0x00004, GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER}, {
+      0x00008, GST_AUDIO_CHANNEL_POSITION_LFE1}, {
+      0x00010, GST_AUDIO_CHANNEL_POSITION_REAR_LEFT}, {
+      0x00020, GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT}, {
+      0x00040, GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER}, {
+      0x00080, GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER}, {
+      0x00100, GST_AUDIO_CHANNEL_POSITION_REAR_CENTER}, {
+      0x00200, GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT}, {
+      0x00400, GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT}, {
+      0x00800, GST_AUDIO_CHANNEL_POSITION_TOP_CENTER}, {
+      0x01000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_LEFT}, {
+      0x02000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_CENTER}, {
+      0x04000, GST_AUDIO_CHANNEL_POSITION_TOP_FRONT_RIGHT}, {
+      0x08000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_LEFT}, {
+      0x10000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_CENTER}, {
+      0x20000, GST_AUDIO_CHANNEL_POSITION_TOP_REAR_RIGHT}
 };
 
 #define MAX_CHANNEL_POSITIONS G_N_ELEMENTS (layout_mapping)
diff --git a/gst/avi/gstavidemux.c b/gst/avi/gstavidemux.c
index 0d18a649..9c0495c2 100644
--- a/gst/avi/gstavidemux.c
+++ b/gst/avi/gstavidemux.c
@@ -4488,9 +4488,9 @@ gst_avi_demux_do_seek (GstAviDemux * avi, GstSegment * segment,
   gboolean next;
 
   seek_time = segment->position;
-  keyframe = ! !(flags & GST_SEEK_FLAG_KEY_UNIT);
-  before = ! !(flags & GST_SEEK_FLAG_SNAP_BEFORE);
-  after = ! !(flags & GST_SEEK_FLAG_SNAP_AFTER);
+  keyframe = !!(flags & GST_SEEK_FLAG_KEY_UNIT);
+  before = !!(flags & GST_SEEK_FLAG_SNAP_BEFORE);
+  after = !!(flags & GST_SEEK_FLAG_SNAP_AFTER);
 
   GST_DEBUG_OBJECT (avi, "seek to: %" GST_TIME_FORMAT
       " keyframe seeking:%d, %s", GST_TIME_ARGS (seek_time), keyframe,
@@ -4763,10 +4763,10 @@ avi_demux_handle_seek_push (GstAviDemux * avi, GstPad * pad, GstEvent * event)
   gst_segment_do_seek (&seeksegment, rate, format, flags,
       cur_type, cur, stop_type, stop, &update);
 
-  keyframe = ! !(flags & GST_SEEK_FLAG_KEY_UNIT);
+  keyframe = !!(flags & GST_SEEK_FLAG_KEY_UNIT);
   cur = seeksegment.position;
-  before = ! !(flags & GST_SEEK_FLAG_SNAP_BEFORE);
-  after = ! !(flags & GST_SEEK_FLAG_SNAP_AFTER);
+  before = !!(flags & GST_SEEK_FLAG_SNAP_BEFORE);
+  after = !!(flags & GST_SEEK_FLAG_SNAP_AFTER);
 
   GST_DEBUG_OBJECT (avi,
       "Seek requested: ts %" GST_TIME_FORMAT " stop %" GST_TIME_FORMAT
diff --git a/gst/avi/gstavimux.c b/gst/avi/gstavimux.c
index 5a14e9f8..19f20560 100644
--- a/gst/avi/gstavimux.c
+++ b/gst/avi/gstavimux.c
@@ -1227,17 +1227,17 @@ gst_avi_mux_write_tag (const GstTagList * list, const gchar * tag,
     const gchar *tag;
   } rifftags[] = {
     {
-    GST_RIFF_INFO_IARL, GST_TAG_LOCATION}, {
-    GST_RIFF_INFO_IART, GST_TAG_ARTIST}, {
-    GST_RIFF_INFO_ICMT, GST_TAG_COMMENT}, {
-    GST_RIFF_INFO_ICOP, GST_TAG_COPYRIGHT}, {
-    GST_RIFF_INFO_ICRD, GST_TAG_DATE}, {
-    GST_RIFF_INFO_IGNR, GST_TAG_GENRE}, {
-    GST_RIFF_INFO_IKEY, GST_TAG_KEYWORDS}, {
-    GST_RIFF_INFO_INAM, GST_TAG_TITLE}, {
-    GST_RIFF_INFO_ISFT, GST_TAG_ENCODER}, {
-    GST_RIFF_INFO_ISRC, GST_TAG_ISRC}, {
-    0, NULL}
+        GST_RIFF_INFO_IARL, GST_TAG_LOCATION}, {
+        GST_RIFF_INFO_IART, GST_TAG_ARTIST}, {
+        GST_RIFF_INFO_ICMT, GST_TAG_COMMENT}, {
+        GST_RIFF_INFO_ICOP, GST_TAG_COPYRIGHT}, {
+        GST_RIFF_INFO_ICRD, GST_TAG_DATE}, {
+        GST_RIFF_INFO_IGNR, GST_TAG_GENRE}, {
+        GST_RIFF_INFO_IKEY, GST_TAG_KEYWORDS}, {
+        GST_RIFF_INFO_INAM, GST_TAG_TITLE}, {
+        GST_RIFF_INFO_ISFT, GST_TAG_ENCODER}, {
+        GST_RIFF_INFO_ISRC, GST_TAG_ISRC}, {
+        0, NULL}
   };
   gint n;
   gchar *str = NULL;
diff --git a/gst/deinterlace/gstdeinterlace.c b/gst/deinterlace/gstdeinterlace.c
index 6c209c08..86ee201b 100644
--- a/gst/deinterlace/gstdeinterlace.c
+++ b/gst/deinterlace/gstdeinterlace.c
@@ -375,17 +375,17 @@ static const struct
   GType (*get_type) (void);
 } _method_types[] = {
   {
-  gst_deinterlace_method_tomsmocomp_get_type}, {
-  gst_deinterlace_method_greedy_h_get_type}, {
-  gst_deinterlace_method_greedy_l_get_type}, {
-  gst_deinterlace_method_vfir_get_type}, {
-  gst_deinterlace_method_linear_get_type}, {
-  gst_deinterlace_method_linear_blend_get_type}, {
-  gst_deinterlace_method_scaler_bob_get_type}, {
-  gst_deinterlace_method_weave_get_type}, {
-  gst_deinterlace_method_weave_tff_get_type}, {
-  gst_deinterlace_method_weave_bff_get_type}, {
-  gst_deinterlace_method_yadif_get_type}
+      gst_deinterlace_method_tomsmocomp_get_type}, {
+      gst_deinterlace_method_greedy_h_get_type}, {
+      gst_deinterlace_method_greedy_l_get_type}, {
+      gst_deinterlace_method_vfir_get_type}, {
+      gst_deinterlace_method_linear_get_type}, {
+      gst_deinterlace_method_linear_blend_get_type}, {
+      gst_deinterlace_method_scaler_bob_get_type}, {
+      gst_deinterlace_method_weave_get_type}, {
+      gst_deinterlace_method_weave_tff_get_type}, {
+      gst_deinterlace_method_weave_bff_get_type}, {
+      gst_deinterlace_method_yadif_get_type}
 };
 
 static void
@@ -2377,8 +2377,10 @@ gst_deinterlace_caps_double_framerate (GstCaps * caps, gboolean half)
     } else if (G_VALUE_TYPE (val) == GST_TYPE_FRACTION_RANGE) {
       const GValue *min, *max;
       GValue nrange = { 0, }, nmin = {
-      0,}, nmax = {
-      0,};
+        0,
+      }, nmax = {
+        0,
+      };
       gint n, d;
 
       g_value_init (&nrange, GST_TYPE_FRACTION_RANGE);
diff --git a/gst/flv/gstflvdemux.c b/gst/flv/gstflvdemux.c
index 7381ff5c..c4df091f 100644
--- a/gst/flv/gstflvdemux.c
+++ b/gst/flv/gstflvdemux.c
@@ -152,11 +152,11 @@ gst_flv_demux_parse_and_add_index_entry (GstFlvDemux * demux, GstClockTime ts,
     gboolean key;
 
     gst_index_entry_assoc_map (entry, GST_FORMAT_TIME, &time);
-    key = ! !(GST_INDEX_ASSOC_FLAGS (entry) & GST_ASSOCIATION_FLAG_KEY_UNIT);
+    key = !!(GST_INDEX_ASSOC_FLAGS (entry) & GST_ASSOCIATION_FLAG_KEY_UNIT);
     GST_LOG_OBJECT (demux, "position already mapped to time %" GST_TIME_FORMAT
         ", keyframe %d", GST_TIME_ARGS (time), key);
     /* there is not really a way to delete the existing one */
-    if (time != ts || key != ! !keyframe)
+    if (time != ts || key != !!keyframe)
       GST_DEBUG_OBJECT (demux, "metadata mismatch");
 #endif
     gst_object_unref (index);
@@ -1913,7 +1913,7 @@ beach:
 
 static GstClockTime
 gst_flv_demux_parse_tag_timestamp (GstFlvDemux * demux, gboolean index,
-    GstBuffer * buffer, size_t * tag_size)
+    GstBuffer * buffer, size_t *tag_size)
 {
   guint32 dts = 0, dts_ext = 0;
   guint32 tag_data_size;
@@ -3014,7 +3014,7 @@ flv_demux_handle_seek_push (GstFlvDemux * demux, GstEvent * event)
   if (format != GST_FORMAT_TIME)
     goto wrong_format;
 
-  flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
+  flush = !!(flags & GST_SEEK_FLAG_FLUSH);
 
   /* Work on a copy until we are sure the seek succeeded. */
   memcpy (&seeksegment, &demux->segment, sizeof (GstSegment));
@@ -3185,7 +3185,7 @@ gst_flv_demux_handle_seek_pull (GstFlvDemux * demux, GstEvent * event,
     demux->seeking = seeking;
   GST_OBJECT_UNLOCK (demux);
 
-  flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
+  flush = !!(flags & GST_SEEK_FLAG_FLUSH);
 
   if (flush) {
     /* Flush start up and downstream to make sure data flow and loops are
diff --git a/gst/goom/mmx.c b/gst/goom/mmx.c
index bc2a6c46..14256a91 100644
--- a/gst/goom/mmx.c
+++ b/gst/goom/mmx.c
@@ -126,7 +126,6 @@ zoom_filter_mmx (int prevX, int prevY,
         "psrlw $8, %%mm0 \n\t"
         "packuswb %%mm7, %%mm0 \n\t" "movd %%mm0,%0 \n\t":"=g" (expix2[loop])
         :"r" (pos), "r" (coeffs), "r" (expix1)
-
         );
 
     emms ();
diff --git a/gst/imagefreeze/gstimagefreeze.c b/gst/imagefreeze/gstimagefreeze.c
index 6a2431ab..468318fe 100644
--- a/gst/imagefreeze/gstimagefreeze.c
+++ b/gst/imagefreeze/gstimagefreeze.c
@@ -696,7 +696,7 @@ gst_image_freeze_src_event (GstPad * pad, GstObject * parent, GstEvent * event)
           &stop_type, &stop);
       gst_event_unref (event);
 
-      flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
+      flush = !!(flags & GST_SEEK_FLAG_FLUSH);
 
       if (format != GST_FORMAT_TIME && format != GST_FORMAT_DEFAULT) {
         GST_ERROR_OBJECT (pad, "Seek in invalid format: %s",
diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index efd48b14..6a6f50a4 100644
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -1413,8 +1413,8 @@ gst_qtdemux_perform_seek (GstQTDemux * qtdemux, GstSegment * segment,
     gint64 min_offset;
     gboolean next, before, after;
 
-    before = ! !(flags & GST_SEEK_FLAG_SNAP_BEFORE);
-    after = ! !(flags & GST_SEEK_FLAG_SNAP_AFTER);
+    before = !!(flags & GST_SEEK_FLAG_SNAP_BEFORE);
+    after = !!(flags & GST_SEEK_FLAG_SNAP_AFTER);
     next = after && !before;
     if (segment->rate < 0)
       next = !next;
@@ -1494,8 +1494,8 @@ gst_qtdemux_do_seek (GstQTDemux * qtdemux, GstPad * pad, GstEvent * event)
 
   GST_DEBUG_OBJECT (qtdemux, "seek format %s", gst_format_get_name (format));
 
-  flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
-  instant_rate_change = ! !(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
+  flush = !!(flags & GST_SEEK_FLAG_FLUSH);
+  instant_rate_change = !!(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
 
   /* Directly send the instant-rate-change event here before taking the
    * stream-lock so that it can be applied as soon as possible */
@@ -1642,7 +1642,7 @@ gst_qtdemux_handle_src_event (GstPad * pad, GstObject * parent,
 
       gst_event_parse_seek (event, NULL, &seek_format, &flags, NULL, NULL, NULL,
           NULL);
-      instant_rate_change = ! !(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
+      instant_rate_change = !!(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
 
       if (seqnum == qtdemux->segment_seqnum) {
         GST_LOG_OBJECT (pad,
@@ -9591,7 +9591,7 @@ qtdemux_stbl_init (GstQTDemux * qtdemux, QtDemuxStream * stream, GNode * stbl)
   /* sync sample atom */
   stream->stps_present = FALSE;
   if ((stream->stss_present =
-          ! !qtdemux_tree_get_child_by_type_full (stbl, FOURCC_stss,
+          !!qtdemux_tree_get_child_by_type_full (stbl, FOURCC_stss,
               &stream->stss) ? TRUE : FALSE) == TRUE) {
     /* copy atom data into a new buffer for later use */
     stream->stss.data = g_memdup2 (stream->stss.data, stream->stss.size);
@@ -9609,7 +9609,7 @@ qtdemux_stbl_init (GstQTDemux * qtdemux, QtDemuxStream * stream, GNode * stbl)
 
     /* partial sync sample atom */
     if ((stream->stps_present =
-            ! !qtdemux_tree_get_child_by_type_full (stbl, FOURCC_stps,
+            !!qtdemux_tree_get_child_by_type_full (stbl, FOURCC_stps,
                 &stream->stps) ? TRUE : FALSE) == TRUE) {
       /* copy atom data into a new buffer for later use */
       stream->stps.data = g_memdup2 (stream->stps.data, stream->stps.size);
@@ -9709,7 +9709,7 @@ qtdemux_stbl_init (GstQTDemux * qtdemux, QtDemuxStream * stream, GNode * stbl)
 
   /* composition time-to-sample */
   if ((stream->ctts_present =
-          ! !qtdemux_tree_get_child_by_type_full (stbl, FOURCC_ctts,
+          !!qtdemux_tree_get_child_by_type_full (stbl, FOURCC_ctts,
               &stream->ctts) ? TRUE : FALSE) == TRUE) {
     GstByteReader cslg = GST_BYTE_READER_INIT (NULL, 0);
     guint8 ctts_version;
diff --git a/gst/isomp4/qtdemux_tags.c b/gst/isomp4/qtdemux_tags.c
index f2b384d6..af728863 100644
--- a/gst/isomp4/qtdemux_tags.c
+++ b/gst/isomp4/qtdemux_tags.c
@@ -716,14 +716,14 @@ qtdemux_tag_add_revdns (GstQTDemux * demux, GstTagList * taglist,
       const gchar tag[28];
     } tags[] = {
       {
-      "replaygain_track_gain", GST_TAG_TRACK_GAIN}, {
-      "replaygain_track_peak", GST_TAG_TRACK_PEAK}, {
-      "replaygain_album_gain", GST_TAG_ALBUM_GAIN}, {
-      "replaygain_album_peak", GST_TAG_ALBUM_PEAK}, {
-      "MusicBrainz Track Id", GST_TAG_MUSICBRAINZ_TRACKID}, {
-      "MusicBrainz Artist Id", GST_TAG_MUSICBRAINZ_ARTISTID}, {
-      "MusicBrainz Album Id", GST_TAG_MUSICBRAINZ_ALBUMID}, {
-      "MusicBrainz Album Artist Id", GST_TAG_MUSICBRAINZ_ALBUMARTISTID}
+          "replaygain_track_gain", GST_TAG_TRACK_GAIN}, {
+          "replaygain_track_peak", GST_TAG_TRACK_PEAK}, {
+          "replaygain_album_gain", GST_TAG_ALBUM_GAIN}, {
+          "replaygain_album_peak", GST_TAG_ALBUM_PEAK}, {
+          "MusicBrainz Track Id", GST_TAG_MUSICBRAINZ_TRACKID}, {
+          "MusicBrainz Artist Id", GST_TAG_MUSICBRAINZ_ARTISTID}, {
+          "MusicBrainz Album Id", GST_TAG_MUSICBRAINZ_ALBUMID}, {
+          "MusicBrainz Album Artist Id", GST_TAG_MUSICBRAINZ_ALBUMARTISTID}
     };
     int i;
 
@@ -823,63 +823,64 @@ static const struct
   const GstQTDemuxAddTagFunc func;
 } add_funcs[] = {
   {
-  FOURCC__nam, GST_TAG_TITLE, NULL, qtdemux_tag_add_str}, {
-  FOURCC_titl, GST_TAG_TITLE, NULL, qtdemux_tag_add_str}, {
-  FOURCC__grp, GST_TAG_GROUPING, NULL, qtdemux_tag_add_str}, {
-  FOURCC__wrt, GST_TAG_COMPOSER, NULL, qtdemux_tag_add_str}, {
-  FOURCC__ART, GST_TAG_ARTIST, NULL, qtdemux_tag_add_str}, {
-  FOURCC_aART, GST_TAG_ALBUM_ARTIST, NULL, qtdemux_tag_add_str}, {
-  FOURCC_perf, GST_TAG_ARTIST, NULL, qtdemux_tag_add_str}, {
-  FOURCC_auth, GST_TAG_COMPOSER, NULL, qtdemux_tag_add_str}, {
-  FOURCC__alb, GST_TAG_ALBUM, NULL, qtdemux_tag_add_str}, {
-  FOURCC_albm, GST_TAG_ALBUM, NULL, qtdemux_tag_add_str}, {
-  FOURCC_cprt, GST_TAG_COPYRIGHT, NULL, qtdemux_tag_add_str}, {
-  FOURCC__cpy, GST_TAG_COPYRIGHT, NULL, qtdemux_tag_add_str}, {
-  FOURCC__cmt, GST_TAG_COMMENT, NULL, qtdemux_tag_add_str}, {
-  FOURCC__des, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
-  FOURCC_desc, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
-  FOURCC_dscp, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
-  FOURCC__lyr, GST_TAG_LYRICS, NULL, qtdemux_tag_add_str}, {
-  FOURCC__day, GST_TAG_DATE, NULL, qtdemux_tag_add_date}, {
-  FOURCC_yrrc, GST_TAG_DATE, NULL, qtdemux_tag_add_year}, {
-  FOURCC__too, GST_TAG_ENCODER, NULL, qtdemux_tag_add_str}, {
-  FOURCC__inf, GST_TAG_COMMENT, NULL, qtdemux_tag_add_str}, {
-  FOURCC_trkn, GST_TAG_TRACK_NUMBER, GST_TAG_TRACK_COUNT, qtdemux_tag_add_num}, {
-  FOURCC_disk, GST_TAG_ALBUM_VOLUME_NUMBER, GST_TAG_ALBUM_VOLUME_COUNT,
-        qtdemux_tag_add_num}, {
-  FOURCC_disc, GST_TAG_ALBUM_VOLUME_NUMBER, GST_TAG_ALBUM_VOLUME_COUNT,
-        qtdemux_tag_add_num}, {
-  FOURCC__gen, GST_TAG_GENRE, NULL, qtdemux_tag_add_str}, {
-  FOURCC_gnre, GST_TAG_GENRE, NULL, qtdemux_tag_add_gnre}, {
-  FOURCC_tmpo, GST_TAG_BEATS_PER_MINUTE, NULL, qtdemux_tag_add_tmpo}, {
-  FOURCC_covr, GST_TAG_IMAGE, NULL, qtdemux_tag_add_covr}, {
-  FOURCC_sonm, GST_TAG_TITLE_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_soal, GST_TAG_ALBUM_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_soar, GST_TAG_ARTIST_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_soaa, GST_TAG_ALBUM_ARTIST_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_soco, GST_TAG_COMPOSER_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_sosn, GST_TAG_SHOW_SORTNAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_tvsh, GST_TAG_SHOW_NAME, NULL, qtdemux_tag_add_str}, {
-  FOURCC_tvsn, GST_TAG_SHOW_SEASON_NUMBER, NULL, qtdemux_tag_add_uint32}, {
-  FOURCC_tves, GST_TAG_SHOW_EPISODE_NUMBER, NULL, qtdemux_tag_add_uint32}, {
-  FOURCC_kywd, GST_TAG_KEYWORDS, NULL, qtdemux_tag_add_keywords}, {
-  FOURCC_keyw, GST_TAG_KEYWORDS, NULL, qtdemux_tag_add_str}, {
-  FOURCC__enc, GST_TAG_ENCODER, NULL, qtdemux_tag_add_str}, {
-  FOURCC_loci, GST_TAG_GEO_LOCATION_NAME, NULL, qtdemux_tag_add_location}, {
-  FOURCC_clsf, GST_QT_DEMUX_CLASSIFICATION_TAG, NULL,
-        qtdemux_tag_add_classification}, {
-  FOURCC__mak, GST_TAG_DEVICE_MANUFACTURER, NULL, qtdemux_tag_add_str}, {
-  FOURCC__mod, GST_TAG_DEVICE_MODEL, NULL, qtdemux_tag_add_str}, {
-  FOURCC__swr, GST_TAG_APPLICATION_NAME, NULL, qtdemux_tag_add_str}, {
-
-    /* This is a special case, some tags are stored in this
-     * 'reverse dns naming', according to:
-     * http://atomicparsley.sourceforge.net/mpeg-4files.html and
-     * bug #614471
-     */
-  FOURCC_____, "", NULL, qtdemux_tag_add_revdns}, {
-    /* see http://www.mp4ra.org/specs.html for ID32 in meta box */
-  FOURCC_ID32, "", NULL, qtdemux_tag_add_id32}
+      FOURCC__nam, GST_TAG_TITLE, NULL, qtdemux_tag_add_str}, {
+      FOURCC_titl, GST_TAG_TITLE, NULL, qtdemux_tag_add_str}, {
+      FOURCC__grp, GST_TAG_GROUPING, NULL, qtdemux_tag_add_str}, {
+      FOURCC__wrt, GST_TAG_COMPOSER, NULL, qtdemux_tag_add_str}, {
+      FOURCC__ART, GST_TAG_ARTIST, NULL, qtdemux_tag_add_str}, {
+      FOURCC_aART, GST_TAG_ALBUM_ARTIST, NULL, qtdemux_tag_add_str}, {
+      FOURCC_perf, GST_TAG_ARTIST, NULL, qtdemux_tag_add_str}, {
+      FOURCC_auth, GST_TAG_COMPOSER, NULL, qtdemux_tag_add_str}, {
+      FOURCC__alb, GST_TAG_ALBUM, NULL, qtdemux_tag_add_str}, {
+      FOURCC_albm, GST_TAG_ALBUM, NULL, qtdemux_tag_add_str}, {
+      FOURCC_cprt, GST_TAG_COPYRIGHT, NULL, qtdemux_tag_add_str}, {
+      FOURCC__cpy, GST_TAG_COPYRIGHT, NULL, qtdemux_tag_add_str}, {
+      FOURCC__cmt, GST_TAG_COMMENT, NULL, qtdemux_tag_add_str}, {
+      FOURCC__des, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
+      FOURCC_desc, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
+      FOURCC_dscp, GST_TAG_DESCRIPTION, NULL, qtdemux_tag_add_str}, {
+      FOURCC__lyr, GST_TAG_LYRICS, NULL, qtdemux_tag_add_str}, {
+      FOURCC__day, GST_TAG_DATE, NULL, qtdemux_tag_add_date}, {
+      FOURCC_yrrc, GST_TAG_DATE, NULL, qtdemux_tag_add_year}, {
+      FOURCC__too, GST_TAG_ENCODER, NULL, qtdemux_tag_add_str}, {
+      FOURCC__inf, GST_TAG_COMMENT, NULL, qtdemux_tag_add_str}, {
+        FOURCC_trkn, GST_TAG_TRACK_NUMBER, GST_TAG_TRACK_COUNT,
+      qtdemux_tag_add_num}, {
+        FOURCC_disk, GST_TAG_ALBUM_VOLUME_NUMBER, GST_TAG_ALBUM_VOLUME_COUNT,
+      qtdemux_tag_add_num}, {
+        FOURCC_disc, GST_TAG_ALBUM_VOLUME_NUMBER, GST_TAG_ALBUM_VOLUME_COUNT,
+      qtdemux_tag_add_num}, {
+      FOURCC__gen, GST_TAG_GENRE, NULL, qtdemux_tag_add_str}, {
+      FOURCC_gnre, GST_TAG_GENRE, NULL, qtdemux_tag_add_gnre}, {
+      FOURCC_tmpo, GST_TAG_BEATS_PER_MINUTE, NULL, qtdemux_tag_add_tmpo}, {
+      FOURCC_covr, GST_TAG_IMAGE, NULL, qtdemux_tag_add_covr}, {
+      FOURCC_sonm, GST_TAG_TITLE_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_soal, GST_TAG_ALBUM_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_soar, GST_TAG_ARTIST_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_soaa, GST_TAG_ALBUM_ARTIST_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_soco, GST_TAG_COMPOSER_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_sosn, GST_TAG_SHOW_SORTNAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_tvsh, GST_TAG_SHOW_NAME, NULL, qtdemux_tag_add_str}, {
+      FOURCC_tvsn, GST_TAG_SHOW_SEASON_NUMBER, NULL, qtdemux_tag_add_uint32}, {
+      FOURCC_tves, GST_TAG_SHOW_EPISODE_NUMBER, NULL, qtdemux_tag_add_uint32}, {
+      FOURCC_kywd, GST_TAG_KEYWORDS, NULL, qtdemux_tag_add_keywords}, {
+      FOURCC_keyw, GST_TAG_KEYWORDS, NULL, qtdemux_tag_add_str}, {
+      FOURCC__enc, GST_TAG_ENCODER, NULL, qtdemux_tag_add_str}, {
+      FOURCC_loci, GST_TAG_GEO_LOCATION_NAME, NULL, qtdemux_tag_add_location}, {
+        FOURCC_clsf, GST_QT_DEMUX_CLASSIFICATION_TAG, NULL,
+      qtdemux_tag_add_classification}, {
+      FOURCC__mak, GST_TAG_DEVICE_MANUFACTURER, NULL, qtdemux_tag_add_str}, {
+      FOURCC__mod, GST_TAG_DEVICE_MODEL, NULL, qtdemux_tag_add_str}, {
+      FOURCC__swr, GST_TAG_APPLICATION_NAME, NULL, qtdemux_tag_add_str}, {
+
+        /* This is a special case, some tags are stored in this
+         * 'reverse dns naming', according to:
+         * http://atomicparsley.sourceforge.net/mpeg-4files.html and
+         * bug #614471
+         */
+      FOURCC_____, "", NULL, qtdemux_tag_add_revdns}, {
+        /* see http://www.mp4ra.org/specs.html for ID32 in meta box */
+      FOURCC_ID32, "", NULL, qtdemux_tag_add_id32}
 };
 
 struct _GstQtDemuxTagList
diff --git a/gst/matroska/matroska-demux.c b/gst/matroska/matroska-demux.c
index 2cb7acf2..5c47fc68 100644
--- a/gst/matroska/matroska-demux.c
+++ b/gst/matroska/matroska-demux.c
@@ -2811,12 +2811,12 @@ gst_matroska_demux_handle_seek_event (GstMatroskaDemux * demux,
 
   GST_DEBUG_OBJECT (demux, "configuring seek");
 
-  flush = ! !(flags & GST_SEEK_FLAG_FLUSH);
-  keyunit = ! !(flags & GST_SEEK_FLAG_KEY_UNIT);
-  after = ! !(flags & GST_SEEK_FLAG_SNAP_AFTER);
-  before = ! !(flags & GST_SEEK_FLAG_SNAP_BEFORE);
-  accurate = ! !(flags & GST_SEEK_FLAG_ACCURATE);
-  instant_rate_change = ! !(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
+  flush = !!(flags & GST_SEEK_FLAG_FLUSH);
+  keyunit = !!(flags & GST_SEEK_FLAG_KEY_UNIT);
+  after = !!(flags & GST_SEEK_FLAG_SNAP_AFTER);
+  before = !!(flags & GST_SEEK_FLAG_SNAP_BEFORE);
+  accurate = !!(flags & GST_SEEK_FLAG_ACCURATE);
+  instant_rate_change = !!(flags & GST_SEEK_FLAG_INSTANT_RATE_CHANGE);
 
   /* Directly send the instant-rate-change event here before taking the
    * stream-lock so that it can be applied as soon as possible */
diff --git a/gst/matroska/matroska-mux.c b/gst/matroska/matroska-mux.c
index 4e9b9ac8..e6144328 100644
--- a/gst/matroska/matroska-mux.c
+++ b/gst/matroska/matroska-mux.c
@@ -3446,21 +3446,21 @@ static const struct
 }
 gst_matroska_tag_conv[] = {
   {
-  GST_MATROSKA_TAG_ID_TITLE, GST_TAG_TITLE}, {
-  GST_MATROSKA_TAG_ID_ARTIST, GST_TAG_ARTIST}, {
-  GST_MATROSKA_TAG_ID_ALBUM, GST_TAG_ALBUM}, {
-  GST_MATROSKA_TAG_ID_COMMENTS, GST_TAG_COMMENT}, {
-  GST_MATROSKA_TAG_ID_BITSPS, GST_TAG_BITRATE}, {
-  GST_MATROSKA_TAG_ID_BPS, GST_TAG_BITRATE}, {
-  GST_MATROSKA_TAG_ID_ENCODER, GST_TAG_ENCODER}, {
-  GST_MATROSKA_TAG_ID_DATE, GST_TAG_DATE}, {
-  GST_MATROSKA_TAG_ID_ISRC, GST_TAG_ISRC}, {
-  GST_MATROSKA_TAG_ID_COPYRIGHT, GST_TAG_COPYRIGHT}, {
-  GST_MATROSKA_TAG_ID_BPM, GST_TAG_BEATS_PER_MINUTE}, {
-  GST_MATROSKA_TAG_ID_TERMS_OF_USE, GST_TAG_LICENSE}, {
-  GST_MATROSKA_TAG_ID_COMPOSER, GST_TAG_COMPOSER}, {
-  GST_MATROSKA_TAG_ID_LEAD_PERFORMER, GST_TAG_PERFORMER}, {
-  GST_MATROSKA_TAG_ID_GENRE, GST_TAG_GENRE}
+      GST_MATROSKA_TAG_ID_TITLE, GST_TAG_TITLE}, {
+      GST_MATROSKA_TAG_ID_ARTIST, GST_TAG_ARTIST}, {
+      GST_MATROSKA_TAG_ID_ALBUM, GST_TAG_ALBUM}, {
+      GST_MATROSKA_TAG_ID_COMMENTS, GST_TAG_COMMENT}, {
+      GST_MATROSKA_TAG_ID_BITSPS, GST_TAG_BITRATE}, {
+      GST_MATROSKA_TAG_ID_BPS, GST_TAG_BITRATE}, {
+      GST_MATROSKA_TAG_ID_ENCODER, GST_TAG_ENCODER}, {
+      GST_MATROSKA_TAG_ID_DATE, GST_TAG_DATE}, {
+      GST_MATROSKA_TAG_ID_ISRC, GST_TAG_ISRC}, {
+      GST_MATROSKA_TAG_ID_COPYRIGHT, GST_TAG_COPYRIGHT}, {
+      GST_MATROSKA_TAG_ID_BPM, GST_TAG_BEATS_PER_MINUTE}, {
+      GST_MATROSKA_TAG_ID_TERMS_OF_USE, GST_TAG_LICENSE}, {
+      GST_MATROSKA_TAG_ID_COMPOSER, GST_TAG_COMPOSER}, {
+      GST_MATROSKA_TAG_ID_LEAD_PERFORMER, GST_TAG_PERFORMER}, {
+      GST_MATROSKA_TAG_ID_GENRE, GST_TAG_GENRE}
 };
 
 /* Every stagefright implementation on android up to and including 6.0.1 is using
diff --git a/gst/rtp/dboolhuff.c b/gst/rtp/dboolhuff.c
index 3d0fc8f0..118bd0b9 100644
--- a/gst/rtp/dboolhuff.c
+++ b/gst/rtp/dboolhuff.c
@@ -14,24 +14,25 @@
 __declspec (align (16))
      const unsigned char vp8_norm[256] = {
 #else
-const unsigned char vp8_norm[256] __attribute__ ((aligned (16))) = {
+const unsigned char vp8_norm[256] __attribute__((aligned (16))) = {
 #endif
-0, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
-      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
-      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
-      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+  0, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
+  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+};
 
 int
 vp8dx_start_decode (BOOL_DECODER * br,
diff --git a/gst/rtp/gstrtph263depay.c b/gst/rtp/gstrtph263depay.c
index f6b41a5b..0504d493 100644
--- a/gst/rtp/gstrtph263depay.c
+++ b/gst/rtp/gstrtph263depay.c
@@ -318,7 +318,7 @@ gst_rtp_h263_depay_process (GstRTPBaseDepayload * depayload, GstRTPBuffer * rtp)
     if (payload_len > 4 && (GST_READ_UINT32_BE (payload) >> 10 == 0x20)) {
       GST_DEBUG ("Mode %c with PSC => frame start", "ABC"[F + P]);
       rtph263depay->start = TRUE;
-      if ((! !(payload[4] & 0x02)) != I) {
+      if ((!!(payload[4] & 0x02)) != I) {
         GST_DEBUG ("Wrong Picture Coding Type Flag in rtp header");
         I = !I;
       }
diff --git a/gst/rtp/gstrtpmparobustdepay.c b/gst/rtp/gstrtpmparobustdepay.c
index 99f25978..b20072fb 100644
--- a/gst/rtp/gstrtpmparobustdepay.c
+++ b/gst/rtp/gstrtpmparobustdepay.c
@@ -682,8 +682,8 @@ gst_rtp_mpa_robust_depay_process (GstRTPBaseDepayload * depayload,
    */
   while (payload_len) {
     if (G_LIKELY (rtpmpadepay->has_descriptor)) {
-      cont = ! !(payload[offset] & 0x80);
-      dtype = ! !(payload[offset] & 0x40);
+      cont = !!(payload[offset] & 0x80);
+      dtype = !!(payload[offset] & 0x40);
       if (dtype) {
         size = (payload[offset] & 0x3f) << 8 | payload[offset + 1];
         payload_len--;
diff --git a/gst/rtp/gstrtpsv3vdepay.c b/gst/rtp/gstrtpsv3vdepay.c
index bac99458..811eaee6 100644
--- a/gst/rtp/gstrtpsv3vdepay.c
+++ b/gst/rtp/gstrtpsv3vdepay.c
@@ -139,13 +139,13 @@ gst_rtp_sv3v_depay_process (GstRTPBaseDepayload * depayload, GstRTPBuffer * rtp)
     guint width, height;
   } resolutions[7] = {
     {
-    160, 128}, {
-    128, 96}, {
-    176, 144}, {
-    352, 288}, {
-    704, 576}, {
-    240, 180}, {
-    320, 240}
+        160, 128}, {
+        128, 96}, {
+        176, 144}, {
+        352, 288}, {
+        704, 576}, {
+        240, 180}, {
+        320, 240}
   };
   gint payload_len;
   guint8 *payload;
diff --git a/gst/rtsp/gstrtspsrc.c b/gst/rtsp/gstrtspsrc.c
index 8666d26e..391a92d4 100644
--- a/gst/rtsp/gstrtspsrc.c
+++ b/gst/rtsp/gstrtspsrc.c
@@ -2977,7 +2977,7 @@ gst_rtspsrc_perform_seek (GstRTSPSrc * src, GstEvent * event)
 
   /* If an accurate seek was requested, we want to clip the segment we
    * output in ONVIF mode to the requested bounds */
-  src->clip_out_segment = ! !(flags & GST_SEEK_FLAG_ACCURATE);
+  src->clip_out_segment = !!(flags & GST_SEEK_FLAG_ACCURATE);
   src->seek_seqnum = gst_event_get_seqnum (event);
 
   /* prepare for streaming again */
diff --git a/gst/videofilter/gstvideotemplate.c b/gst/videofilter/gstvideotemplate.c
index 660526a9..93aead4e 100644
--- a/gst/videofilter/gstvideotemplate.c
+++ b/gst/videofilter/gstvideotemplate.c
@@ -224,7 +224,6 @@ GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
     videotemplate,
     "Template for a video filter",
     plugin_init, VERSION, GST_LICENSE, GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN)
-
      static void gst_videotemplate_setup (GstVideofilter * videofilter)
 {
   GstVideotemplate *videotemplate;
diff --git a/gst/wavenc/gstwavenc.c b/gst/wavenc/gstwavenc.c
index 2392afef..e767c9bd 100644
--- a/gst/wavenc/gstwavenc.c
+++ b/gst/wavenc/gstwavenc.c
@@ -533,19 +533,19 @@ gst_wavparse_tags_foreach (const GstTagList * tags, const gchar * tag,
     const gchar *tag;
   } rifftags[] = {
     {
-    GST_RIFF_INFO_IARL, GST_TAG_LOCATION}, {
-    GST_RIFF_INFO_IART, GST_TAG_ARTIST}, {
-    GST_RIFF_INFO_ICMT, GST_TAG_COMMENT}, {
-    GST_RIFF_INFO_ICOP, GST_TAG_COPYRIGHT}, {
-    GST_RIFF_INFO_ICRD, GST_TAG_DATE}, {
-    GST_RIFF_INFO_IGNR, GST_TAG_GENRE}, {
-    GST_RIFF_INFO_IKEY, GST_TAG_KEYWORDS}, {
-    GST_RIFF_INFO_INAM, GST_TAG_TITLE}, {
-    GST_RIFF_INFO_IPRD, GST_TAG_ALBUM}, {
-    GST_RIFF_INFO_ISBJ, GST_TAG_ALBUM_ARTIST}, {
-    GST_RIFF_INFO_ISFT, GST_TAG_ENCODER}, {
-    GST_RIFF_INFO_ISRC, GST_TAG_ISRC}, {
-    0, NULL}
+        GST_RIFF_INFO_IARL, GST_TAG_LOCATION}, {
+        GST_RIFF_INFO_IART, GST_TAG_ARTIST}, {
+        GST_RIFF_INFO_ICMT, GST_TAG_COMMENT}, {
+        GST_RIFF_INFO_ICOP, GST_TAG_COPYRIGHT}, {
+        GST_RIFF_INFO_ICRD, GST_TAG_DATE}, {
+        GST_RIFF_INFO_IGNR, GST_TAG_GENRE}, {
+        GST_RIFF_INFO_IKEY, GST_TAG_KEYWORDS}, {
+        GST_RIFF_INFO_INAM, GST_TAG_TITLE}, {
+        GST_RIFF_INFO_IPRD, GST_TAG_ALBUM}, {
+        GST_RIFF_INFO_ISBJ, GST_TAG_ALBUM_ARTIST}, {
+        GST_RIFF_INFO_ISFT, GST_TAG_ENCODER}, {
+        GST_RIFF_INFO_ISRC, GST_TAG_ISRC}, {
+        0, NULL}
   };
   gint n;
   size_t size;
diff --git a/sys/oss4/oss4-sink.c b/sys/oss4/oss4-sink.c
index 506bcf17..ab0c6726 100644
--- a/sys/oss4/oss4-sink.c
+++ b/sys/oss4/oss4-sink.c
@@ -477,7 +477,7 @@ gst_oss4_sink_open (GstAudioSink * asink, gboolean silent_errors)
 
     if (ioctl (oss->fd, SNDCTL_DSP_GET_PLAYTGT_NAMES, &routings) != -1) {
       GST_LOG_OBJECT (oss, "%u output routings (static list: %d)",
-          routings.nvalues, ! !(routings.version == 0));
+          routings.nvalues, !!(routings.version == 0));
       for (i = 0; i < routings.nvalues; ++i) {
         GST_LOG_OBJECT (oss, "  output routing %d: %s", i,
             &routings.strings[routings.strindex[i]]);
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index d201f7ea..ec6d665a 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -4420,7 +4420,7 @@ unsupported_format:
  * Returns: %TRUE on success, %FALSE on failure.
  */
 gboolean
-gst_v4l2_object_set_crop (GstV4l2Object * obj, struct v4l2_rect * crop_rect)
+gst_v4l2_object_set_crop (GstV4l2Object * obj, struct v4l2_rect *crop_rect)
 {
   struct v4l2_selection sel = { 0 };
   struct v4l2_crop crop = { 0 };
@@ -4543,14 +4543,13 @@ gst_v4l2_object_get_crop_rect (GstV4l2Object * obj, guint target,
 }
 
 gboolean
-gst_v4l2_object_get_crop_bounds (GstV4l2Object * obj, struct v4l2_rect * result)
+gst_v4l2_object_get_crop_bounds (GstV4l2Object * obj, struct v4l2_rect *result)
 {
   return gst_v4l2_object_get_crop_rect (obj, V4L2_SEL_TGT_CROP_BOUNDS, result);
 }
 
 gboolean
-gst_v4l2_object_get_crop_default (GstV4l2Object * obj,
-    struct v4l2_rect * result)
+gst_v4l2_object_get_crop_default (GstV4l2Object * obj, struct v4l2_rect *result)
 {
   return gst_v4l2_object_get_crop_rect (obj, V4L2_SEL_TGT_CROP_DEFAULT, result);
 }
diff --git a/sys/v4l2/gstv4l2transform.c b/sys/v4l2/gstv4l2transform.c
index e4852992..38805489 100644
--- a/sys/v4l2/gstv4l2transform.c
+++ b/sys/v4l2/gstv4l2transform.c
@@ -429,7 +429,8 @@ gst_v4l2_transform_fixate_caps (GstBaseTransform * trans,
   GstStructure *ins, *outs;
   const GValue *from_par, *to_par;
   GValue fpar = { 0, }, tpar = {
-  0,};
+    0,
+  };
 
   othercaps = gst_caps_truncate (othercaps);
   othercaps = gst_caps_make_writable (othercaps);
diff --git a/sys/v4l2/v4l2_calls.c b/sys/v4l2/v4l2_calls.c
index 6243d09c..e207c51a 100644
--- a/sys/v4l2/v4l2_calls.c
+++ b/sys/v4l2/v4l2_calls.c
@@ -1147,7 +1147,7 @@ input_failed:
 }
 
 gboolean
-gst_v4l2_query_input (GstV4l2Object * obj, struct v4l2_input * input)
+gst_v4l2_query_input (GstV4l2Object * obj, struct v4l2_input *input)
 {
   gint ret;
 
@@ -1278,7 +1278,7 @@ failed:
 }
 
 gboolean
-gst_v4l2_dequeue_event (GstV4l2Object * v4l2object, struct v4l2_event * event)
+gst_v4l2_dequeue_event (GstV4l2Object * v4l2object, struct v4l2_event *event)
 {
   gint ret;
 
@@ -1301,7 +1301,7 @@ gst_v4l2_dequeue_event (GstV4l2Object * v4l2object, struct v4l2_event * event)
 
 gboolean
 gst_v4l2_set_dv_timings (GstV4l2Object * v4l2object,
-    struct v4l2_dv_timings * timings)
+    struct v4l2_dv_timings *timings)
 {
   gint ret;
 
@@ -1321,7 +1321,7 @@ gst_v4l2_set_dv_timings (GstV4l2Object * v4l2object,
 
 gboolean
 gst_v4l2_query_dv_timings (GstV4l2Object * v4l2object,
-    struct v4l2_dv_timings * timings)
+    struct v4l2_dv_timings *timings)
 {
   gint ret;
 
diff --git a/tests/check/elements/dtmf.c b/tests/check/elements/dtmf.c
index c2ae36d5..c57a48c9 100644
--- a/tests/check/elements/dtmf.c
+++ b/tests/check/elements/dtmf.c
@@ -295,7 +295,7 @@ check_rtp_buffer (GstClockTime ts, GstClockTime duration, gboolean start,
 
   fail_unless (payload[0] == number);
   fail_unless ((payload[1] & 0x7F) == volume);
-  fail_unless (! !(payload[1] & 0x80) == end);
+  fail_unless (!!(payload[1] & 0x80) == end);
   fail_unless (GST_READ_UINT16_BE (payload + 2) == rtpduration);
 
   gst_rtp_buffer_unmap (&rtpbuffer);
diff --git a/tests/check/elements/rtpvp8.c b/tests/check/elements/rtpvp8.c
index 1bcd0d80..d658a3a7 100644
--- a/tests/check/elements/rtpvp8.c
+++ b/tests/check/elements/rtpvp8.c
@@ -136,18 +136,18 @@ static const struct no_meta_test_data
   guint vp8_payload_control_value;
 } no_meta_test_data[] = {
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, 1, 0x10},       /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, 1, 0x10},   /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, 3, 0x90},    /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, 3, 0x90},        /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, 4, 0x90},    /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
-      /* repeated with non reference frame */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, 4, 0x90},        /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+  /* repeated with non reference frame */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, 1, 0x30},       /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, 1, 0x30},   /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, 3, 0xB0},    /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, 3, 0xB0},        /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, 4, 0xB0},    /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, 4, 0xB0},        /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
 };
 
 GST_START_TEST (test_pay_no_meta)
@@ -221,42 +221,42 @@ static const struct with_meta_test_data
   guint vp8_payload_extended_value;
 } with_meta_test_data[] = {
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, FALSE, FALSE, 1, 0x10, 0x80},   /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, FALSE, FALSE, 1, 0x10, 0x80},       /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, FALSE, FALSE, 3, 0x90, 0x80},        /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, FALSE, FALSE, 3, 0x90, 0x80},    /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, FALSE, FALSE, 4, 0x90, 0x80},        /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, FALSE, FALSE, 4, 0x90, 0x80},    /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, FALSE, 4, 0x90, 0x60},    /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, FALSE, 4, 0x90, 0x60},        /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, FALSE, 5, 0x90, 0xE0}, /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, FALSE, 5, 0x90, 0xE0},     /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, FALSE, 6, 0x90, 0xE0}, /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, FALSE, 6, 0x90, 0xE0},     /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, TRUE, 4, 0x90, 0x60},     /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, TRUE, 4, 0x90, 0x60}, /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, TRUE, 5, 0x90, 0xE0},  /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, TRUE, 5, 0x90, 0xE0},      /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, TRUE, 6, 0x90, 0xE0},  /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
-      /* repeated with non reference frame */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, TRUE, 6, 0x90, 0xE0},      /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+  /* repeated with non reference frame */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, FALSE, FALSE, 1, 0x30, 0x80},   /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, FALSE, FALSE, 1, 0x30, 0x80},       /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, FALSE, FALSE, 3, 0xB0, 0x80},        /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, FALSE, FALSE, 3, 0xB0, 0x80},    /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, FALSE, FALSE, 4, 0xB0, 0x80},        /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, FALSE, FALSE, 4, 0xB0, 0x80},    /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, FALSE, 4, 0xB0, 0x60},    /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, FALSE, 4, 0xB0, 0x60},        /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, FALSE, 5, 0xB0, 0xE0}, /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, FALSE, 5, 0xB0, 0xE0},     /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, FALSE, 6, 0xB0, 0xE0}, /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, FALSE, 6, 0xB0, 0xE0},     /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
   {
-  VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, TRUE, 4, 0xB0, 0x60},     /* no picture ID single byte header, S set */
+      VP8_PAY_NO_PICTURE_ID, FALSE, TRUE, TRUE, 4, 0xB0, 0x60}, /* no picture ID single byte header, S set */
   {
-  VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, TRUE, 5, 0xB0, 0xE0},  /* X bit to allow for I bit means header is three bytes, S and X set */
+      VP8_PAY_PICTURE_ID_7BITS, FALSE, TRUE, TRUE, 5, 0xB0, 0xE0},      /* X bit to allow for I bit means header is three bytes, S and X set */
   {
-  VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, TRUE, 6, 0xB0, 0xE0},  /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
+      VP8_PAY_PICTURE_ID_15BITS, TRUE, TRUE, TRUE, 6, 0xB0, 0xE0},      /* X bit to allow for I bit with M bit means header is four bytes, S, X and M set */
 };
 
 GST_START_TEST (test_pay_with_meta)
diff --git a/tests/check/elements/rtpvp9.c b/tests/check/elements/rtpvp9.c
index db4a50b7..925e7f86 100644
--- a/tests/check/elements/rtpvp9.c
+++ b/tests/check/elements/rtpvp9.c
@@ -141,34 +141,34 @@ create_rtp_vp9_buffer_full (guint seqnum, guint picid, guint buffer_type,
     gint picid_bits;
   } templates[] = {
     {
-    intra_nopicid_seqnum0, sizeof (intra_nopicid_seqnum0), 0}
+        intra_nopicid_seqnum0, sizeof (intra_nopicid_seqnum0), 0}
     , {
-    intra_picid24_seqnum0, sizeof (intra_picid24_seqnum0), 7}
+        intra_picid24_seqnum0, sizeof (intra_picid24_seqnum0), 7}
     , {
-    intra_picid6336_seqnum0, sizeof (intra_picid6336_seqnum0), 15}
+        intra_picid6336_seqnum0, sizeof (intra_picid6336_seqnum0), 15}
     ,
-        /*
-           { intra_nopicid_seqnum0_tl1_sync_tl0picidx12,
-           sizeof (intra_nopicid_seqnum0_tl1_sync_tl0picidx12),
-           0
-           },
-           { intra_picid24_seqnum0_tl1_sync_tl0picidx12,
-           sizeof (intra_picid24_seqnum0_tl1_sync_tl0picidx12),
-           7
-           },
-           { intra_picid6336_seqnum0_tl1_sync_tl0picidx12,
-           sizeof (intra_picid6336_seqnum0_tl1_sync_tl0picidx12),
-           15
-           },
-           { intra_picid24_seqnum0_tl1_sync_no_tl0picidx,
-           sizeof (intra_picid24_seqnum0_tl1_sync_no_tl0picidx),
-           7
-           },
-           { intra_picid24_seqnum0_notyk_tl0picidx12,
-           sizeof (intra_picid24_seqnum0_notyk_tl0picidx12),
-           7
-           }
-         */
+    /*
+       { intra_nopicid_seqnum0_tl1_sync_tl0picidx12,
+       sizeof (intra_nopicid_seqnum0_tl1_sync_tl0picidx12),
+       0
+       },
+       { intra_picid24_seqnum0_tl1_sync_tl0picidx12,
+       sizeof (intra_picid24_seqnum0_tl1_sync_tl0picidx12),
+       7
+       },
+       { intra_picid6336_seqnum0_tl1_sync_tl0picidx12,
+       sizeof (intra_picid6336_seqnum0_tl1_sync_tl0picidx12),
+       15
+       },
+       { intra_picid24_seqnum0_tl1_sync_no_tl0picidx,
+       sizeof (intra_picid24_seqnum0_tl1_sync_no_tl0picidx),
+       7
+       },
+       { intra_picid24_seqnum0_notyk_tl0picidx12,
+       sizeof (intra_picid24_seqnum0_notyk_tl0picidx12),
+       7
+       }
+     */
   };
   struct BufferTemplate *template = &templates[buffer_type];
   guint8 *packet = g_memdup2 (template->template, template->size);
diff --git a/tests/check/elements/videocrop.c b/tests/check/elements/videocrop.c
index b7378384..2a0e73cb 100644
--- a/tests/check/elements/videocrop.c
+++ b/tests/check/elements/videocrop.c
@@ -99,14 +99,14 @@ GST_START_TEST (test_unit_sizes)
       gint width, height;
     } sizes_to_try[] = {
       {
-      160, 120}, {
-      161, 120}, {
-      160, 121}, {
-      161, 121}, {
-      159, 120}, {
-      160, 119}, {
-      159, 119}, {
-      159, 121}
+          160, 120}, {
+          161, 120}, {
+          160, 121}, {
+          161, 121}, {
+          159, 120}, {
+          160, 119}, {
+          159, 119}, {
+          159, 121}
     };
     GstStructure *s;
     GstCaps *caps;
@@ -406,14 +406,14 @@ GST_START_TEST (test_cropping)
     gint width, height;
   } sizes_to_try[] = {
     {
-    160, 160}, {
-    161, 160}, {
-    160, 161}, {
-    161, 161}, {
-    159, 160}, {
-    160, 159}, {
-    159, 159}, {
-    159, 161}
+        160, 160}, {
+        161, 160}, {
+        160, 161}, {
+        161, 161}, {
+        159, 160}, {
+        160, 159}, {
+        159, 159}, {
+        159, 161}
   };
   GList *caps_list, *node;
   gint i;
diff --git a/tests/check/elements/videofilter.c b/tests/check/elements/videofilter.c
index 2b59d15c..851e9f22 100644
--- a/tests/check/elements/videofilter.c
+++ b/tests/check/elements/videofilter.c
@@ -140,9 +140,10 @@ check_filter_varargs (const gchar * name, GstEvent * event, gint num_buffers,
   {
     const int width, height;
   } resolutions[] = { {
-  384, 288}, {
-  385, 289}, {
-  385, 385}};
+      384, 288}, {
+      385, 289}, {
+      385, 385}
+  };
   gint i, n, r;
   gint size;
   GstCaps *allcaps, *templ = gst_caps_from_string (VIDEO_CAPS_TEMPLATE_STRING);
diff --git a/tests/check/elements/vp8enc.c b/tests/check/elements/vp8enc.c
index 3221d788..89dab020 100644
--- a/tests/check/elements/vp8enc.c
+++ b/tests/check/elements/vp8enc.c
@@ -242,7 +242,8 @@ configure_vp8ts (GstHarness * h)
   GValueArray *layer_ids = g_value_array_new (4);
   GValueArray *bitrates = g_value_array_new (3);
   GValue ival = { 0, }, bval = {
-  0,};
+    0,
+  };
 
   gst_value_array_init (&layer_sync_flags, 8);
 
@@ -331,23 +332,24 @@ GST_START_TEST (test_encode_temporally_scaled)
     gboolean droppable;
   } expected[] = {
     {
-    TRUE, 0, 1, FALSE},         /* This is an intra */
+        TRUE, 0, 1, FALSE},     /* This is an intra */
     {
-    TRUE, 2, 1, TRUE}, {
-    TRUE, 1, 1, FALSE}, {
-    FALSE, 2, 1, TRUE}, {
-    FALSE, 0, 2, FALSE}, {
-    FALSE, 2, 2, TRUE}, {
-    FALSE, 1, 2, FALSE}, {
-    FALSE, 2, 2, TRUE}, {
-    FALSE, 0, 3, FALSE}, {
-    TRUE, 2, 3, TRUE}, {
-    TRUE, 1, 3, FALSE}, {
-    FALSE, 2, 3, TRUE}, {
-    FALSE, 0, 4, FALSE}, {
-    FALSE, 2, 4, TRUE}, {
-    FALSE, 1, 4, FALSE}, {
-  FALSE, 2, 4, TRUE},};
+        TRUE, 2, 1, TRUE}, {
+        TRUE, 1, 1, FALSE}, {
+        FALSE, 2, 1, TRUE}, {
+        FALSE, 0, 2, FALSE}, {
+        FALSE, 2, 2, TRUE}, {
+        FALSE, 1, 2, FALSE}, {
+        FALSE, 2, 2, TRUE}, {
+        FALSE, 0, 3, FALSE}, {
+        TRUE, 2, 3, TRUE}, {
+        TRUE, 1, 3, FALSE}, {
+        FALSE, 2, 3, TRUE}, {
+        FALSE, 0, 4, FALSE}, {
+        FALSE, 2, 4, TRUE}, {
+        FALSE, 1, 4, FALSE}, {
+        FALSE, 2, 4, TRUE},
+  };
   GstHarness *h = gst_harness_new ("vp8enc");
   gst_harness_set_src_caps (h, gst_caps_new_i420 (320, 240));
   configure_vp8ts (h);
-- 
2.40.1

