From f26a67248c441a54b5ffdcf2db2df0c503d4d6c5 Mon Sep 17 00:00:00 2001
From: He Junyan <junyan.he@intel.com>
Date: Mon, 24 Jul 2023 21:53:46 +0800
Subject: [PATCH 202/205] va: Implement modifier in vacompositor

---
 sys/va/gstvacompositor.c | 439 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 416 insertions(+), 23 deletions(-)

diff --git a/sys/va/gstvacompositor.c b/sys/va/gstvacompositor.c
index 3f2175816..346d9eab8 100644
--- a/sys/va/gstvacompositor.c
+++ b/sys/va/gstvacompositor.c
@@ -49,6 +49,15 @@
 #include <gst/va/gstva.h>
 #include <gst/video/video.h>
 #include <va/va_drmcommon.h>
+#include <gst/va/gstvavideoformat.h>
+
+#ifndef G_OS_WIN32
+#include <libdrm/drm_fourcc.h>
+#else
+#define DRM_FORMAT_INVALID     0
+#define DRM_FORMAT_MOD_LINEAR  0ULL
+#define DRM_FORMAT_MOD_INVALID 0xffffffffffffff
+#endif
 
 #include "gstvacaps.h"
 #include "gstvadisplay_priv.h"
@@ -77,6 +86,10 @@ struct _GstVaCompositorPad
   gint width;
   gint height;
   gdouble alpha;
+
+  GstCaps *sinkpad_caps;
+  GstVideoInfo in_info;
+  GstVideoInfo sinkpad_info;
 };
 
 enum
@@ -166,6 +179,8 @@ gst_va_compositor_pad_finalize (GObject * object)
     gst_clear_object (&self->pool);
   }
 
+  gst_clear_caps (&self->sinkpad_caps);
+
   G_OBJECT_CLASS (gst_va_compositor_pad_parent_class)->finalize (object);
 }
 
@@ -178,6 +193,10 @@ gst_va_compositor_pad_init (GstVaCompositorPad * self)
   self->width = DEFAULT_PAD_WIDTH;
   self->height = DEFAULT_PAD_HEIGHT;
   self->alpha = DEFAULT_PAD_ALPHA;
+  self->sinkpad_caps = NULL;
+
+  gst_video_info_init (&self->in_info);
+  gst_video_info_init (&self->sinkpad_info);
 }
 
 static void
@@ -569,7 +588,7 @@ gst_va_compositor_propose_allocation (GstAggregator * agg,
   if (!caps)
     return FALSE;
 
-  if (!gst_video_info_from_caps (&info, caps))
+  if (!gst_va_video_info_from_caps (&info, NULL, caps))
     return FALSE;
 
   if (gst_query_get_n_allocation_pools (query) > 0)
@@ -667,7 +686,7 @@ gst_va_compositor_decide_allocation (GstAggregator * agg, GstQuery * query)
   gst_allocation_params_init (&other_params);
   gst_allocation_params_init (&params);
 
-  if (!gst_video_info_from_caps (&info, caps)) {
+  if (!gst_va_video_info_from_caps (&info, NULL, caps)) {
     GST_ERROR_OBJECT (self, "Cannot parse caps %" GST_PTR_FORMAT, caps);
     return FALSE;
   }
@@ -800,9 +819,40 @@ _get_sinkpad_pool (GstVaCompositor * self, GstVaCompositorPad * pad)
 
   gst_allocation_params_init (&params);
 
-  caps = gst_pad_get_current_caps (GST_PAD (pad));
-  if (!caps)
-    return NULL;
+  caps = gst_caps_copy (pad->sinkpad_caps);
+
+  /* For DMA buffer, we can only import linear buffers.
+     Replace the drm-format into format field. */
+  if (gst_video_is_dma_drm_caps (caps)) {
+    GstVideoInfoDmaDrm dma_info;
+    GstVideoInfo info;
+
+    if (!gst_video_info_dma_drm_from_caps (&dma_info, caps)) {
+      GST_ERROR_OBJECT (self, "Cannot parse caps %" GST_PTR_FORMAT, caps);
+      gst_caps_unref (caps);
+      return NULL;
+    }
+
+    if (dma_info.drm_modifier != DRM_FORMAT_MOD_LINEAR) {
+      GST_ERROR_OBJECT (self, "Cannot import non-linear DMA buffer");
+      gst_caps_unref (caps);
+      return NULL;
+    }
+
+    if (!gst_va_dma_drm_info_to_video_info (&dma_info, &info)) {
+      GST_ERROR_OBJECT (self, "Cannot get va video info");
+      gst_caps_unref (caps);
+      return NULL;
+    }
+
+    gst_caps_set_simple (caps, "format", G_TYPE_STRING,
+        gst_video_format_to_string (GST_VIDEO_INFO_FORMAT (&info)), NULL);
+    gst_structure_remove_field (gst_caps_get_structure (caps, 0), "drm-format");
+  }
+
+  gst_caps_set_features_simple (caps,
+      gst_caps_features_from_string (GST_CAPS_FEATURE_MEMORY_VA));
+
   if (!gst_video_info_from_caps (&info, caps)) {
     GST_ERROR_OBJECT (self, "Cannot parse caps %" GST_PTR_FORMAT, caps);
     gst_caps_unref (caps);
@@ -812,6 +862,7 @@ _get_sinkpad_pool (GstVaCompositor * self, GstVaCompositorPad * pad)
   size = GST_VIDEO_INFO_SIZE (&info);
 
   allocator = gst_va_compositor_allocator_from_caps (self, caps);
+
   pad->pool = gst_va_pool_new_with_config (caps, size, 1, 0, usage_hint,
       GST_VA_FEATURE_AUTO, allocator, &params);
   gst_caps_unref (caps);
@@ -821,14 +872,8 @@ _get_sinkpad_pool (GstVaCompositor * self, GstVaCompositorPad * pad)
     return NULL;
   }
 
-  if (GST_IS_VA_DMABUF_ALLOCATOR (allocator)) {
-    GstVideoInfoDmaDrm dma_info;
-
-    gst_va_dmabuf_allocator_get_format (allocator, &dma_info, NULL);
-    info = dma_info.vinfo;
-  } else if (GST_IS_VA_ALLOCATOR (allocator)) {
-    gst_va_allocator_get_format (allocator, &info, NULL, NULL);
-  }
+  g_assert (GST_IS_VA_ALLOCATOR (allocator));
+  gst_va_allocator_get_format (allocator, &pad->sinkpad_info, NULL, NULL);
 
   gst_object_unref (allocator);
 
@@ -949,20 +994,17 @@ gst_va_compositor_import_buffer (GstVaCompositor * self,
   GstBuffer *buffer = NULL;
   GstBufferPool *pool;
   GstFlowReturn ret;
-  GstCaps *caps;
   GstVideoInfo info;
   GstVideoFrame in_frame, out_frame;
   gboolean imported, copied;
 
-  caps = gst_pad_get_current_caps (GST_PAD (pad));
-  if (!caps)
+  /* Already hold GST_OBJECT_LOCK */
+  if (!pad->sinkpad_caps)
     return GST_FLOW_ERROR;
-  if (!gst_video_info_from_caps (&info, caps)) {
-    GST_ERROR_OBJECT (self, "Cannot parse caps %" GST_PTR_FORMAT, caps);
-    gst_caps_unref (caps);
+
+  info = pad->in_info;
+  if (GST_VIDEO_INFO_FORMAT (&info) == GST_VIDEO_FORMAT_UNKNOWN)
     return GST_FLOW_ERROR;
-  }
-  gst_caps_unref (caps);
 
   imported = _try_import_buffer (self, &info, inbuf);
   if (imported) {
@@ -985,7 +1027,8 @@ gst_va_compositor_import_buffer (GstVaCompositor * self,
   if (!gst_video_frame_map (&in_frame, &info, inbuf, GST_MAP_READ))
     goto invalid_buffer;
 
-  if (!gst_video_frame_map (&out_frame, &info, buffer, GST_MAP_WRITE)) {
+  if (!gst_video_frame_map (&out_frame,
+          &pad->sinkpad_info, buffer, GST_MAP_WRITE)) {
     gst_video_frame_unmap (&in_frame);
     goto invalid_buffer;
   }
@@ -1222,7 +1265,7 @@ gst_va_compositor_negotiated_src_caps (GstAggregator * agg, GstCaps * caps)
 {
   GstVaCompositor *self = GST_VA_COMPOSITOR (agg);
 
-  if (!gst_video_info_from_caps (&self->other_info, caps)) {
+  if (!gst_va_video_info_from_caps (&self->other_info, NULL, caps)) {
     GST_ERROR_OBJECT (self, "invalid caps");
     return FALSE;
   }
@@ -1313,6 +1356,354 @@ gst_va_compositor_fixate_src_caps (GstAggregator * agg, GstCaps * caps)
   return gst_caps_fixate (ret);
 }
 
+static GstCaps *
+_caps_from_format_and_feature (GstVideoFormat format,
+    guint64 modifier, const gchar * feature)
+{
+  GstCaps *caps;
+  gboolean is_dma = g_strcmp0 (feature, GST_CAPS_FEATURE_MEMORY_DMABUF) == 0;
+
+  caps = gst_caps_new_empty_simple ("video/x-raw");
+
+  if (is_dma) {
+    gchar *dma_str;
+    guint32 fourcc = gst_va_drm_fourcc_from_video_format (format);
+
+    dma_str = gst_video_dma_drm_fourcc_to_string (fourcc, modifier);
+
+    gst_caps_set_simple (caps, "format", G_TYPE_STRING, "DMA_DRM",
+        "drm-format", G_TYPE_STRING, dma_str, NULL);
+    g_free (dma_str);
+  } else {
+    gst_caps_set_simple (caps, "format", G_TYPE_STRING,
+        gst_video_format_to_string (format), NULL);
+  }
+
+  if (g_strcmp0 (feature, GST_CAPS_FEATURE_MEMORY_DMABUF) == 0 ||
+      g_strcmp0 (feature, GST_CAPS_FEATURE_MEMORY_VA) == 0)
+    gst_caps_set_features_simple (caps,
+        gst_caps_features_from_string (feature));
+
+  return caps;
+}
+
+static GArray *
+_collect_formats_in_caps_by_feature (GstCaps * caps,
+    const gchar * feature, GArray ** ret_modifiers)
+{
+  guint i, j, len, capslen;
+  GstCapsFeatures *features;
+  GstStructure *structure;
+  gboolean is_dma = g_strcmp0 (feature, GST_CAPS_FEATURE_MEMORY_DMABUF) == 0;
+  GstVideoFormat fmt;
+  guint64 modifier;
+  GArray *formats, *modifiers;
+  const GValue *format;
+  guint32 fourcc;
+
+  formats = g_array_new (FALSE, TRUE, sizeof (GstVideoFormat));
+  modifiers = g_array_new (FALSE, TRUE, sizeof (guint64));
+
+  capslen = gst_caps_get_size (caps);
+
+  for (i = 0; i < capslen; i++) {
+    features = gst_caps_get_features (caps, i);
+
+    if (!gst_caps_features_contains (features, feature))
+      continue;
+
+    structure = gst_caps_get_structure (caps, i);
+
+    if (is_dma)
+      format = gst_structure_get_value (structure, "drm-format");
+    else
+      format = gst_structure_get_value (structure, "format");
+
+    if (format == NULL)
+      continue;
+
+    if (GST_VALUE_HOLDS_LIST (format)) {
+      len = gst_value_list_get_size (format);
+
+      for (j = 0; j < len; j++) {
+        const GValue *val;
+
+        val = gst_value_list_get_value (format, j);
+        if (!G_VALUE_HOLDS_STRING (val))
+          continue;
+
+        if (is_dma) {
+          fourcc = gst_video_dma_drm_fourcc_from_string
+              (g_value_get_string (val), &modifier);
+          fmt = gst_va_video_format_from_drm_fourcc (fourcc);
+        } else {
+          fmt = gst_video_format_from_string (g_value_get_string (val));
+        }
+        if (fmt == GST_VIDEO_FORMAT_UNKNOWN)
+          continue;
+
+        g_array_append_val (formats, fmt);
+        if (is_dma)
+          g_array_append_val (modifiers, modifier);
+      }
+    } else if (G_VALUE_HOLDS_STRING (format)) {
+      if (is_dma) {
+        fourcc = gst_video_dma_drm_fourcc_from_string
+            (g_value_get_string (format), &modifier);
+        fmt = gst_va_video_format_from_drm_fourcc (fourcc);
+      } else {
+        fmt = gst_video_format_from_string (g_value_get_string (format));
+      }
+      if (fmt != GST_VIDEO_FORMAT_UNKNOWN) {
+        g_array_append_val (formats, fmt);
+        if (is_dma)
+          g_array_append_val (modifiers, modifier);
+      }
+    }
+  }
+
+  if (formats->len == 0) {
+    g_array_unref (formats);
+    g_array_unref (modifiers);
+    formats = NULL;
+    modifiers = NULL;
+  }
+
+  if (ret_modifiers)
+    *ret_modifiers = modifiers;
+
+  return formats;
+}
+
+static GstVideoFormat
+_compare_format (GstVideoFormat fmt1, GstVideoFormat fmt2)
+{
+  const GstVideoFormatInfo *info1 = gst_video_format_get_info (fmt1);
+  const GstVideoFormatInfo *info2 = gst_video_format_get_info (fmt2);
+
+  if (fmt1 != GST_VIDEO_FORMAT_UNKNOWN && fmt2 == GST_VIDEO_FORMAT_UNKNOWN)
+    return fmt1;
+  if (fmt1 == GST_VIDEO_FORMAT_UNKNOWN && fmt2 != GST_VIDEO_FORMAT_UNKNOWN)
+    return fmt2;
+
+  /* Prefer simple format */
+  if (!GST_VIDEO_FORMAT_INFO_IS_COMPLEX (info1)
+      && GST_VIDEO_FORMAT_INFO_IS_COMPLEX (info2))
+    return fmt1;
+  if (GST_VIDEO_FORMAT_INFO_IS_COMPLEX (info1)
+      && !GST_VIDEO_FORMAT_INFO_IS_COMPLEX (info2))
+    return fmt2;
+
+  /* Prefer the depth of 8 */
+  if (GST_VIDEO_FORMAT_INFO_BITS (info1) == 8
+      && GST_VIDEO_FORMAT_INFO_BITS (info2) != 8)
+    return fmt1;
+  if (GST_VIDEO_FORMAT_INFO_BITS (info1) != 8
+      && GST_VIDEO_FORMAT_INFO_BITS (info2) == 8)
+    return fmt2;
+
+  /* Prefer RGB */
+  if (GST_VIDEO_FORMAT_INFO_IS_RGB (info1)
+      && !GST_VIDEO_FORMAT_INFO_IS_RGB (info2))
+    return fmt1;
+  if (!GST_VIDEO_FORMAT_INFO_IS_RGB (info1)
+      && GST_VIDEO_FORMAT_INFO_IS_RGB (info2))
+    return fmt2;
+
+  if (GST_VIDEO_FORMAT_INFO_IS_RGB (info1)
+      && GST_VIDEO_FORMAT_INFO_IS_RGB (info2)) {
+    /* Prefer packed RGB than planar. */
+    if (GST_VIDEO_FORMAT_INFO_N_PLANES (info1) == 1
+        && GST_VIDEO_FORMAT_INFO_N_PLANES (info2) > 1)
+      return fmt1;
+    if (GST_VIDEO_FORMAT_INFO_N_PLANES (info1) > 1
+        && GST_VIDEO_FORMAT_INFO_N_PLANES (info2) == 1)
+      return fmt2;
+
+    /* Prefer RGB with alpha channel. */
+    if (GST_VIDEO_FORMAT_INFO_HAS_ALPHA (info1)
+        && !GST_VIDEO_FORMAT_INFO_HAS_ALPHA (info2))
+      return fmt1;
+    if (!GST_VIDEO_FORMAT_INFO_HAS_ALPHA (info1)
+        && GST_VIDEO_FORMAT_INFO_HAS_ALPHA (info2))
+      return fmt2;
+  }
+
+  if (GST_VIDEO_FORMAT_INFO_IS_YUV (info1)
+      && GST_VIDEO_FORMAT_INFO_IS_YUV (info2)) {
+    /* Prefer YUV 4:2:0. */
+    if ((GST_VIDEO_FORMAT_INFO_W_SUB (info1, 1) == 1
+            && GST_VIDEO_FORMAT_INFO_H_SUB (info1, 1) == 1)
+        && (GST_VIDEO_FORMAT_INFO_W_SUB (info2, 1) != 1
+            || GST_VIDEO_FORMAT_INFO_H_SUB (info2, 1) != 1))
+      return fmt1;
+    if ((GST_VIDEO_FORMAT_INFO_W_SUB (info1, 1) != 1
+            || GST_VIDEO_FORMAT_INFO_H_SUB (info1, 1) != 1)
+        && (GST_VIDEO_FORMAT_INFO_W_SUB (info2, 1) == 1
+            && GST_VIDEO_FORMAT_INFO_H_SUB (info2, 1) == 1))
+      return fmt2;
+  }
+
+  return fmt1;
+}
+
+static GstCaps *
+gst_va_compositor_update_caps (GstVideoAggregator * vagg, GstCaps * src_caps)
+{
+  GList *tmp;
+  GstVideoFormat fmt, best_va, best_dma, best_sys;
+  GstVideoAggregatorPad *pad;
+  GstVaCompositorPad *va_pad;
+  GArray *va_formats, *dma_formats, *modifiers, *sys_formats;
+  GstCaps *ret_caps = NULL, *clip_caps = NULL;
+  guint i;
+
+  /* We only decide caps feature and video format here. Other fields are
+     fixated in fixate_src_caps() later.
+     We consider the features first, in the order of "memory:VAMemory",
+     "memory:DMABuf" and "memory:SystemMemory". Then within that feature,
+     we iterate each input pad's format and find the best matched one. */
+  va_formats = _collect_formats_in_caps_by_feature (src_caps,
+      GST_CAPS_FEATURE_MEMORY_VA, NULL);
+  dma_formats = _collect_formats_in_caps_by_feature (src_caps,
+      GST_CAPS_FEATURE_MEMORY_DMABUF, &modifiers);
+  sys_formats = _collect_formats_in_caps_by_feature (src_caps,
+      GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY, NULL);
+
+  best_va = GST_VIDEO_FORMAT_UNKNOWN;
+  best_dma = GST_VIDEO_FORMAT_UNKNOWN;
+  best_sys = GST_VIDEO_FORMAT_UNKNOWN;
+
+  GST_OBJECT_LOCK (vagg);
+
+  for (tmp = GST_ELEMENT (vagg)->sinkpads; tmp; tmp = tmp->next) {
+    pad = tmp->data;
+    va_pad = GST_VA_COMPOSITOR_PAD (pad);
+
+    g_assert (!GST_IS_VIDEO_AGGREGATOR_CONVERT_PAD (pad));
+
+    if (!pad->info.finfo)
+      continue;
+
+    if (!va_pad->sinkpad_caps)
+      continue;
+
+    fmt = GST_VIDEO_INFO_FORMAT (&va_pad->in_info);
+    if (fmt == GST_VIDEO_FORMAT_UNKNOWN)
+      continue;
+
+    if (va_formats) {
+      for (i = 0; i < va_formats->len; i++) {
+        if (fmt == g_array_index (va_formats, GstVideoFormat, i))
+          break;
+      }
+
+      if (i < va_formats->len)
+        best_va = _compare_format (best_va, fmt);
+    }
+
+    if (dma_formats) {
+      for (i = 0; i < dma_formats->len; i++) {
+        if (fmt == g_array_index (dma_formats, GstVideoFormat, i))
+          break;
+      }
+
+      if (i < dma_formats->len)
+        best_dma = _compare_format (best_dma, fmt);
+    }
+
+    if (sys_formats) {
+      for (i = 0; i < sys_formats->len; i++) {
+        if (fmt == g_array_index (sys_formats, GstVideoFormat, i))
+          break;
+      }
+
+      if (i < sys_formats->len)
+        best_sys = _compare_format (best_sys, fmt);
+    }
+  }
+
+  GST_OBJECT_UNLOCK (vagg);
+
+  if (va_formats) {
+    if (best_va != GST_VIDEO_FORMAT_UNKNOWN) {
+      clip_caps = _caps_from_format_and_feature (best_va,
+          DRM_FORMAT_MOD_INVALID, GST_CAPS_FEATURE_MEMORY_VA);
+    } else {
+      clip_caps = gst_caps_new_empty_simple ("video/x-raw");
+      gst_caps_set_features_simple (clip_caps,
+          gst_caps_features_from_string (GST_CAPS_FEATURE_MEMORY_VA));
+    }
+  } else if (dma_formats) {
+    g_assert (dma_formats->len == modifiers->len);
+
+    if (best_dma != GST_VIDEO_FORMAT_UNKNOWN) {
+      for (i = 0; i < dma_formats->len; i++) {
+        if (best_dma == g_array_index (dma_formats, GstVideoFormat, i))
+          break;
+      }
+
+      g_assert (i < dma_formats->len);
+      g_assert (i < modifiers->len);
+      clip_caps = _caps_from_format_and_feature (best_dma,
+          g_array_index (modifiers, guint64, i),
+          GST_CAPS_FEATURE_MEMORY_DMABUF);
+    } else {
+      clip_caps = gst_caps_new_empty_simple ("video/x-raw");
+      gst_caps_set_features_simple (clip_caps,
+          gst_caps_features_from_string (GST_CAPS_FEATURE_MEMORY_DMABUF));
+    }
+  } else if (sys_formats) {
+    if (best_sys != GST_VIDEO_FORMAT_UNKNOWN) {
+      clip_caps = _caps_from_format_and_feature (best_sys,
+          DRM_FORMAT_MOD_INVALID, GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY);
+    } else {
+      clip_caps = gst_caps_new_empty_simple ("video/x-raw");
+    }
+  }
+
+  if (clip_caps)
+    ret_caps = gst_caps_intersect (src_caps, clip_caps);
+
+  if (clip_caps)
+    gst_caps_unref (clip_caps);
+  if (va_formats)
+    g_array_unref (va_formats);
+  if (dma_formats)
+    g_array_unref (dma_formats);
+  if (modifiers)
+    g_array_unref (modifiers);
+  if (sys_formats)
+    g_array_unref (sys_formats);
+
+  GST_DEBUG_OBJECT (vagg, "update src caps: %" GST_PTR_FORMAT
+      "get result caps: %" GST_PTR_FORMAT, src_caps, ret_caps);
+
+  return ret_caps;
+}
+
+static gboolean
+gst_va_compositor_sink_event (GstAggregator * agg, GstAggregatorPad * bpad,
+    GstEvent * event)
+{
+  GstVaCompositorPad *va_pad = GST_VA_COMPOSITOR_PAD (bpad);
+  GstCaps *caps;
+
+  if (GST_EVENT_TYPE (event) == GST_EVENT_CAPS) {
+    gst_event_parse_caps (event, &caps);
+
+    GST_OBJECT_LOCK (agg);
+    if (!gst_va_video_info_from_caps (&va_pad->in_info, NULL, caps)) {
+      GST_OBJECT_UNLOCK (agg);
+      return FALSE;
+    }
+    gst_caps_replace (&va_pad->sinkpad_caps, caps);
+    GST_OBJECT_UNLOCK (agg);
+  }
+
+  return GST_AGGREGATOR_CLASS (parent_class)->sink_event (agg, bpad, event);
+}
+
 /* *INDENT-OFF* */
 static const gchar *caps_str =
     GST_VIDEO_CAPS_MAKE_WITH_FEATURES (GST_CAPS_FEATURE_MEMORY_VA,
@@ -1404,11 +1795,13 @@ gst_va_compositor_class_init (gpointer g_class, gpointer class_data)
       GST_DEBUG_FUNCPTR (gst_va_compositor_negotiated_src_caps);
   agg_class->decide_allocation =
       GST_DEBUG_FUNCPTR (gst_va_compositor_decide_allocation);
+  agg_class->sink_event = GST_DEBUG_FUNCPTR (gst_va_compositor_sink_event);
 
   vagg_class->aggregate_frames =
       GST_DEBUG_FUNCPTR (gst_va_compositor_aggregate_frames);
   vagg_class->create_output_buffer =
       GST_DEBUG_FUNCPTR (gst_va_compositor_create_output_buffer);
+  vagg_class->update_caps = GST_DEBUG_FUNCPTR (gst_va_compositor_update_caps);
 
   /**
    * GstVaCompositor:device-path:
-- 
2.40.1

