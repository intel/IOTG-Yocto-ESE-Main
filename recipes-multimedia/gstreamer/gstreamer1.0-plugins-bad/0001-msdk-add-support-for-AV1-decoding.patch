From 17110917b8d1dcf6d967226fb05e795e0b11c9df Mon Sep 17 00:00:00 2001
From: Haihao Xiang <haihao.xiang@intel.com>
Date: Mon, 20 Jul 2020 10:13:13 +0800
Subject: [PATCH] msdk: add support for AV1 decoding

This feature should be available check with MSDK API 1.34 version.
To enable for TGL AV1 feature, we downgrade checking MSDK API version
to 1.33.

Upstream: pending
https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/-/merge_requests/1448

Signed-off-by: Xiang Haihao <haihao.xiang@intel.com>
Signed-off-by: Lim Siew Hoon <siew.hoon.lim@intel.com>
---
 sys/msdk/gstmsdk.c       |   9 +++
 sys/msdk/gstmsdkav1dec.c | 115 +++++++++++++++++++++++++++++++++++++++
 sys/msdk/gstmsdkav1dec.h |  67 +++++++++++++++++++++++
 sys/msdk/meson.build     |  15 +++++
 4 files changed, 206 insertions(+)
 create mode 100644 sys/msdk/gstmsdkav1dec.c
 create mode 100644 sys/msdk/gstmsdkav1dec.h

diff --git a/sys/msdk/gstmsdk.c b/sys/msdk/gstmsdk.c
index fb92a6abb..cac5d3f79 100644
--- a/sys/msdk/gstmsdk.c
+++ b/sys/msdk/gstmsdk.c
@@ -52,6 +52,9 @@
 #ifdef USE_MSDK_VP9_DEC
 #include "gstmsdkvp9dec.h"
 #endif
+#ifdef USE_MSDK_AV1_DEC
+#include "gstmsdkav1dec.h"
+#endif
 #include "gstmsdkvpp.h"
 
 GST_DEBUG_CATEGORY (gst_msdk_debug);
@@ -70,6 +73,7 @@ GST_DEBUG_CATEGORY (gst_msdkvp8dec_debug);
 GST_DEBUG_CATEGORY (gst_msdkvc1dec_debug);
 GST_DEBUG_CATEGORY (gst_msdkvp9dec_debug);
 GST_DEBUG_CATEGORY (gst_msdkvp9enc_debug);
+GST_DEBUG_CATEGORY (gst_msdkav1dec_debug);
 
 static gboolean
 plugin_init (GstPlugin * plugin)
@@ -100,6 +104,7 @@ plugin_init (GstPlugin * plugin)
   GST_DEBUG_CATEGORY_INIT (gst_msdkvc1dec_debug, "msdkvc1dec", 0, "msdkvc1dec");
   GST_DEBUG_CATEGORY_INIT (gst_msdkvp9dec_debug, "msdkvp9dec", 0, "msdkvp9dec");
   GST_DEBUG_CATEGORY_INIT (gst_msdkvp9enc_debug, "msdkvp9enc", 0, "msdkvp9enc");
+  GST_DEBUG_CATEGORY_INIT (gst_msdkav1dec_debug, "msdkav1dec", 0, "msdkav1dec");
 
   if (!msdk_is_available ())
     return FALSE;
@@ -140,6 +145,10 @@ plugin_init (GstPlugin * plugin)
 #ifdef USE_MSDK_VP9_ENC
   ret = gst_element_register (plugin, "msdkvp9enc", GST_RANK_NONE,
       GST_TYPE_MSDKVP9ENC);
+#endif
+#ifdef USE_MSDK_AV1_DEC
+  ret = gst_element_register (plugin, "msdkav1dec", GST_RANK_NONE,
+      GST_TYPE_MSDKAV1DEC);
 #endif
   ret = gst_element_register (plugin, "msdkvpp", GST_RANK_NONE,
       GST_TYPE_MSDKVPP);
diff --git a/sys/msdk/gstmsdkav1dec.c b/sys/msdk/gstmsdkav1dec.c
new file mode 100644
index 000000000..ccbfe4415
--- /dev/null
+++ b/sys/msdk/gstmsdkav1dec.c
@@ -0,0 +1,115 @@
+/* GStreamer Intel MSDK plugin
+ * Copyright (c) 2020, Intel Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGDECE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include "gstmsdkav1dec.h"
+#include "gstmsdkvideomemory.h"
+
+GST_DEBUG_CATEGORY_EXTERN (gst_msdkav1dec_debug);
+#define GST_CAT_DEFAULT gst_msdkav1dec_debug
+
+#define COMMON_FORMAT "{ NV12, P010_10LE, VUYA, Y410 }"
+
+static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("video/x-av1")
+    );
+
+static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS (GST_MSDK_CAPS_STR (COMMON_FORMAT, COMMON_FORMAT))
+    );
+
+#define gst_msdkav1dec_parent_class parent_class
+G_DEFINE_TYPE (GstMsdkAV1Dec, gst_msdkav1dec, GST_TYPE_MSDKDEC);
+
+static gboolean
+gst_msdkav1dec_configure (GstMsdkDec * decoder)
+{
+  decoder->param.mfx.CodecId = MFX_CODEC_AV1;
+  /* Replaced with width and height rounded up to 16 */
+  decoder->param.mfx.FrameInfo.Width =
+      GST_ROUND_UP_16 (decoder->param.mfx.FrameInfo.CropW);
+  decoder->param.mfx.FrameInfo.Height =
+      GST_ROUND_UP_16 (decoder->param.mfx.FrameInfo.CropH);
+
+  decoder->force_reset_on_res_change = FALSE;
+
+  return TRUE;
+}
+
+static gboolean
+gst_msdkav1dec_preinit_decoder (GstMsdkDec * decoder)
+{
+  decoder->param.mfx.FrameInfo.Width =
+      GST_ROUND_UP_16 (decoder->param.mfx.FrameInfo.Width);
+  decoder->param.mfx.FrameInfo.Height =
+      GST_ROUND_UP_16 (decoder->param.mfx.FrameInfo.Height);
+
+  decoder->param.mfx.FrameInfo.PicStruct =
+      decoder->param.mfx.FrameInfo.PicStruct ? decoder->param.mfx.
+      FrameInfo.PicStruct : MFX_PICSTRUCT_PROGRESSIVE;
+
+  return TRUE;
+}
+
+static void
+gst_msdkav1dec_class_init (GstMsdkAV1DecClass * klass)
+{
+  GstElementClass *element_class;
+  GstMsdkDecClass *decoder_class;
+
+  element_class = GST_ELEMENT_CLASS (klass);
+  decoder_class = GST_MSDKDEC_CLASS (klass);
+
+  decoder_class->configure = GST_DEBUG_FUNCPTR (gst_msdkav1dec_configure);
+  decoder_class->preinit_decoder =
+      GST_DEBUG_FUNCPTR (gst_msdkav1dec_preinit_decoder);
+
+  gst_element_class_set_static_metadata (element_class,
+      "Intel MSDK AV1 decoder",
+      "Codec/Decoder/Video/Hardware",
+      "AV1 video decoder based on Intel Media SDK",
+      "Haihao Xiang <haihao.xiang@intel.com>");
+
+  gst_element_class_add_static_pad_template (element_class, &sink_factory);
+  gst_element_class_add_static_pad_template (element_class, &src_factory);
+}
+
+static void
+gst_msdkav1dec_init (GstMsdkAV1Dec * thiz)
+{
+}
diff --git a/sys/msdk/gstmsdkav1dec.h b/sys/msdk/gstmsdkav1dec.h
new file mode 100644
index 000000000..3cb1ee404
--- /dev/null
+++ b/sys/msdk/gstmsdkav1dec.h
@@ -0,0 +1,67 @@
+/* GStreamer Intel MSDK plugin
+ * Copyright (c) 2020, Intel Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+ * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGDECE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __GST_MSDKAV1DEC_H__
+#define __GST_MSDKAV1DEC_H__
+
+#include "gstmsdkdec.h"
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_MSDKAV1DEC \
+  (gst_msdkav1dec_get_type())
+#define GST_MSDKAV1DEC(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_MSDKAV1DEC,GstMsdkAV1Dec))
+#define GST_MSDKAV1DEC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_MSDKAV1DEC,GstMsdkAV1DecClass))
+#define GST_IS_MSDKAV1DEC(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_MSDKAV1DEC))
+#define GST_IS_MSDKAV1DEC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_MSDKAV1DEC))
+
+typedef struct _GstMsdkAV1Dec GstMsdkAV1Dec;
+typedef struct _GstMsdkAV1DecClass GstMsdkAV1DecClass;
+
+struct _GstMsdkAV1Dec
+{
+  GstMsdkDec base;
+};
+
+struct _GstMsdkAV1DecClass
+{
+  GstMsdkDecClass parent_class;
+};
+
+GType gst_msdkav1dec_get_type (void);
+
+G_END_DECLS
+
+#endif /* __GST_MSDKAV1DEC_H__ */
diff --git a/sys/msdk/meson.build b/sys/msdk/meson.build
index 6346c9451..ce39800de 100644
--- a/sys/msdk/meson.build
+++ b/sys/msdk/meson.build
@@ -97,6 +97,21 @@ if have_mfx_ver126
   cdata.set10('USE_MSDK_VP9_ENC', 1)
 endif
 
+mfx_ver133_check_code = '''
+#include <mfxdefs.h>
+#if MFX_VERSION < 1033
+#error "The current version of mfx doesn't support AV1 decoding"
+#endif
+'''
+
+have_mfx_ver133 = cc.compiles(mfx_ver133_check_code,
+                include_directories : [configinc, mfx_inc])
+
+if have_mfx_ver133
+  msdk_sources += [ 'gstmsdkav1dec.c' ]
+  cdata.set10('USE_MSDK_AV1_DEC', 1)
+endif
+
 if host_machine.system() == 'windows'
   if cc.get_id() != 'msvc' and msdk_option.enabled()
     error('msdk plugin can only be built with MSVC')
-- 
2.17.1

