From 3143212e129ad544a698ee89357a85e6c14f837c Mon Sep 17 00:00:00 2001
From: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date: Thu, 28 Jul 2022 14:43:04 +0800
Subject: [PATCH] taprio: Add support for 'preempt' parameter

Adds the 'preempt' parameter to taprio, so the user can select which
traffic classes are marked as preemptible (1) and which are marked as
express (0).

Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 include/uapi/linux/pkt_sched.h |  1 +
 tc/q_taprio.c                  | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+)

diff --git a/include/uapi/linux/pkt_sched.h b/include/uapi/linux/pkt_sched.h
index f292b46..98d3c93 100644
--- a/include/uapi/linux/pkt_sched.h
+++ b/include/uapi/linux/pkt_sched.h
@@ -1245,6 +1245,7 @@ enum {
 	TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION, /* s64 */
 	TCA_TAPRIO_ATTR_FLAGS, /* u32 */
 	TCA_TAPRIO_ATTR_TXTIME_DELAY, /* u32 */
+	TCA_TAPRIO_ATTR_PREEMPT_TCS, /* u32 */
 	__TCA_TAPRIO_ATTR_MAX,
 };
 
diff --git a/tc/q_taprio.c b/tc/q_taprio.c
index e43db9d..a248148 100644
--- a/tc/q_taprio.c
+++ b/tc/q_taprio.c
@@ -158,6 +158,7 @@ static int taprio_parse_opt(struct qdisc_util *qu, int argc,
 	struct tc_mqprio_qopt opt = { };
 	__s64 cycle_time_extension = 0;
 	struct list_head sched_entries;
+	__u32 preempt = UINT32_MAX;
 	struct rtattr *tail, *l;
 	__u32 taprio_flags = 0;
 	__u32 txtime_delay = 0;
@@ -305,6 +306,16 @@ static int taprio_parse_opt(struct qdisc_util *qu, int argc,
 				return -1;
 			}
 
+		} else if (strcmp(*argv, "preempt") == 0) {
+			NEXT_ARG();
+			if (preempt != UINT32_MAX) {
+				fprintf(stderr, "taprio: duplicate \"preempt\" specification\n");
+				return -1;
+			}
+			if (get_u32(&preempt, *argv, 2)) {
+				PREV_ARG();
+				return -1;
+			}
 		} else if (strcmp(*argv, "help") == 0) {
 			explain();
 			return -1;
@@ -341,6 +352,10 @@ static int taprio_parse_opt(struct qdisc_util *qu, int argc,
 		addattr_l(n, 1024, TCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION,
 			  &cycle_time_extension, sizeof(cycle_time_extension));
 
+	if (preempt != UINT32_MAX)
+		addattr_l(n, 1024, TCA_TAPRIO_ATTR_PREEMPT_TCS,
+			  &preempt, sizeof(preempt));
+
 	l = addattr_nest(n, 1024, TCA_TAPRIO_ATTR_SCHED_ENTRY_LIST | NLA_F_NESTED);
 
 	err = add_sched_list(&sched_entries, n);
@@ -435,6 +450,7 @@ static int taprio_print_opt(struct qdisc_util *qu, FILE *f, struct rtattr *opt)
 	struct rtattr *tb[TCA_TAPRIO_ATTR_MAX + 1];
 	struct tc_mqprio_qopt *qopt = 0;
 	__s32 clockid = CLOCKID_INVALID;
+	__u32 preempt = UINT32_MAX;
 	int i;
 
 	if (opt == NULL)
@@ -467,6 +483,22 @@ static int taprio_print_opt(struct qdisc_util *qu, FILE *f, struct rtattr *opt)
 
 	print_nl();
 
+	if (tb[TCA_TAPRIO_ATTR_PREEMPT_TCS])
+		preempt = rta_getattr_u32(tb[TCA_TAPRIO_ATTR_PREEMPT_TCS]);
+
+	if (preempt != UINT32_MAX) {
+		open_json_array(PRINT_ANY, "preemptible");
+		for (i = 0; i < TC_QOPT_MAX_QUEUE; i++) {
+			open_json_object(NULL);
+			bool preemptible = preempt & BIT(i);
+			print_uint(PRINT_ANY, "queue", " %d", preemptible);
+			close_json_object();
+		}
+		close_json_array(PRINT_ANY, "");
+
+		print_nl();
+	}
+
 	if (tb[TCA_TAPRIO_ATTR_SCHED_CLOCKID])
 		clockid = rta_getattr_s32(tb[TCA_TAPRIO_ATTR_SCHED_CLOCKID]);
 
-- 
2.17.1

