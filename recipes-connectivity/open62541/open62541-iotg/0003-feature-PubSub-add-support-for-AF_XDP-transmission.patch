From e923899a538a5281a560e5a572c19601ac70351a Mon Sep 17 00:00:00 2001
From: "Wong, Vincent Por Yin" <vincent.por.yin.wong@intel.com>
Date: Fri, 17 Apr 2020 14:00:01 +0800
Subject: [PATCH] feature(PubSub): add support for AF_XDP transmission

Previous implementation only provided AF_XDP for receiving, the
transmission was still using the default ua_pubsub_ethernet's
AF_PACKET transmission.

Signed-off-by: Wong, Vincent Por Yin <vincent.por.yin.wong@intel.com>
---
 plugins/ua_pubsub_ethernet_xdp.c | 94 ++++++++++++++++++++++++++++++++
 1 file changed, 94 insertions(+)

diff --git a/plugins/ua_pubsub_ethernet_xdp.c b/plugins/ua_pubsub_ethernet_xdp.c
index 6b10c403..9331fb5a 100644
--- a/plugins/ua_pubsub_ethernet_xdp.c
+++ b/plugins/ua_pubsub_ethernet_xdp.c
@@ -42,6 +42,9 @@
 #define ETHERTYPE_UADP 0xb62c
 #endif
 
+#define VLAN_SHIFT 13
+#define XDP_FRAME_SHIFT 11 //match the frame size 2048
+
 typedef struct {
     char                    *frames;
     struct xsk_ring_prod    fq;
@@ -478,6 +481,96 @@ UA_PubSubChannelEthernetXDP_release(UA_PubSubChannel *channel) {
     return UA_STATUSCODE_GOOD;
 }
 
+/**
+ * Send messages to the connection defined address
+ *
+ * @return UA_STATUSCODE_GOOD if success
+ */
+static UA_StatusCode
+UA_PubSubChannelEthernetXDP_send(UA_PubSubChannel *channel,
+                                 UA_ExtensionObject *transportSettings,
+                                 const UA_ByteString *buf) {
+    UA_PubSubChannelDataEthernetXDP *channelDataEthernetXDP;
+    struct ether_header* ethHdr;
+    UA_Byte *bufSend, *ptr;
+    xdpsock *xdp_socket;
+    UA_UInt16 vlanTag;
+    UA_UInt32 idx;
+    size_t lenBuf;
+    ssize_t rc;
+
+    channelDataEthernetXDP = (UA_PubSubChannelDataEthernetXDP *) channel->handle;
+    xdp_socket = channelDataEthernetXDP->xdpsocket;
+
+    bufSend = (UA_Byte *) xsk_umem__get_data(xdp_socket->umem->buffer,
+                                             xdp_socket->cur_tx << XDP_FRAME_SHIFT);
+
+    ethHdr = (struct ether_header *) bufSend;
+
+    /* Set (own) source MAC address */
+    memcpy(ethHdr->ether_shost, channelDataEthernetXDP->ifAddress, ETH_ALEN);
+
+    /* Set destination MAC address */
+    memcpy(ethHdr->ether_dhost, channelDataEthernetXDP->targetAddress, ETH_ALEN);
+
+    /* Set ethertype */
+    lenBuf = sizeof(*ethHdr) + buf->length;
+    ptr = sizeof(*ethHdr) + bufSend;
+
+    if(channelDataEthernetXDP->vid > 0) {
+        lenBuf += 4;
+        ethHdr->ether_type = htons(ETHERTYPE_VLAN);
+        vlanTag = (UA_UInt16) (channelDataEthernetXDP->vid
+                  + (channelDataEthernetXDP->prio << VLAN_SHIFT));
+
+        *((UA_UInt16 *) ptr) = htons(vlanTag);
+        ptr += sizeof(UA_UInt16);
+
+        *((UA_UInt16 *) ptr) = htons(ETHERTYPE_UADP);
+        ptr += sizeof(UA_UInt16);
+    } else {
+        ethHdr->ether_type = htons(ETHERTYPE_UADP);
+    }
+
+    if (lenBuf > default_values.frame_size)
+        return UA_STATUSCODE_BADINTERNALERROR;
+
+    /* copy payload of ethernet message */
+    memcpy(ptr, buf->data, buf->length);
+
+    if (xsk_ring_prod__reserve(&xdp_socket->tx_ring, 1, &idx) != 1){
+        UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,
+                     "PubSub connection send failed. xsk_prod_reserve failed.");
+        return UA_STATUSCODE_BADINTERNALERROR;
+    }
+
+    xsk_ring_prod__tx_desc(&xdp_socket->tx_ring, idx)->addr = xdp_socket->cur_tx << XDP_FRAME_SHIFT;
+    xsk_ring_prod__tx_desc(&xdp_socket->tx_ring, idx)->len = (UA_UInt32) lenBuf;
+
+    xsk_ring_prod__submit(&xdp_socket->tx_ring, 1);
+    xdp_socket->outstanding_tx += 1;
+
+    /* Increase the cur_tx pointer, rollover if exceed */
+    xdp_socket->cur_tx += 1;
+    xdp_socket->cur_tx %= default_values.frame_size;
+
+    rc = UA_sendto(xsk_socket__fd(xdp_socket->xskfd), NULL, 0, MSG_DONTWAIT, NULL, 0);
+    if (rc >= 0 || errno == ENOBUFS || errno == EAGAIN || errno == EBUSY) {
+        UA_UInt64 rcvd = xsk_ring_cons__peek(&xdp_socket->umem->cq, 1, &idx);
+        if (rcvd > 0) {
+            xsk_ring_cons__release(&xdp_socket->umem->cq, rcvd);
+            xdp_socket->outstanding_tx -= (UA_UInt32) rcvd;
+            xdp_socket->tx_npkts += (UA_UInt32) rcvd;
+        }
+
+        return UA_STATUSCODE_GOOD;
+    }
+
+    UA_LOG_ERROR(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,
+                 "PubSub connection send failed."
+                 " XSK Send message failed: %s", strerror(errno));
+    return UA_STATUSCODE_BADINTERNALERROR;
+}
 
 /**
  * Close channel and free the channel data.
@@ -509,6 +602,7 @@ TransportLayerEthernetXDP_addChannel(UA_PubSubConnectionConfig *connectionConfig
     UA_PubSubChannel * pubSubChannel = UA_PubSubChannelEthernetXDP_open(connectionConfig);
     if(pubSubChannel) {
         pubSubChannel->receive = UA_PubSubChannelEthernetXDP_receive;
+        pubSubChannel->send = UA_PubSubChannelEthernetXDP_send;
         pubSubChannel->close = UA_PubSubChannelEthernetXDP_close;
         pubSubChannel->release = UA_PubSubChannelEthernetXDP_release;
         pubSubChannel->connectionConfig = connectionConfig;
-- 
2.17.0

