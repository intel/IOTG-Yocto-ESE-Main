From 89ddc20ec894223c23b8ec9de88bd13e964aa41b Mon Sep 17 00:00:00 2001
From: Voon Weifeng <weifeng.voon@intel.com>
Date: Thu, 7 Nov 2019 16:32:38 +0800
Subject: [PATCH 3/3] HOTFIX: net: stmmac: added phy ingress and egress path
 latency

Phy path latency will contribute to the total link path delay.
Hence, the actual tx hw timestamp will be the tx hw timestamp by MAC
subtract the phy tx path latency. On other hand, the actual rx hw timestamp
will be the rx hw timestamp by MAC add with the phy rx path latency.
The EHL new platform data phy path latency values are based on the
Marvell 88E1512 PHY.

Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  8 +++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 30 +++++++++++++++++++
 .../net/ethernet/stmicro/stmmac/stmmac_pci.c  |  8 +++++
 include/linux/stmmac.h                        |  7 +++++
 4 files changed, 53 insertions(+)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 5648e1761a48..4558d6c38ff5 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -305,6 +305,14 @@ struct stmmac_priv {
 	/* AF_XDP zero-copy */
 	unsigned long af_xdp_zc_qps; /* tracks AF_XDP ZC enabled qps */
 	struct xdp_umem **xsk_umems;
+
+	/* TX and RX PHY latency (ns) */
+	u64 phy_tx_latency_1000;
+	u64 phy_tx_latency_100;
+	u64 phy_tx_latency_10;
+	u64 phy_rx_latency_1000;
+	u64 phy_rx_latency_100;
+	u64 phy_rx_latency_10;
 };
 
 enum stmmac_state {
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 47c329c38622..946bffe47894 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -429,6 +429,7 @@ static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
 {
 	struct skb_shared_hwtstamps shhwtstamp;
 	bool found = false;
+	u64 adjust = 0;
 	u64 ns = 0;
 
 	if (!priv->hwts_tx_en)
@@ -447,8 +448,22 @@ static void stmmac_get_tx_hwtstamp(struct stmmac_priv *priv,
 	}
 
 	if (found) {
+		switch (priv->speed) {
+		case SPEED_10:
+			adjust = priv->plat->phy_tx_latency_10;
+			break;
+		case SPEED_100:
+			adjust = priv->plat->phy_tx_latency_100;
+			break;
+		case SPEED_1000:
+			adjust = priv->plat->phy_tx_latency_1000;
+			break;
+		}
+
+		ns += adjust;
 		memset(&shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
 		shhwtstamp.hwtstamp = ns_to_ktime(ns);
+		shhwtstamp.hwtstamp = ktime_add_ns(shhwtstamp.hwtstamp, adjust);
 
 		netdev_dbg(priv->dev, "get valid TX hw timestamp %llu\n", ns);
 		/* pass tstamp to stack */
@@ -470,6 +485,7 @@ void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
 {
 	struct skb_shared_hwtstamps *shhwtstamp = NULL;
 	struct dma_desc *desc = p;
+	u64 adjust = 0;
 	u64 ns = 0;
 
 	if (!priv->hwts_rx_en)
@@ -481,6 +497,20 @@ void stmmac_get_rx_hwtstamp(struct stmmac_priv *priv, struct dma_desc *p,
 	/* Check if timestamp is available */
 	if (stmmac_get_rx_timestamp_status(priv, p, np, priv->adv_ts)) {
 		stmmac_get_timestamp(priv, desc, priv->adv_ts, &ns);
+
+		switch (priv->speed) {
+		case SPEED_10:
+			adjust = priv->plat->phy_rx_latency_10;
+			break;
+		case SPEED_100:
+			adjust = priv->plat->phy_rx_latency_100;
+			break;
+		case SPEED_1000:
+			adjust = priv->plat->phy_rx_latency_1000;
+			break;
+		}
+
+		ns -= adjust;
 		netdev_dbg(priv->dev, "get valid RX hw timestamp %llu\n", ns);
 		shhwtstamp = skb_hwtstamps(skb);
 		memset(shhwtstamp, 0, sizeof(struct skb_shared_hwtstamps));
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
index f2891f168ce8..afcdfe9efb1a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_pci.c
@@ -294,6 +294,14 @@ static int ehl_common_data(struct pci_dev *pdev,
 	/* Maximum TX XDP queue */
 	plat->max_combined = 4;
 
+	/* TX and RX PHY latency (ns) */
+	plat->phy_tx_latency_10 = 6066;
+	plat->phy_tx_latency_100 = 657;
+	plat->phy_tx_latency_1000 = 224;
+	plat->phy_rx_latency_10 = 2130;
+	plat->phy_rx_latency_100 = 362;
+	plat->phy_rx_latency_1000 = 231;
+
 	ret = intel_mgbe_common_data(pdev, plat);
 	if (ret)
 		return ret;
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index bffc7ef09d8f..9a5d54fde748 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -233,5 +233,12 @@ struct plat_stmmacenet_data {
 	bool has_safety_feat;
 	bool is_hfpga;
 	bool ehl_ao_wa;
+	/* TX and RX PHY latency (ns) */
+	u64 phy_tx_latency_1000;
+	u64 phy_tx_latency_100;
+	u64 phy_tx_latency_10;
+	u64 phy_rx_latency_1000;
+	u64 phy_rx_latency_100;
+	u64 phy_rx_latency_10;
 };
 #endif
-- 
2.20.1

