From 97369db7aa2bc8e9448bfbe00b95f6dc0280caf1 Mon Sep 17 00:00:00 2001
From: "Mohamad Azman, Syaza Athirah" <syaza.athirah.mohamad.azman@intel.com>
Date: Mon, 18 Nov 2019 10:01:29 -0500
Subject: [PATCH] iommu: skip invalidate queue fault check

Modified to use boot parameter intel_iommu=skip_qi_fault_check.

Signed-off-by: Bing Han <bing.han@intel.com>
Signed-off-by: Mohamad Azman, Syaza Athirah <syaza.athirah.mohamad.azman@intel.com>
---
 drivers/iommu/dmar.c        | 9 +++++----
 drivers/iommu/intel-iommu.c | 6 ++++++
 include/linux/intel-iommu.h | 1 +
 3 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/drivers/iommu/dmar.c b/drivers/iommu/dmar.c
index 5d0754ed5fa0..c72a3b042472 100644
--- a/drivers/iommu/dmar.c
+++ b/drivers/iommu/dmar.c
@@ -1271,10 +1271,11 @@ int qi_submit_sync(struct qi_desc *desc, struct intel_iommu *iommu)
 		 * a deadlock where the interrupt context can wait indefinitely
 		 * for free slots in the queue.
 		 */
-		rc = qi_check_fault(iommu, index);
-		if (rc)
-			break;
-
+		if (!intel_skip_qi_fault_check) {
+			rc = qi_check_fault(iommu, index);
+			if (rc)
+				break;
+		}
 		raw_spin_unlock(&qi->q_lock);
 		cpu_relax();
 		raw_spin_lock(&qi->q_lock);
diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index c4e0e4a9ee9e..d0b0de788fde 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -357,6 +357,9 @@ int intel_iommu_sm;
 int intel_iommu_enabled = 0;
 EXPORT_SYMBOL_GPL(intel_iommu_enabled);
 
+int intel_skip_qi_fault_check = 0;
+EXPORT_SYMBOL_GPL(intel_skip_qi_fault_check);
+
 static int dmar_map_gfx = 1;
 static int dmar_forcedac;
 static int intel_iommu_strict;
@@ -453,6 +456,9 @@ static int __init intel_iommu_setup(char *str)
 		} else if (!strncmp(str, "sm_on", 5)) {
 			pr_info("Intel-IOMMU: scalable mode supported\n");
 			intel_iommu_sm = 1;
+		} else if (!strncmp(str, "skip_qi_fault_check", 19)) {
+                        pr_info("Intel-IOMMU: Skipping queue invalidation fault check\n");
+                        intel_skip_qi_fault_check = 1;
 		} else if (!strncmp(str, "tboot_noforce", 13)) {
 			printk(KERN_INFO
 				"Intel-IOMMU: not forcing on after tboot. This could expose security risk for tboot\n");
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index 4fc6454f7ebb..4feb228b9933 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -701,6 +701,7 @@ extern int iommu_calculate_max_sagaw(struct intel_iommu *iommu);
 extern int dmar_disabled;
 extern int intel_iommu_enabled;
 extern int intel_iommu_tboot_noforce;
+extern int intel_skip_qi_fault_check;
 #else
 static inline int iommu_calculate_agaw(struct intel_iommu *iommu)
 {
-- 
2.17.1

