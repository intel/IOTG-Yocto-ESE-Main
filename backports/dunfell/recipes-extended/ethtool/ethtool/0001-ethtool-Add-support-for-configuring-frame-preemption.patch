From 50050cf91a0a043aa6dd9958ed53dec6930be520 Mon Sep 17 00:00:00 2001
From: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date: Mon, 8 Feb 2021 15:42:20 -0800
Subject: [PATCH 2/3] ethtool: Add support for configuring frame preemption

The configuration knobs that can be set are:
  - enabling/disabling frame preemption per-device;
  - configuring the additional fragment size;

The values that can be retrieved from the hardware are:
  - if frame preemption is enabled;
  - the current additional fragment size;

Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 ethtool-copy.h | 17 +++++++++++
 ethtool.c      | 81 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 98 insertions(+)

diff --git a/ethtool-copy.h b/ethtool-copy.h
index 9afd2e6..986dc9f 100644
--- a/ethtool-copy.h
+++ b/ethtool-copy.h
@@ -367,6 +367,20 @@ struct ethtool_eee {
 	__u32	reserved[2];
 };
 
+/**
+ * struct ethtool_fp - Frame Preemption information
+ * @cmd: ETHTOOL_{G,S}FP
+ * @fp_enabled: If frame preemption should be advertised to the link partner
+ *	as enabled.
+ * @add_frag_size: Minimum size for all non-final fragment size.
+ */
+struct ethtool_fp {
+	__u32	cmd;
+	__u8	fp_enabled;
+	__u32	add_frag_size;
+	__u32	reserved[2];
+};
+
 /**
  * struct ethtool_modinfo - plugin module eeprom information
  * @cmd: %ETHTOOL_GMODULEINFO
@@ -1422,6 +1436,9 @@ enum ethtool_fec_config_bits {
 #define ETHTOOL_GFECPARAM	0x00000050 /* Get FEC settings */
 #define ETHTOOL_SFECPARAM	0x00000051 /* Set FEC settings */
 
+#define ETHTOOL_GFP		0x00000052 /* Get Frame Preemption settings */
+#define ETHTOOL_SFP		0x00000053 /* Set Frame Preemption settings */
+
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
 #define SPARC_ETH_SSET		ETHTOOL_SSET
diff --git a/ethtool.c b/ethtool.c
index 3e40365..232d51e 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -1699,6 +1699,18 @@ static void dump_fec(u32 fec)
 		fprintf(stdout, " RS");
 }
 
+static void dump_fpcmd(struct ethtool_fp *fpcmd)
+{
+	fprintf(stdout, "	status: ");
+	if (fpcmd->fp_enabled)
+		fprintf(stdout, "enabled\n");
+	else
+		fprintf(stdout, "disabled\n");
+
+	fprintf(stdout, "	additional fragment size: %d\n",
+		fpcmd->add_frag_size);
+}
+
 #define N_SOTS 7
 
 static char *so_timestamping_labels[N_SOTS] = {
@@ -4851,6 +4863,70 @@ static int do_seee(struct cmd_context *ctx)
 	return 0;
 }
 
+static int do_get_preempt(struct cmd_context *ctx)
+{
+	struct ethtool_fp fpcmd;
+
+	if (ctx->argc != 0)
+		exit_bad_args();
+
+	fpcmd.cmd = ETHTOOL_GFP;
+	if (send_ioctl(ctx, &fpcmd)) {
+		perror("Cannot get frame preemption settings");
+		return 1;
+	}
+
+	fprintf(stdout, "Frame preemption Settings for %s:\n", ctx->devname);
+	dump_fpcmd(&fpcmd);
+
+	return 0;
+}
+
+static int do_set_preempt(struct cmd_context *ctx)
+{
+	int fp_c = -1, add_frag_c = -1;
+	int change = -1;
+	struct ethtool_fp fpcmd;
+	struct cmdline_info cmdline_fp[] = {
+		{
+			.name = "fp",
+			.type = CMDL_BOOL,
+			.wanted_val = &fp_c,
+			.ioctl_val = &fpcmd.fp_enabled
+		},
+		{
+			.name = "add-frag-size",
+			.type = CMDL_U32,
+			.wanted_val = &add_frag_c,
+			.ioctl_val = &fpcmd.add_frag_size
+		},
+	};
+
+	if (ctx->argc == 0)
+		exit_bad_args();
+
+	parse_generic_cmdline(ctx, &change, cmdline_fp,
+			      ARRAY_SIZE(cmdline_fp));
+
+	fpcmd.cmd = ETHTOOL_GFP;
+	if (send_ioctl(ctx, &fpcmd)) {
+		perror("Cannot get frame preemption settings");
+		return 1;
+	}
+
+	do_generic_set(cmdline_fp, ARRAY_SIZE(cmdline_fp), &change);
+
+	if (change) {
+		fpcmd.cmd = ETHTOOL_SFP;
+		if (send_ioctl(ctx, &fpcmd)) {
+			perror("Cannot set frame preemption settings");
+			return 1;
+		}
+	}
+
+	return 0;
+}
+
 static int do_get_phy_tunable(struct cmd_context *ctx)
 {
 	int argc = ctx->argc;
@@ -5445,6 +5521,11 @@ static const struct option {
 	  "		[ advertise %x ]\n"
 	  "		[ tx-lpi on|off ]\n"
 	  "		[ tx-timer %d ]\n"},
+	{ "--show-frame-preemption", 1, do_get_preempt, "Show Frame Preemption settings" },
+	{ "--set-frame-preemption", 1, do_set_preempt, "Set Frame Preemption settings",
+	  "		[ fp on|off ]\n"
+	  "		[ preemptible-queues-mask %x ]\n"
+	  "		[ min-frag-size %d ]\n" },
 	{ "--set-phy-tunable", 1, do_set_phy_tunable, "Set PHY tunable",
 	  "		[ downshift on|off [count N] ]\n"
 	  "		[ fast-link-down on|off [msecs N] ]\n"
-- 
2.17.1

