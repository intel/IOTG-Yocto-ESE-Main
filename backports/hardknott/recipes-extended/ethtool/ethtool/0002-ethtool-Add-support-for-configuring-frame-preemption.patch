From 033bab2e36cf47d4afa0adfa3e59b246f0286d4c Mon Sep 17 00:00:00 2001
From: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date: Mon, 8 Feb 2021 15:44:25 -0800
Subject: [PATCH 2/4] ethtool: Add support for configuring frame preemption via
 netlink

Adds the same functionality of the ETHTOOL_{G,S}FP commands, now via
the ETHTOOL_MSG_PREEMPT_{GET,SET} netlink messages.

Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 Makefile.am                  |   1 +
 ethtool.c                    |   2 +
 netlink/desc-ethtool.c       |   9 +++
 netlink/extapi.h             |   4 +
 netlink/preempt.c            | 138 +++++++++++++++++++++++++++++++++++
 uapi/linux/ethtool_netlink.h |  17 +++++
 6 files changed, 171 insertions(+)
 create mode 100644 netlink/preempt.c

diff --git a/Makefile.am b/Makefile.am
index e3e311d..c819025 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -38,6 +38,7 @@ ethtool_SOURCES += \
 		  netlink/eee.c netlink/tsinfo.c \
 		  netlink/desc-ethtool.c netlink/desc-genlctrl.c \
 		  netlink/desc-rtnl.c netlink/cable_test.c netlink/tunnels.c \
+		  netlink/preempt.c \
 		  uapi/linux/ethtool_netlink.h \
 		  uapi/linux/netlink.h uapi/linux/genetlink.h \
 		  uapi/linux/rtnetlink.h uapi/linux/if_link.h
diff --git a/ethtool.c b/ethtool.c
index ae5a4e6..084a6e1 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -6050,11 +6050,13 @@ static const struct option args[] = {
 	{
 		.opts	= "--show-frame-preemption",
 		.func	= do_get_preempt,
+		.nlfunc	= nl_get_preempt,
 		.help	= "Show Frame Preemption settings",
 	},
 	{
 		.opts	= "--set-frame-preemption",
 		.func	= do_set_preempt,
+		.nlfunc	= nl_set_preempt,
 		.help	= "Set Frame Preemption settings",
 		.xhelp	= "		[ fp on|off ]\n"
 			  "		[ preemptible-queues-mask %x ]\n"
diff --git a/netlink/desc-ethtool.c b/netlink/desc-ethtool.c
index 96291b9..46c7c13 100644
--- a/netlink/desc-ethtool.c
+++ b/netlink/desc-ethtool.c
@@ -317,6 +317,13 @@ const struct pretty_nla_desc __tunnel_info_desc[] = {
 	NLATTR_DESC_NESTED(ETHTOOL_A_TUNNEL_INFO_UDP_PORTS, tunnel_udp),
 };
 
+static const struct pretty_nla_desc __preempt_desc[] = {
+	NLATTR_DESC_INVALID(ETHTOOL_A_PREEMPT_UNSPEC),
+	NLATTR_DESC_NESTED(ETHTOOL_A_PREEMPT_HEADER, header),
+	NLATTR_DESC_U8(ETHTOOL_A_PREEMPT_ENABLED),
+	NLATTR_DESC_U32(ETHTOOL_A_PREEMPT_ADD_FRAG_SIZE),
+};
+
 const struct pretty_nlmsg_desc ethnl_umsg_desc[] = {
 	NLMSG_DESC_INVALID(ETHTOOL_MSG_USER_NONE),
 	NLMSG_DESC(ETHTOOL_MSG_STRSET_GET, strset),
@@ -347,6 +354,8 @@ const struct pretty_nlmsg_desc ethnl_umsg_desc[] = {
 	NLMSG_DESC(ETHTOOL_MSG_CABLE_TEST_ACT, cable_test),
 	NLMSG_DESC(ETHTOOL_MSG_CABLE_TEST_TDR_ACT, cable_test_tdr),
 	NLMSG_DESC(ETHTOOL_MSG_TUNNEL_INFO_GET, tunnel_info),
+	NLMSG_DESC(ETHTOOL_MSG_PREEMPT_GET, preempt),
+	NLMSG_DESC(ETHTOOL_MSG_PREEMPT_SET, preempt),
 };
 
 const unsigned int ethnl_umsg_n_desc = ARRAY_SIZE(ethnl_umsg_desc);
diff --git a/netlink/extapi.h b/netlink/extapi.h
index 761cafb..b316655 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -39,6 +39,8 @@ int nl_cable_test(struct cmd_context *ctx);
 int nl_cable_test_tdr(struct cmd_context *ctx);
 int nl_gtunnels(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
+int nl_get_preempt(struct cmd_context *ctx);
+int nl_set_preempt(struct cmd_context *ctx);
 
 void nl_monitor_usage(void);
 
@@ -87,6 +89,8 @@ static inline void nl_monitor_usage(void)
 #define nl_cable_test		NULL
 #define nl_cable_test_tdr	NULL
 #define nl_gtunnels		NULL
+#define nl_get_preempt		NULL
+#define nl_set_preempt		NULL
 
 #endif /* ETHTOOL_ENABLE_NETLINK */
 
diff --git a/netlink/preempt.c b/netlink/preempt.c
new file mode 100644
index 0000000..552615e
--- /dev/null
+++ b/netlink/preempt.c
@@ -0,0 +1,138 @@
+/*
+ * preempt.c - netlink implementation of frame preemption settings
+ *
+ * Implementation of "ethtool --{show,set}-frame-preemption <dev>"
+ */
+
+#include <errno.h>
+#include <string.h>
+#include <stdio.h>
+#include <linux/rtnetlink.h>
+#include <linux/if_link.h>
+
+#include "../internal.h"
+#include "../common.h"
+#include "netlink.h"
+#include "parser.h"
+
+/* PREEMPT_GET */
+
+static int preempt_get_prep_request(struct nl_socket *nlsk)
+{
+	int ret;
+
+	ret = nlsock_prep_get_request(nlsk, ETHTOOL_MSG_PREEMPT_GET,
+				      ETHTOOL_A_PREEMPT_HEADER, 0);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+int preempt_get_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHTOOL_A_PREEMPT_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	int ret;
+
+	if (nlctx->is_dump || nlctx->is_monitor)
+		nlctx->no_banner = false;
+
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+
+	nlctx->devname = get_dev_name(tb[ETHTOOL_A_PREEMPT_HEADER]);
+	if (!dev_ok(nlctx))
+		return MNL_CB_OK;
+
+	printf("Frame preemption settings for %s:\n", nlctx->devname);
+
+	if (tb[ETHTOOL_A_PREEMPT_ENABLED]) {
+		int active = mnl_attr_get_u8(tb[ETHTOOL_A_PREEMPT_ENABLED]);
+
+		printf("\tenabled: %s\n", active ? "enabled" : "not enabled");
+	}
+	if (tb[ETHTOOL_A_PREEMPT_ADD_FRAG_SIZE]) {
+		uint32_t add_frag_size = mnl_attr_get_u32(
+			tb[ETHTOOL_A_PREEMPT_ADD_FRAG_SIZE]);
+
+		printf("\tadditional fragment size: %d\n", add_frag_size);
+	}
+	return MNL_CB_OK;
+}
+
+int nl_get_preempt(struct cmd_context *ctx)
+{
+	struct nl_context *nlctx = ctx->nlctx;
+	struct nl_socket *nlsk = nlctx->ethnl_socket;
+	int ret;
+
+	ret = preempt_get_prep_request(nlsk);
+	if (ret < 0)
+		return ret;
+	return nlsock_send_get_request(nlsk, preempt_get_reply_cb);
+}
+
+static const struct lookup_entry_u8 fp_values[] = {
+	{ .arg = "off",		.val = 0 },
+	{ .arg = "on",		.val = 1 },
+	{}
+};
+
+static const struct param_parser set_preempt_params[] = {
+	{
+		.arg		= "fp",
+		.group		= ETHTOOL_MSG_PREEMPT_SET,
+		.type		= ETHTOOL_A_PREEMPT_ENABLED,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= fp_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "add-frag-size",
+		.group		= ETHTOOL_MSG_PREEMPT_SET,
+		.type		= ETHTOOL_A_PREEMPT_ADD_FRAG_SIZE,
+		.handler	= nl_parse_direct_u32,
+		.min_argc	= 1,
+	},
+	{}
+};
+
+int nl_set_preempt(struct cmd_context *ctx)
+{
+	struct nl_context *nlctx = ctx->nlctx;
+	struct nl_msg_buff *msgbuff;
+	struct nl_socket *nlsk;
+
+	int ret;
+
+	nlctx->cmd = "--set-frame-preemption";
+	nlctx->argp = ctx->argp;
+	nlctx->argc = ctx->argc;
+	nlctx->devname = ctx->devname;
+	nlsk = nlctx->ethnl_socket;
+	msgbuff = &nlsk->msgbuff;
+
+	ret = msg_init(nlctx, msgbuff, ETHTOOL_MSG_PREEMPT_SET,
+		       NLM_F_REQUEST | NLM_F_ACK);
+	if (ret < 0)
+		return 2;
+	if (ethnla_fill_header(msgbuff, ETHTOOL_A_PREEMPT_HEADER,
+			       ctx->devname, 0))
+		return -EMSGSIZE;
+
+	ret = nl_parser(nlctx, set_preempt_params, NULL, PARSER_GROUP_NONE, NULL);
+	if (ret < 0)
+		return 1;
+
+	ret = nlsock_sendmsg(nlsk, NULL);
+	if (ret < 0)
+		return 81;
+	ret = nlsock_process_reply(nlsk, nomsg_reply_cb, nlctx);
+	if (ret == 0)
+		return 0;
+	else
+		return nlctx->exit_code ?: 81;
+}
diff --git a/uapi/linux/ethtool_netlink.h b/uapi/linux/ethtool_netlink.h
index c022883..ce749d7 100644
--- a/uapi/linux/ethtool_netlink.h
+++ b/uapi/linux/ethtool_netlink.h
@@ -42,6 +42,8 @@ enum {
 	ETHTOOL_MSG_CABLE_TEST_ACT,
 	ETHTOOL_MSG_CABLE_TEST_TDR_ACT,
 	ETHTOOL_MSG_TUNNEL_INFO_GET,
+	ETHTOOL_MSG_PREEMPT_GET,
+	ETHTOOL_MSG_PREEMPT_SET,
 
 	/* add new constants above here */
 	__ETHTOOL_MSG_USER_CNT,
@@ -80,6 +82,8 @@ enum {
 	ETHTOOL_MSG_CABLE_TEST_NTF,
 	ETHTOOL_MSG_CABLE_TEST_TDR_NTF,
 	ETHTOOL_MSG_TUNNEL_INFO_GET_REPLY,
+	ETHTOOL_MSG_PREEMPT_GET_REPLY,
+	ETHTOOL_MSG_PREEMPT_NTF,
 
 	/* add new constants above here */
 	__ETHTOOL_MSG_KERNEL_CNT,
@@ -628,6 +632,19 @@ enum {
 	ETHTOOL_A_TUNNEL_INFO_MAX = (__ETHTOOL_A_TUNNEL_INFO_CNT - 1)
 };
 
+/* FRAME PREEMPTION */
+
+enum {
+	ETHTOOL_A_PREEMPT_UNSPEC,
+	ETHTOOL_A_PREEMPT_HEADER,			/* nest - _A_HEADER_* */
+	ETHTOOL_A_PREEMPT_ENABLED,			/* u8 */
+	ETHTOOL_A_PREEMPT_ADD_FRAG_SIZE,		/* u32 */
+
+	/* add new constants above here */
+	__ETHTOOL_A_PREEMPT_CNT,
+	ETHTOOL_A_PREEMPT_MAX = (__ETHTOOL_A_PREEMPT_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
-- 
2.17.1

