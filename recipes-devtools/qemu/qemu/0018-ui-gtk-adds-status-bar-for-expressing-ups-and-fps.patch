From 4e363fa4a89bce52519039676691dd27462914af Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Mon, 5 Feb 2024 14:32:47 -0800
Subject: [PATCH 18/30] ui/gtk: adds status bar for expressing ups and fps

With a display option, "show-fps=on", qemu adds a status bar and print
following performance numbers on the bar,

ups = update per seconds - the rate the guest scanout is updated.
fps = frame per seconds - the frame rate of VC's GL drawing area

One function, gd_gl_count_frame is added to count # frames
and calculate ups and fps every 100 frames or guest scanout updates.
(rebased for 7.1.0)

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 include/ui/console.h |  4 ++++
 include/ui/gtk.h     |  2 ++
 qapi/ui.json         |  6 +++++-
 ui/console.c         | 17 +++++++++++++++
 ui/gtk-egl.c         |  2 ++
 ui/gtk-gl-area.c     |  1 +
 ui/gtk.c             | 51 ++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 82 insertions(+), 1 deletion(-)

diff --git a/include/ui/console.h b/include/ui/console.h
index a4a49ffc64..2dda4e0866 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -285,6 +285,8 @@ typedef struct DisplayChangeListenerOps {
     /* required if GL */
     void (*dpy_gl_update)(DisplayChangeListener *dcl,
                           uint32_t x, uint32_t y, uint32_t w, uint32_t h);
+    /* optional */
+    void (*dpy_gl_count_frame)(DisplayChangeListener *dcl, bool ups);
 
 } DisplayChangeListenerOps;
 
@@ -363,6 +365,8 @@ void dpy_gl_release_dmabuf(QemuConsole *con,
 void dpy_gl_update(QemuConsole *con,
                    uint32_t x, uint32_t y, uint32_t w, uint32_t h);
 
+void dpy_gl_count_frame(QemuConsole *con, bool ups);
+
 QEMUGLContext dpy_gl_ctx_create(QemuConsole *con,
                                 QEMUGLParams *params);
 void dpy_gl_ctx_destroy(QemuConsole *con, QEMUGLContext ctx);
diff --git a/include/ui/gtk.h b/include/ui/gtk.h
index 0b302c55f5..691ec38f8f 100644
--- a/include/ui/gtk.h
+++ b/include/ui/gtk.h
@@ -126,6 +126,7 @@ struct GtkDisplayState {
     GtkWidget *show_tabs_item;
     GtkWidget *untabify_item;
     GtkWidget *show_menubar_item;
+    GtkWidget *status_bar;
 
     GtkWidget *vbox;
     GtkWidget *notebook;
@@ -160,6 +161,7 @@ extern bool gtk_use_gl_area;
 void gd_update_windowsize(VirtualConsole *vc);
 void gd_update_monitor_refresh_rate(VirtualConsole *vc, GtkWidget *widget);
 void gd_hw_gl_flushed(void *vc);
+void gd_gl_count_frame(DisplayChangeListener *dcl, bool ups);
 
 /* ui/gtk-egl.c */
 void gd_egl_init(VirtualConsole *vc);
diff --git a/qapi/ui.json b/qapi/ui.json
index dbb8f8ce6f..9d3e14b86e 100644
--- a/qapi/ui.json
+++ b/qapi/ui.json
@@ -1540,6 +1540,9 @@
 #
 # @gl: Enable OpenGL support (default: off).
 #
+# @show-fps:      Enable showing Guest Scanout's update rate (UPS) and
+#                 Surface render swap rate (FPS) on a status bar (default: off).
+#
 # Since: 2.12
 ##
 { 'union'   : 'DisplayOptions',
@@ -1547,7 +1550,8 @@
                 '*full-screen'   : 'bool',
                 '*window-close'  : 'bool',
                 '*show-cursor'   : 'bool',
-                '*gl'            : 'DisplayGLMode' },
+                '*gl'            : 'DisplayGLMode',
+                '*show-fps'      : 'bool' },
   'discriminator' : 'type',
   'data'    : {
       'gtk': { 'type': 'DisplayGTK', 'if': 'CONFIG_GTK' },
diff --git a/ui/console.c b/ui/console.c
index 7db921e3b7..5c8c55f0ca 100644
--- a/ui/console.c
+++ b/ui/console.c
@@ -1226,6 +1226,23 @@ void dpy_gl_update(QemuConsole *con,
     graphic_hw_gl_block(con, false);
 }
 
+void dpy_gl_count_frame(QemuConsole *con, bool ups)
+{
+    DisplayState *s = con->ds;
+    DisplayChangeListener *dcl;
+
+    assert(con->gl);
+
+    QLIST_FOREACH(dcl, &s->listeners, next) {
+        if (con != (dcl->con ? dcl->con : active_console)) {
+            continue;
+        }
+        if (dcl->ops->dpy_gl_count_frame) {
+            dcl->ops->dpy_gl_count_frame(dcl, ups);
+        }
+    }
+}
+
 /***********************************************************/
 /* register display */
 
diff --git a/ui/gtk-egl.c b/ui/gtk-egl.c
index bcfbe9f1d4..6bff4cc62a 100644
--- a/ui/gtk-egl.c
+++ b/ui/gtk-egl.c
@@ -123,6 +123,7 @@ void gd_egl_draw(VirtualConsole *vc)
 
         eglSwapBuffers(qemu_egl_display, vc->gfx.esurface);
 
+        gd_gl_count_frame(&vc->gfx.dcl, false);
         vc->gfx.scale_x = (double)ww / surface_width(vc->gfx.ds);
         vc->gfx.scale_y = (double)wh / surface_height(vc->gfx.ds);
 
@@ -371,6 +372,7 @@ void gd_egl_scanout_flush(DisplayChangeListener *dcl,
 #endif
 
     eglSwapBuffers(qemu_egl_display, vc->gfx.esurface);
+    gd_gl_count_frame(&vc->gfx.dcl, false);
 }
 
 void gd_egl_flush(DisplayChangeListener *dcl,
diff --git a/ui/gtk-gl-area.c b/ui/gtk-gl-area.c
index 30ddc9a591..91b347b828 100644
--- a/ui/gtk-gl-area.c
+++ b/ui/gtk-gl-area.c
@@ -105,6 +105,7 @@ void gd_gl_area_draw(VirtualConsole *vc)
         surface_gl_setup_viewport(vc->gfx.gls, vc->gfx.ds, ww, wh);
         surface_gl_render_texture(vc->gfx.gls, vc->gfx.ds);
     }
+    gd_gl_count_frame(&vc->gfx.dcl, false);
 }
 
 void gd_gl_area_update(DisplayChangeListener *dcl,
diff --git a/ui/gtk.c b/ui/gtk.c
index bc6cfabdde..edd535597c 100644
--- a/ui/gtk.c
+++ b/ui/gtk.c
@@ -558,6 +558,47 @@ static void gd_switch(DisplayChangeListener *dcl,
     }
 }
 
+void gd_gl_count_frame(DisplayChangeListener *dcl, bool ups)
+{
+    VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
+    gchar ups_fps_str[100];
+    static guint prev, curr;
+    static guint ups_cnt, fps_cnt, status_bar_id;
+    struct timeval tv;
+
+    if (!vc->s->opts->show_fps) {
+        return;
+    }
+
+    if (prev == 0) {
+        gettimeofday(&tv, NULL);
+        prev = tv.tv_sec * 1000000 + tv.tv_usec;
+    }
+
+    if (ups) {
+        ups_cnt++;
+    } else {
+        fps_cnt++;
+    }
+
+    /* update rate is calculated for every 200 frames */
+    if (ups_cnt == 200 || fps_cnt == 200) {
+        gettimeofday(&tv, NULL);
+        curr = tv.tv_sec * 1000000 + tv.tv_usec;
+        prev = curr - prev;
+        sprintf(ups_fps_str, "UPS : %0.2f u/s  FPS : %0.2f f/s",
+                ups_cnt * 1000000/(gfloat)prev, fps_cnt * 1000000/(gfloat)prev);
+
+        status_bar_id = gtk_statusbar_get_context_id(GTK_STATUSBAR(vc->s->status_bar),
+                                                     "ups_fps_info");
+        gtk_statusbar_pop(GTK_STATUSBAR(vc->s->status_bar), status_bar_id);
+        gtk_statusbar_push(GTK_STATUSBAR(vc->s->status_bar), status_bar_id, ups_fps_str);
+        prev = curr;
+        fps_cnt = 0;
+        ups_cnt = 0;
+     }
+}
+
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "gtk",
     .dpy_gfx_update       = gd_update,
@@ -566,6 +607,7 @@ static const DisplayChangeListenerOps dcl_ops = {
     .dpy_refresh          = gd_refresh,
     .dpy_mouse_set        = gd_mouse_set,
     .dpy_cursor_define    = gd_cursor_define,
+    .dpy_gl_count_frame   = gd_gl_count_frame,
 };
 
 
@@ -672,6 +714,7 @@ static const DisplayChangeListenerOps dcl_egl_ops = {
     .dpy_gl_update           = gd_egl_flush,
     .dpy_gl_release_dmabuf   = gd_gl_release_dmabuf,
     .dpy_has_dmabuf          = gd_has_dmabuf,
+    .dpy_gl_count_frame      = gd_gl_count_frame,
 };
 
 static bool
@@ -2845,6 +2888,10 @@ static void gtk_display_init(DisplayState *ds, DisplayOptions *opts)
     s->notebook = gtk_notebook_new();
     s->menu_bar = gtk_menu_bar_new();
 
+    if (opts->show_fps) {
+        s->status_bar = gtk_statusbar_new();
+    }
+
     s->free_scale = FALSE;
 
     /* Mostly LC_MESSAGES only. See early_gtk_display_init() for details. For
@@ -2885,6 +2932,10 @@ static void gtk_display_init(DisplayState *ds, DisplayOptions *opts)
     gtk_box_pack_start(GTK_BOX(s->vbox), s->menu_bar, FALSE, TRUE, 0);
     gtk_box_pack_start(GTK_BOX(s->vbox), s->notebook, TRUE, TRUE, 0);
 
+    if (opts->show_fps) {
+        gtk_box_pack_start(GTK_BOX(s->vbox), s->status_bar, FALSE, TRUE, 0);
+    }
+
     gtk_container_add(GTK_CONTAINER(s->window), s->vbox);
 
     gtk_widget_show_all(s->window);
-- 
2.34.1

