From 68a1fe4c69dc58846d5a1871119bff20a1a05d7d Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Wed, 26 Apr 2023 12:00:51 -0700
Subject: [PATCH] gtk: HPD feature optimization

Now, "monitors-changed" GTK event will be used to handle all HPD events
for simplicification. Also introduced gd_set_ui_size_no_delay to update
guest display connection state immediately (previously there was 1 sec
delay before actual size change happened.).

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 ui/gtk.c | 104 +++++++++++++++++++++----------------------------------
 1 file changed, 39 insertions(+), 65 deletions(-)

diff --git a/ui/gtk.c b/ui/gtk.c
index 2991292968..24ba6bb340 100644
--- a/ui/gtk.c
+++ b/ui/gtk.c
@@ -838,6 +838,17 @@ static void gd_set_ui_size(VirtualConsole *vc, gint width, gint height)
     dpy_set_ui_info(vc->gfx.dcl.con, &info, true);
 }
 
+static void gd_set_ui_size_no_delay(VirtualConsole *vc, gint width, gint height)
+{
+    QemuUIInfo info;
+
+    info = *dpy_get_ui_info(vc->gfx.dcl.con);
+    info.width = width;
+    info.height = height;
+    gd_set_window_position(vc, &info);
+    dpy_set_ui_info(vc->gfx.dcl.con, &info, false);
+}
+
 #if defined(CONFIG_OPENGL)
 
 static gboolean gd_render_event(GtkGLArea *area, GdkGLContext *context,
@@ -1442,7 +1453,7 @@ static void gd_menu_switch_vc(GtkMenuItem *item, void *opaque)
     vc = gd_vc_find_current(s);
     if (vc) {
         vc->gfx.visible = false;
-        gd_set_ui_size(vc, 0, 0);
+        gd_set_ui_size_no_delay(vc, 0, 0);
     }
 
     vc = gd_vc_find_by_menu(s);
@@ -1452,8 +1463,8 @@ static void gd_menu_switch_vc(GtkMenuItem *item, void *opaque)
         gtk_notebook_set_current_page(nb, page);
         gtk_widget_grab_focus(vc->focus);
         window = gtk_widget_get_window(vc->gfx.drawing_area);
-        gd_set_ui_size(vc, gdk_window_get_width(window),
-                       gdk_window_get_height(window));
+        gd_set_ui_size_no_delay(vc, gdk_window_get_width(window),
+                                gdk_window_get_height(window));
         vc->gfx.visible = true;
     }
 }
@@ -1489,7 +1500,7 @@ static gboolean gd_window_state_event(GtkWidget *widget, GdkEvent *event,
 
     if (event->window_state.new_window_state & GDK_WINDOW_STATE_ICONIFIED) {
         vc->gfx.visible = false;
-        gd_set_ui_size(vc, 0, 0);
+        gd_set_ui_size_no_delay(vc, 0, 0);
         if (vc->gfx.guest_fb.dmabuf) {
             if (vc->gfx.guest_fb.dmabuf->fence_fd > 0) {
                 gd_hw_gl_flushed(vc);
@@ -1502,8 +1513,8 @@ static gboolean gd_window_state_event(GtkWidget *widget, GdkEvent *event,
         GdkWindow *window;
         window = gtk_widget_get_window(vc->gfx.drawing_area);
 
-        gd_set_ui_size(vc, gdk_window_get_width(window),
-                       gdk_window_get_height(window));
+        gd_set_ui_size_no_delay(vc, gdk_window_get_width(window),
+                                gdk_window_get_height(window));
 
         vc->gfx.visible = true;
     }
@@ -1521,7 +1532,7 @@ static gboolean gd_tab_window_close(GtkWidget *widget, GdkEvent *event,
     g_signal_handlers_disconnect_by_func(vc->window,
                                          G_CALLBACK(gd_window_state_event),
                                          vc);
-    gd_set_ui_size(vc, 0, 0);
+    gd_set_ui_size_no_delay(vc, 0, 0);
 
     if (vc->gfx.guest_fb.dmabuf &&
         vc->gfx.guest_fb.dmabuf->draw_submitted) {
@@ -1625,8 +1636,8 @@ static void gd_menu_untabify(GtkMenuItem *item, void *opaque)
     }
 
     window = gtk_widget_get_window(vc->gfx.drawing_area);
-    gd_set_ui_size(vc, gdk_window_get_width(window),
-                   gdk_window_get_height(window));
+    gd_set_ui_size_no_delay(vc, gdk_window_get_width(window),
+                            gdk_window_get_height(window));
     vc->gfx.visible = true;
 }
 
@@ -1662,8 +1673,8 @@ static void gd_window_show_on_monitor(GdkDisplay *dpy, VirtualConsole *vc,
     vc->monitor = monitor;
     vc->gfx.visible = true;
     window = gtk_widget_get_window(vc->gfx.drawing_area);
-    gd_set_ui_size(vc, gdk_window_get_width(window),
-                   gdk_window_get_height(window));
+    gd_set_ui_size_no_delay(vc, gdk_window_get_width(window),
+                            gdk_window_get_height(window));
     gd_update_cursor(vc);
     g_signal_connect(vc->window, "window-state-event",
                      G_CALLBACK(gd_window_state_event), vc);
@@ -1703,8 +1714,7 @@ static gboolean gd_vc_is_misplaced(GdkDisplay *dpy, GdkMonitor *monitor,
     return FALSE;
 }
 
-static void gd_monitor_check_vcs(GdkDisplay *dpy, GdkMonitor *monitor,
-                                 GtkDisplayState *s)
+static void gd_monitor_check_vcs(GdkDisplay *dpy, GtkDisplayState *s)
 {
     VirtualConsole *vc;
     gint monitor_num;
@@ -1716,60 +1726,28 @@ static void gd_monitor_check_vcs(GdkDisplay *dpy, GdkMonitor *monitor,
      */
     for (i = 0; i < s->nb_vcs; i++) {
         vc = &s->vc[i];
-        monitor_num = vc->label ? gd_monitor_lookup(dpy, vc->label) : -1;
-        if (monitor_num >= 0 && gd_vc_is_misplaced(dpy, monitor, vc)) {
-            gd_window_show_on_monitor(dpy, vc, monitor_num);
-        }
-    }
-}
-
-static void gd_monitor_add(GdkDisplay *dpy, GdkMonitor *monitor,
-                           void *opaque)
-{
-    GtkDisplayState *s = opaque;
-
-    if (!gdk_monitor_get_model(monitor)) {
-        error_report("New monitor is invalid - possible detection failure");
-        return;
-    }
-
-    gd_monitor_check_vcs(dpy, monitor, s);
-}
-
-static void gd_monitor_remove(GdkDisplay *dpy, GdkMonitor *monitor,
-                              void *opaque)
-{
-    GtkDisplayState *s = opaque;
-    VirtualConsole *vc;
-    int i;
-
-    for (i = 0; i < s->nb_vcs; i++) {
-        vc = &s->vc[i];
-        if (vc->monitor == monitor) {
-            vc->monitor = NULL;
-            gd_tab_window_close(NULL, NULL, vc);
-            break;
+        if (vc->label) {
+            GdkMonitor *monitor;
+            monitor_num = gd_monitor_lookup(dpy, vc->label);
+            if (monitor_num >= 0) {
+                monitor = gdk_display_get_monitor(dpy, monitor_num);
+                if (gd_vc_is_misplaced(dpy, monitor, vc)) {
+                    gd_window_show_on_monitor(dpy, vc, monitor_num);
+                }
+            } else if (vc->monitor) {
+                vc->monitor = NULL;
+                gd_tab_window_close(NULL, NULL, vc);
+            }
         }
     }
 }
 
-static void gd_monitors_reset_timer(void *opaque)
-{
-    GtkDisplayState *s = opaque;
-    GdkDisplay *dpy = gdk_display_get_default();
-
-    gd_monitor_check_vcs(dpy, NULL, s);
-}
-
 static void gd_monitors_changed(GdkScreen *scr, void *opaque)
 {
     GtkDisplayState *s = opaque;
-    QEMUTimer *mon_reset_timer;
+    GdkDisplay *dpy = gdk_display_get_default();
 
-    mon_reset_timer = timer_new_ms(QEMU_CLOCK_REALTIME,
-                                    gd_monitors_reset_timer, s);
-    timer_mod(mon_reset_timer,
-              qemu_clock_get_ms(QEMU_CLOCK_REALTIME) + 1000);
+    gd_monitor_check_vcs(dpy, s);
 }
 
 static VirtualConsole *gd_next_gfx_vc(GtkDisplayState *s)
@@ -1832,7 +1810,7 @@ static void gd_connectors_init(GdkDisplay *dpy, GtkDisplayState *s)
             if (vc->window) {
                 gdk_window_hide(gtk_widget_get_window(vc->window));
             }
-            gd_set_ui_size(vc, 0, 0);
+            gd_set_ui_size_no_delay(vc, 0, 0);
         }
     }
 }
@@ -2159,7 +2137,7 @@ static gboolean gd_configure(GtkWidget *widget,
     VirtualConsole *vc = opaque;
 
     if (vc->gfx.visible) {
-        gd_set_ui_size(vc, cfg->width, cfg->height);
+        gd_set_ui_size_no_delay(vc, cfg->width, cfg->height);
     }
     return FALSE;
 }
@@ -2492,10 +2470,6 @@ static void gd_connect_signals(GtkDisplayState *s)
     g_signal_connect(s->notebook, "switch-page",
                      G_CALLBACK(gd_change_page), s);
     if (s->opts->u.gtk.has_connectors) {
-        g_signal_connect(gtk_widget_get_display(s->window), "monitor-added",
-                         G_CALLBACK(gd_monitor_add), s);
-        g_signal_connect(gtk_widget_get_display(s->window), "monitor-removed",
-                         G_CALLBACK(gd_monitor_remove), s);
         g_signal_connect(gdk_screen_get_default(), "monitors-changed",
                          G_CALLBACK(gd_monitors_changed), s);
     }
-- 
2.34.1

