From 0215ae05933e76dad32c61de7dd357f010732d47 Mon Sep 17 00:00:00 2001
From: "Raja Subramanian, Lakshmi Bai" <lakshmi.bai.raja.subramanian@intel.com>
Date: Thu, 1 Dec 2022 22:26:19 +0530
Subject: [PATCH 21/30] usb/hid: added new type for touch, stylus

Stylus extension is provided using additional property for usb-tablet.

    -device usb-tablet,tablet_type=N

where N=0 for Pointer type (default when no property is passed),
      N=1 for Stylus/Touch type

Signed-off-by: Raja Subramanian, Lakshmi Bai <lakshmi.bai.raja.subramanian@intel.com>
Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 hw/usb/dev-hid.c | 66 +++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 62 insertions(+), 4 deletions(-)

diff --git a/hw/usb/dev-hid.c b/hw/usb/dev-hid.c
index bdd6d1ffaf..821ddebf5a 100644
--- a/hw/usb/dev-hid.c
+++ b/hw/usb/dev-hid.c
@@ -43,6 +43,7 @@ struct USBHIDState {
     uint32_t usb_version;
     char *display;
     uint32_t head;
+    uint32_t type;
 };
 
 #define TYPE_USB_HID "usb-hid"
@@ -483,7 +484,9 @@ static const uint8_t qemu_mouse_hid_report_descriptor[] = {
     0xc0,		/* End Collection */
 };
 
-static const uint8_t qemu_tablet_hid_report_descriptor[] = {
+#define QEMU_TABLET_TYPES_MAX		2
+static const uint8_t qemu_tablet_hid_report_descriptor0[] = {
+    /* [0] defaults to Pointer type. if touch type is required, choose it through -device usb-tablet,tablet-type=1 */
     0x05, 0x01,		/* Usage Page (Generic Desktop) */
     0x09, 0x02,		/* Usage (Mouse) */
     0xa1, 0x01,		/* Collection (Application) */
@@ -522,6 +525,55 @@ static const uint8_t qemu_tablet_hid_report_descriptor[] = {
     0xc0,		/*   End Collection */
     0xc0,		/* End Collection */
 };
+static const uint8_t qemu_tablet_hid_report_descriptor1[] = {
+// [1] Selected using -device usb-tablet,tablet-type=1
+    0x05, 0x0d,         /* Usage Page (Digitizer) */
+    0x09, 0x02,         /* Usage (Pen) */
+    0xa1, 0x01,         /* Collection (Application) */
+// declare a finger collection
+    0x09, 0x20,         /*   Usage (Stylus) */
+    0xA1, 0x00,         /*   Collection (Physical) */
+// Declare a finger touch (finger up/down)
+    0x09, 0x42,         /*     Usage (Tip Switch) */
+    0x09, 0x32,         /*     Usage (In Range) */
+    0x15, 0x00,         /*     Logical Minimum (0) */
+    0x25, 0x01,         /*     Logical Maximum (1) */
+    0x75, 0x01,         /*     Report Size (1) */
+    0x95, 0x02,         /*     Report Count (2) */
+    0x81, 0x02,         /*     Input (Data, Variable, Absolute) */
+// Declare the remaining 6 bits of the first data byte as constant -> the driver will ignore them
+    0x75, 0x01,         /*     Report Size (1) */
+    0x95, 0x06,         /*     Report Count (6) */
+    0x81, 0x01,         /*     Input (Constant) */
+    0x05, 0x01,		/*     Usage Page (Generic Desktop) */
+    0x09, 0x30,		/*     Usage (X) */
+    0x09, 0x31,		/*     Usage (Y) */
+    0x15, 0x00,		/*     Logical Minimum (0) */
+    0x26, 0xff, 0x7f,	/*     Logical Maximum (0x7fff) */
+    0x35, 0x00,		/*     Physical Minimum (0) */
+    0x46, 0xff, 0x7f,	/*     Physical Maximum (0x7fff) */
+    0x75, 0x10,		/*     Report Size (16) */
+    0x95, 0x02,		/*     Report Count (2) */
+    0x81, 0x02,		/*     Input (Data, Variable, Absolute) */
+    0x05, 0x01,		/*     Usage Page (Generic Desktop) */
+    0x09, 0x38,		/*     Usage (Wheel) */
+    0x15, 0x81,		/*     Logical Minimum (-0x7f) */
+    0x25, 0x7f,		/*     Logical Maximum (0x7f) */
+    0x35, 0x00,		/*     Physical Minimum (same as logical) */
+    0x45, 0x00,		/*     Physical Maximum (same as logical) */
+    0x75, 0x08,		/*     Report Size (8) */
+    0x95, 0x01,		/*     Report Count (1) */
+    0x81, 0x06,		/*     Input (Data, Variable, Relative) */
+    0xc0,		/*   End Collection */
+    0xc0,		/* End Collection */
+};
+static const struct {
+	const uint8_t *descr;
+	      size_t  size;
+} qemu_tablet_hid_report_descriptor[QEMU_TABLET_TYPES_MAX] = {
+	{ qemu_tablet_hid_report_descriptor0, sizeof (qemu_tablet_hid_report_descriptor0) },
+	{ qemu_tablet_hid_report_descriptor1, sizeof (qemu_tablet_hid_report_descriptor1) }
+};
 
 static const uint8_t qemu_keyboard_hid_report_descriptor[] = {
     0x05, 0x01,		/* Usage Page (Generic Desktop) */
@@ -594,9 +646,14 @@ static void usb_hid_handle_control(USBDevice *dev, USBPacket *p,
                        sizeof(qemu_mouse_hid_report_descriptor));
                 p->actual_length = sizeof(qemu_mouse_hid_report_descriptor);
             } else if (hs->kind == HID_TABLET) {
-                memcpy(data, qemu_tablet_hid_report_descriptor,
-                       sizeof(qemu_tablet_hid_report_descriptor));
-                p->actual_length = sizeof(qemu_tablet_hid_report_descriptor);
+                uint32_t type = us->type;
+
+                if (type >= QEMU_TABLET_TYPES_MAX)
+                    type = 0;
+
+                memcpy(data, qemu_tablet_hid_report_descriptor[type].descr,
+                             qemu_tablet_hid_report_descriptor[type].size);
+                p->actual_length = qemu_tablet_hid_report_descriptor[type].size;
             } else if (hs->kind == HID_KEYBOARD) {
                 memcpy(data, qemu_keyboard_hid_report_descriptor,
                        sizeof(qemu_keyboard_hid_report_descriptor));
@@ -797,6 +854,7 @@ static Property usb_tablet_properties[] = {
         DEFINE_PROP_UINT32("usb_version", USBHIDState, usb_version, 2),
         DEFINE_PROP_STRING("display", USBHIDState, display),
         DEFINE_PROP_UINT32("head", USBHIDState, head, 0),
+        DEFINE_PROP_UINT32("tablet_type", USBHIDState, type, 0),
         DEFINE_PROP_END_OF_LIST(),
 };
 
-- 
2.34.1

