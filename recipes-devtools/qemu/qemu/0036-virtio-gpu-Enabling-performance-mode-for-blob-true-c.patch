From b71d5b1139e23de3c6cb305b7cdd5f0e28c67934 Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Mon, 29 Apr 2024 23:42:43 +0000
Subject: [PATCH 36/40] virtio-gpu: Enabling performance mode for blob=true
 case

Guest frame is started to be drawn (glBlitFramebuffer) in draw event.
This adds extra delay until the virtio-gpu guest is unlocked after
it issues resource-flush. This wait-time can be reduced if we start
drawing earlier, especially while processing resource-flush. The new
perf mode makes this timing change when enabled.

v2: make scanout flush done when dmabuf does not exist as well

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 hw/display/virtio-gpu-udmabuf.c |  1 +
 hw/display/virtio-gpu.c         |  2 +
 include/hw/virtio/virtio-gpu.h  |  3 ++
 include/ui/console.h            |  1 +
 ui/egl-helpers.c                | 13 ++----
 ui/gtk-egl.c                    | 49 +++++++++++-----------
 ui/gtk-gl-area.c                | 73 ++++++++++++++++++++++-----------
 7 files changed, 84 insertions(+), 58 deletions(-)

diff --git a/hw/display/virtio-gpu-udmabuf.c b/hw/display/virtio-gpu-udmabuf.c
index 0bd6256e044e..f3b44874cf65 100644
--- a/hw/display/virtio-gpu-udmabuf.c
+++ b/hw/display/virtio-gpu-udmabuf.c
@@ -192,6 +192,7 @@ static VGPUDMABuf
     dmabuf->buf.fd = res->dmabuf_fd;
     dmabuf->buf.allow_fences = true;
     dmabuf->buf.draw_submitted = false;
+    dmabuf->buf.render_sync = virtio_gpu_render_sync_enabled(g->parent_obj.conf);
     dmabuf->buf.fence_fd = -1;
     dmabuf->scanout_id = scanout_id;
     QTAILQ_INSERT_HEAD(&g->dmabuf.bufs, dmabuf, next);
diff --git a/hw/display/virtio-gpu.c b/hw/display/virtio-gpu.c
index 17c5967c49fd..d6f082d7c1ae 100644
--- a/hw/display/virtio-gpu.c
+++ b/hw/display/virtio-gpu.c
@@ -1631,6 +1631,8 @@ static Property virtio_gpu_properties[] = {
                      256 * MiB),
     DEFINE_PROP_BIT("blob", VirtIOGPU, parent_obj.conf.flags,
                     VIRTIO_GPU_FLAG_BLOB_ENABLED, false),
+    DEFINE_PROP_BIT("render_sync", VirtIOGPU, parent_obj.conf.flags,
+                    VIRTIO_GPU_FLAG_RENDER_SYNC_ENABLED, true),
     DEFINE_PROP_SIZE("hostmem", VirtIOGPU, parent_obj.conf.hostmem, 0),
     DEFINE_PROP_END_OF_LIST(),
 };
diff --git a/include/hw/virtio/virtio-gpu.h b/include/hw/virtio/virtio-gpu.h
index 584ba2ed734c..b039b6e89ccb 100644
--- a/include/hw/virtio/virtio-gpu.h
+++ b/include/hw/virtio/virtio-gpu.h
@@ -96,6 +96,7 @@ enum virtio_gpu_base_conf_flags {
     VIRTIO_GPU_FLAG_EDID_ENABLED,
     VIRTIO_GPU_FLAG_DMABUF_ENABLED,
     VIRTIO_GPU_FLAG_BLOB_ENABLED,
+    VIRTIO_GPU_FLAG_RENDER_SYNC_ENABLED,
     VIRTIO_GPU_FLAG_CONTEXT_INIT_ENABLED,
     VIRTIO_GPU_FLAG_RUTABAGA_ENABLED,
 };
@@ -110,6 +111,8 @@ enum virtio_gpu_base_conf_flags {
     (_cfg.flags & (1 << VIRTIO_GPU_FLAG_DMABUF_ENABLED))
 #define virtio_gpu_blob_enabled(_cfg) \
     (_cfg.flags & (1 << VIRTIO_GPU_FLAG_BLOB_ENABLED))
+#define virtio_gpu_render_sync_enabled(_cfg) \
+    (_cfg.flags & (1 << VIRTIO_GPU_FLAG_RENDER_SYNC_ENABLED))
 #define virtio_gpu_context_init_enabled(_cfg) \
     (_cfg.flags & (1 << VIRTIO_GPU_FLAG_CONTEXT_INIT_ENABLED))
 #define virtio_gpu_rutabaga_enabled(_cfg) \
diff --git a/include/ui/console.h b/include/ui/console.h
index 2dda4e086674..28e82779236c 100644
--- a/include/ui/console.h
+++ b/include/ui/console.h
@@ -202,6 +202,7 @@ typedef struct QemuDmaBuf {
     int       fence_fd;
     bool      allow_fences;
     bool      draw_submitted;
+    bool      render_sync;
 } QemuDmaBuf;
 
 enum display_scanout {
diff --git a/ui/egl-helpers.c b/ui/egl-helpers.c
index a77f9e57d971..712d483ffbbf 100644
--- a/ui/egl-helpers.c
+++ b/ui/egl-helpers.c
@@ -364,7 +364,7 @@ void egl_dmabuf_release_texture(QemuDmaBuf *dmabuf)
     dmabuf->texture = 0;
 }
 
-void egl_dmabuf_create_sync(QemuDmaBuf *dmabuf)
+void egl_dmabuf_create_fence(QemuDmaBuf *dmabuf)
 {
     EGLSyncKHR sync;
 
@@ -376,18 +376,11 @@ void egl_dmabuf_create_sync(QemuDmaBuf *dmabuf)
                                 EGL_SYNC_NATIVE_FENCE_ANDROID, NULL);
         if (sync != EGL_NO_SYNC_KHR) {
             dmabuf->sync = sync;
+            dmabuf->fence_fd = eglDupNativeFenceFDANDROID(qemu_egl_display,
+                                                          dmabuf->sync);
         }
     }
 }
-
-void egl_dmabuf_create_fence(QemuDmaBuf *dmabuf)
-{
-    if (dmabuf->sync) {
-        dmabuf->fence_fd = eglDupNativeFenceFDANDROID(qemu_egl_display,
-                                                      dmabuf->sync);
-    }
-}
-
 #endif /* CONFIG_GBM */
 
 /* ---------------------------------------------------------------------- */
diff --git a/ui/gtk-egl.c b/ui/gtk-egl.c
index 6bff4cc62af2..7678ab97a5fc 100644
--- a/ui/gtk-egl.c
+++ b/ui/gtk-egl.c
@@ -80,6 +80,9 @@ void gd_egl_draw(VirtualConsole *vc)
     ww = gdk_window_get_width(window) * ws;
     wh = gdk_window_get_height(window) * ws;
 
+    eglMakeCurrent(qemu_egl_display, vc->gfx.esurface,
+                   vc->gfx.esurface, vc->gfx.ectx);
+
     if (vc->gfx.scanout_mode) {
 #ifdef CONFIG_GBM
         if (dmabuf) {
@@ -90,22 +93,12 @@ void gd_egl_draw(VirtualConsole *vc)
             }
         }
 #endif
-        gd_egl_scanout_flush(&vc->gfx.dcl, 0, 0, vc->gfx.w, vc->gfx.h);
-
         vc->gfx.scale_x = (double)ww / surface_width(vc->gfx.ds);
         vc->gfx.scale_y = (double)wh / surface_height(vc->gfx.ds);
 
-        glFlush();
-#ifdef CONFIG_GBM
-        if (dmabuf) {
-            egl_dmabuf_create_fence(dmabuf);
-            if (dmabuf->fence_fd > 0) {
-                qemu_set_fd_handler(dmabuf->fence_fd, gd_hw_gl_flushed, NULL, vc);
-                return;
-            }
-            graphic_hw_gl_block(vc->gfx.dcl.con, false);
+        if (!dmabuf || (dmabuf && dmabuf->render_sync)) {
+            gd_egl_scanout_flush(&vc->gfx.dcl, 0, 0, vc->gfx.w, vc->gfx.h);
         }
-#endif
     } else {
         if (!vc->gfx.ds) {
             return;
@@ -115,9 +108,6 @@ void gd_egl_draw(VirtualConsole *vc)
             return;
         }
 
-        eglMakeCurrent(qemu_egl_display, vc->gfx.esurface,
-                       vc->gfx.esurface, vc->gfx.ectx);
-
         surface_gl_setup_viewport(vc->gfx.gls, vc->gfx.ds, ww, wh);
         surface_gl_render_texture(vc->gfx.gls, vc->gfx.ds);
 
@@ -126,9 +116,9 @@ void gd_egl_draw(VirtualConsole *vc)
         gd_gl_count_frame(&vc->gfx.dcl, false);
         vc->gfx.scale_x = (double)ww / surface_width(vc->gfx.ds);
         vc->gfx.scale_y = (double)wh / surface_height(vc->gfx.ds);
-
-        glFlush();
     }
+
+    glFlush();
 }
 
 void gd_egl_update(DisplayChangeListener *dcl,
@@ -337,12 +327,16 @@ void gd_egl_scanout_flush(DisplayChangeListener *dcl,
 {
     VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
     GdkWindow *window;
+    QemuDmaBuf *dmabuf = vc->gfx.guest_fb.dmabuf;
     int ww, wh, ws;
 
     if (!vc->gfx.scanout_mode) {
         return;
     }
     if (!vc->gfx.guest_fb.framebuffer) {
+        if (dmabuf && !dmabuf->render_sync) {
+            graphic_hw_gl_block(vc->gfx.dcl.con, false);
+        }
         return;
     }
 
@@ -366,8 +360,13 @@ void gd_egl_scanout_flush(DisplayChangeListener *dcl,
     }
 
 #ifdef CONFIG_GBM
-    if (vc->gfx.guest_fb.dmabuf) {
-        egl_dmabuf_create_sync(vc->gfx.guest_fb.dmabuf);
+    if (dmabuf) {
+        egl_dmabuf_create_fence(dmabuf);
+        if (dmabuf->fence_fd > 0) {
+            qemu_set_fd_handler(dmabuf->fence_fd, gd_hw_gl_flushed, NULL, vc);
+        } else {
+            graphic_hw_gl_block(vc->gfx.dcl.con, false);
+        }
     }
 #endif
 
@@ -380,20 +379,24 @@ void gd_egl_flush(DisplayChangeListener *dcl,
 {
     VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
     GtkWidget *area = vc->gfx.drawing_area;
+    QemuDmaBuf *dmabuf = vc->gfx.guest_fb.dmabuf;
 
     if (!vc->gfx.visible) {
         return;
     }
 
-    if (vc->gfx.guest_fb.dmabuf && !vc->gfx.guest_fb.dmabuf->draw_submitted) {
+    if (dmabuf && !dmabuf->draw_submitted) {
         graphic_hw_gl_block(vc->gfx.dcl.con, true);
-        vc->gfx.guest_fb.dmabuf->draw_submitted = true;
         gtk_egl_set_scanout_mode(vc, true);
+        if (!dmabuf->render_sync) {
+            gd_egl_scanout_flush(&vc->gfx.dcl, 0, 0, vc->gfx.w, vc->gfx.h);
+        }
+        vc->gfx.guest_fb.dmabuf->draw_submitted = true;
         gtk_widget_queue_draw_area(area, x, y, w, h);
         return;
+    } else if (!dmabuf) {
+        gd_egl_scanout_flush(&vc->gfx.dcl, x, y, w, h);
     }
-
-    gd_egl_scanout_flush(&vc->gfx.dcl, x, y, w, h);
 }
 
 void gtk_egl_init(DisplayGLMode mode)
diff --git a/ui/gtk-gl-area.c b/ui/gtk-gl-area.c
index 2b98d3aeb937..64c5cbfa4a2f 100644
--- a/ui/gtk-gl-area.c
+++ b/ui/gtk-gl-area.c
@@ -68,34 +68,32 @@ void gd_gl_area_draw(VirtualConsole *vc)
         }
 #endif
 
-        glBindFramebuffer(GL_READ_FRAMEBUFFER, vc->gfx.guest_fb.framebuffer);
-        /* GtkGLArea sets GL_DRAW_FRAMEBUFFER for us */
-
-        glViewport(0, 0, ww, wh);
-        y1 = vc->gfx.y0_top ? 0 : vc->gfx.h;
-        y2 = vc->gfx.y0_top ? vc->gfx.h : 0;
-        glBlitFramebuffer(0, y1, vc->gfx.w, y2,
-                          0, 0, ww, wh,
-                          GL_COLOR_BUFFER_BIT, GL_NEAREST);
-#ifdef CONFIG_GBM
-        if (dmabuf) {
-            egl_dmabuf_create_sync(dmabuf);
-        }
-#endif
-        vc->gfx.scale_x = (double)ww / vc->gfx.w;
-        vc->gfx.scale_y = (double)wh / vc->gfx.h;
+        if (!dmabuf || (dmabuf && dmabuf->render_sync)) {
+            glBindFramebuffer(GL_READ_FRAMEBUFFER, vc->gfx.guest_fb.framebuffer);
+            /* GtkGLArea sets GL_DRAW_FRAMEBUFFER for us */
+
+            glViewport(0, 0, ww, wh);
+            y1 = vc->gfx.y0_top ? 0 : vc->gfx.h;
+            y2 = vc->gfx.y0_top ? vc->gfx.h : 0;
+            glBlitFramebuffer(0, y1, vc->gfx.w, y2,
+                              0, 0, ww, wh,
+                              GL_COLOR_BUFFER_BIT, GL_NEAREST);
+
+            vc->gfx.scale_x = (double)ww / vc->gfx.w;
+            vc->gfx.scale_y = (double)wh / vc->gfx.h;
 
-        glFlush();
 #ifdef CONFIG_GBM
-        if (dmabuf) {
-            egl_dmabuf_create_fence(dmabuf);
-            if (dmabuf->fence_fd > 0) {
-                qemu_set_fd_handler(dmabuf->fence_fd, gd_hw_gl_flushed, NULL, vc);
-                return;
+            if (dmabuf) {
+                egl_dmabuf_create_fence(dmabuf);
+                if (dmabuf->fence_fd > 0) {
+                    qemu_set_fd_handler(dmabuf->fence_fd, gd_hw_gl_flushed, NULL, vc);
+                } else {
+                    graphic_hw_gl_block(vc->gfx.dcl.con, false);
+                }
             }
-            graphic_hw_gl_block(vc->gfx.dcl.con, false);
-        }
 #endif
+        }
+        glFlush();
     } else {
         if (!vc->gfx.ds) {
             return;
@@ -298,14 +296,39 @@ void gd_gl_area_scanout_flush(DisplayChangeListener *dcl,
                           uint32_t x, uint32_t y, uint32_t w, uint32_t h)
 {
     VirtualConsole *vc = container_of(dcl, VirtualConsole, gfx.dcl);
+    QemuDmaBuf *dmabuf = vc->gfx.guest_fb.dmabuf;
+    int ww, wh, y1, y2;
 
     if (!vc->gfx.visible) {
         return;
     }
 
     gtk_gl_area_make_current(GTK_GL_AREA(vc->gfx.drawing_area));
-    if (vc->gfx.guest_fb.dmabuf && !vc->gfx.guest_fb.dmabuf->draw_submitted) {
+    if (dmabuf && !dmabuf->draw_submitted) {
         graphic_hw_gl_block(vc->gfx.dcl.con, true);
+        if (!dmabuf->render_sync) {
+            glBindFramebuffer(GL_READ_FRAMEBUFFER, vc->gfx.guest_fb.framebuffer);
+            /* GtkGLArea sets GL_DRAW_FRAMEBUFFER for us */
+
+            glViewport(0, 0, ww, wh);
+            y1 = vc->gfx.y0_top ? 0 : vc->gfx.h;
+            y2 = vc->gfx.y0_top ? vc->gfx.h : 0;
+            glBlitFramebuffer(0, y1, vc->gfx.w, y2,
+                              0, 0, ww, wh,
+                              GL_COLOR_BUFFER_BIT, GL_NEAREST);
+#ifdef CONFIG_GBM
+            if (dmabuf) {
+                egl_dmabuf_create_fence(dmabuf);
+                if (dmabuf->fence_fd > 0) {
+                    qemu_set_fd_handler(dmabuf->fence_fd,
+                                        gd_hw_gl_flushed, NULL, vc);
+                } else {
+                    graphic_hw_gl_block(vc->gfx.dcl.con, false);
+		}
+            }
+#endif
+        }
+
         vc->gfx.guest_fb.dmabuf->draw_submitted = true;
         gtk_gl_area_set_scanout_mode(vc, true);
     }
-- 
2.34.1

