From b97da45e372d47d48806b133e2d36b60c4795857 Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Tue, 21 Nov 2023 05:05:53 -0800
Subject: [PATCH] ui/gtk: attach fullscreen hotkey cb to new vc->window

When creating new GDK window for VC (i.e. when detached), enable
full-screening hotkey to the window.

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 include/ui/gtk.h |  1 +
 ui/gtk.c         | 35 +++++++++++++++++++++++++++++++++--
 2 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/include/ui/gtk.h b/include/ui/gtk.h
index b2b30bdd4f..b566a23e9e 100644
--- a/include/ui/gtk.h
+++ b/include/ui/gtk.h
@@ -85,6 +85,7 @@ typedef struct VirtualConsole {
     GtkWidget *tab_item;
     GtkWidget *focus;
     GdkMonitor *monitor;
+    bool full_screen;
     VirtualConsoleType type;
     union {
         VirtualGfxConsole gfx;
diff --git a/ui/gtk.c b/ui/gtk.c
index 96bfc87f7b..64766cce70 100644
--- a/ui/gtk.c
+++ b/ui/gtk.c
@@ -1581,6 +1581,31 @@ static gboolean gd_win_grab(void *opaque)
     return TRUE;
 }
 
+static void gd_vc_full_screen(void *opaque)
+{
+    VirtualConsole *vc = opaque;
+
+    if (!vc->window)
+        return;
+
+    if (vc->full_screen) {
+        gtk_window_unfullscreen(GTK_WINDOW(vc->window));
+
+        if (vc->type == GD_VC_GFX) {
+            vc->gfx.scale_x = 1.0;
+            vc->gfx.scale_y = 1.0;
+            gd_update_windowsize(vc);
+        }
+	vc->full_screen = false;
+    } else {
+        if (vc->type == GD_VC_GFX) {
+            gtk_widget_set_size_request(vc->gfx.drawing_area, -1, -1);
+        }
+        gtk_window_fullscreen(GTK_WINDOW(vc->window));
+	vc->full_screen = true;
+    }
+}
+
 static void gd_tab_window_create(VirtualConsole *vc)
 {
     GtkDisplayState *s = vc->s;
@@ -1610,9 +1635,12 @@ static void gd_tab_window_create(VirtualConsole *vc)
 	GtkAccelGroup *ag = gtk_accel_group_new();
 	gtk_window_add_accel_group(GTK_WINDOW(vc->window), ag);
 
-	GClosure *cb = g_cclosure_new_swap(G_CALLBACK(gd_win_grab),
+	GClosure *cb_grab = g_cclosure_new_swap(G_CALLBACK(gd_win_grab),
 					   vc, NULL);
-	gtk_accel_group_connect(ag, GDK_KEY_g, HOTKEY_MODIFIERS, 0, cb);
+        GClosure *cb_fs = g_cclosure_new_swap(G_CALLBACK(gd_vc_full_screen),
+                                           vc, NULL);
+	gtk_accel_group_connect(ag, GDK_KEY_g, HOTKEY_MODIFIERS, 0, cb_grab);
+	gtk_accel_group_connect(ag, GDK_KEY_f, HOTKEY_MODIFIERS, 0, cb_fs);
     }
 
     gd_update_geometry_hints(vc);
@@ -1664,6 +1692,7 @@ static void gd_window_show_on_monitor(GdkDisplay *dpy, VirtualConsole *vc,
     if (s->opts->has_full_screen && s->opts->full_screen) {
         gtk_widget_set_size_request(vc->gfx.drawing_area, -1, -1);
         gtk_window_fullscreen(GTK_WINDOW(vc->window));
+	vc->full_screen = true;
     } else if ((s->window == vc->window) && s->full_screen) {
         gd_menu_show_tabs(GTK_MENU_ITEM(s->show_tabs_item), s);
         if (gtk_check_menu_item_get_active(
@@ -1893,6 +1922,7 @@ static void gd_menu_full_screen(GtkMenuItem *item, void *opaque)
                 gtk_widget_set_size_request(vc->gfx.drawing_area, -1, -1);
             }
             gtk_window_fullscreen(GTK_WINDOW(vc->window));
+	    vc->full_screen = true;
 	}
     } else {
         gtk_window_unfullscreen(GTK_WINDOW(s->window));
@@ -1902,6 +1932,7 @@ static void gd_menu_full_screen(GtkMenuItem *item, void *opaque)
                 continue;
             }
             gtk_window_unfullscreen(GTK_WINDOW(vc->window));
+	    vc->full_screen = false;
 
 	    if (vc->type == GD_VC_GFX) {
                 vc->gfx.scale_x = 1.0;
-- 
2.34.1

