#!/bin/sh
# Copyright (C) 2011 O.S. Systems Software LTDA.
# Licensed on MIT

udevd --daemon
udevadm trigger

if [ -c /dev/kmsg ]; then
    use_kmsg=1
fi

say() {
    if [ -n "${use_kmsg}" ]; then
        echo "[initrd] $@" > /dev/kmsg
    else
        echo "[initrd] $@" 1>&2
    fi
}

fail() {
    say "Startup failed"
    exec /bin/sh
}

wait_file() {
    source="$1"
    # path-like? wait for it to enumerate
    if $( echo "${source}" | grep -q ^/dev ) ; then
       say "waiting for ${source}"
       while [ ! -b "${source}" ]; do
           usleep 100
       done
    fi
}

find_part_nofatal=""
find_part() {
    name="$1"
    hint="$(grep ${name}=\\S\\+ -o < /proc/cmdline | cut -d= -f2- )"
    if [ -z "find_part_nofatal" -a -z "${hint}" ]; then
        say "Cannot find ${name}"
        fail
    fi

    type="$( echo "${hint}" | cut -d= -f1 )"
    value="$( echo "${hint}" | cut -d= -f2 )"

    if [ "${type}" == "LABEL" ]; then
        echo "/dev/disk/by-label/${value}"
        return
    fi

    if [ "${type}" == "PARTLABEL" ]; then
        echo "/dev/disk/by-partlabel/${value}"
        return
    fi

    if [ "${type}" == "PARTUUID" ]; then
        echo "/dev/disk/by-partuuid/${value}"
        return
    fi

    if [ "${type}" == "UUID" ]; then
        echo "/dev/disk/by-uuid/${value}"
        return
    fi

    # unknown?
    echo "${hint}"
}

check_mount() {
    source="$1"
    wait_file "$1"
    # some weirdo path leaks breaking fwupdate?
    realpart="$( realpath ${source} )"
    shift
    mount "${realpart}" $@
    if [ "$?" -ne 0 ]; then
      say "Fatal error mounting ${source}"
      fail
    fi
}

data_enabled() {
    return 0
}

data_run() {
    realroot="${ROOTFS_DIR}"
    # mount data partition
    data_part="$( find_part mender.data )"
    check_mount "${data_part}" "${realroot}/data" -o rw || fail
    say "data done"

    # fix up root
    mount -o rbind /dev  "${realroot}/dev"  || fail
    mount -o rbind /proc "${realroot}/proc" || fail
    mount -o rbind /sys  "${realroot}/sys"  || fail
    say "rbind done"

    # fix up persistent content
    mount -o rbind "${realroot}/data/persistent/etc"  "${realroot}/etc"  || fail
    mount -o rbind "${realroot}/data/persistent/var"  "${realroot}/var"  || fail
    mount -o rbind "${realroot}/data/persistent/home" "${realroot}/home" || fail
    say "rbind persistent done"

    # fix up apparmor
    mount -o rbind "${realroot}/usr/share/intel/managed/apparmor"   "${realroot}/etc/apparmor"   || fail
    mount -o rbind "${realroot}/usr/share/intel/managed/apparmor.d" "${realroot}/etc/apparmor.d" || fail
    mount -o rbind "${realroot}/data/persistent/apparmor.d.cache"   "${realroot}/etc/apparmor.d/cache" || fail
    say "rbind apparmor done"
}
