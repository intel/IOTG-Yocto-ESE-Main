#!/bin/sh
# Licensed on MIT

udevd --daemon
udevadm trigger

if [ -c /dev/kmsg ]; then
    use_kmsg=1
fi

say() {
    if [ -n "${use_kmsg}" ]; then
        echo "[initrd] $@" > /dev/kmsg
    else
        echo "[initrd] $@" 1>&2
    fi
}

fail() {
    say "Startup failed"
    exec /bin/sh
}

wait_file() {
    source="$1"
    # path-like? wait for it to enumerate
    if $( echo "${source}" | grep -q ^/dev ) ; then
       say "waiting for ${source}"
       while [ ! -b "${source}" ]; do
           usleep 100
       done
    fi
}

check_mount() {
    source="$1"
    wait_file "$1"
    # some weirdo path leaks breaking fwupdate?
    realpart="$( realpath ${source} )"
    shift
    mount "${realpart}" $@
    if [ "$?" -ne 0 ]; then
      say "Fatal error mounting ${source}"
      fail
    fi
}

data_enabled() {
    return 0
}

data_run() {
    realroot="${ROOTFS_DIR}"
    # mount data partition
    data_part="/dev/disk/by-partlabel/data"
    check_mount "${data_part}" "${realroot}/data" -o rw || fail
    say "data done"

    # fix up root
    mount -o rbind /dev  "${realroot}/dev"  || fail
    mount -o rbind /proc "${realroot}/proc" || fail
    mount -o rbind /sys  "${realroot}/sys"  || fail
    say "rbind done"

    # fix up persistent content
    mount -o rbind "${realroot}/data/persistent/etc"  "${realroot}/etc"  || fail
    mount -o rbind "${realroot}/data/persistent/var"  "${realroot}/var"  || fail
    mount -o rbind "${realroot}/data/persistent/home" "${realroot}/home" || fail
    say "rbind persistent done"

    # fix up apparmor
    if [ -d "${realroot}/usr/share/intel/managed/apparmor" ]; then
       mount -o rbind "${realroot}/usr/share/intel/managed/apparmor"   "${realroot}/etc/apparmor"   || fail
       mount -o rbind "${realroot}/usr/share/intel/managed/apparmor.d" "${realroot}/etc/apparmor.d" || fail
       mount -o rbind "${realroot}/data/persistent/apparmor.d.cache"   "${realroot}/etc/apparmor.d/cache" || fail
       say "rbind apparmor done"
    fi
}
