From 84686b68a68fb522db2fd82d3edc7ce19fe1bfd2 Mon Sep 17 00:00:00 2001
From: Tina Zhang <tina.zhang@intel.com>
Date: Fri, 12 Mar 2021 12:57:41 +0800
Subject: [PATCH 3/6] iris: Add renderonly support

With this renderonly support, iris can work with other display device to
show display. For example, in virtualization env, a virtio-gpu's display
can work with iris which is working in headless mode to show the destop
on the host display monitor.

v2: Add iris_resource_create_renderonly() helper function. (Kenneth)

Signed-off-by: Tina Zhang <tina.zhang@intel.com>
Signed-off-by: Mazlan, Hazwan Arif <hazwan.arif.mazlan@intel.com>
---
 src/gallium/drivers/iris/iris_resource.c      | 56 ++++++++++++++++++-
 src/gallium/drivers/iris/iris_resource.h      |  1 +
 src/gallium/drivers/iris/iris_screen.c        |  2 +
 src/gallium/drivers/iris/iris_screen.h        |  1 +
 src/gallium/winsys/iris/drm/iris_drm_public.h |  5 ++
 src/gallium/winsys/iris/drm/iris_drm_winsys.c | 21 +++++++
 src/gallium/winsys/iris/drm/meson.build       |  8 ++-
 7 files changed, 92 insertions(+), 2 deletions(-)

diff --git a/src/gallium/drivers/iris/iris_resource.c b/src/gallium/drivers/iris/iris_resource.c
index 04d64b416707..789d91a26647 100644
--- a/src/gallium/drivers/iris/iris_resource.c
+++ b/src/gallium/drivers/iris/iris_resource.c
@@ -53,6 +53,8 @@
 #include "isl/isl.h"
 #include "drm-uapi/drm_fourcc.h"
 #include "drm-uapi/i915_drm.h"
+#include "renderonly/renderonly.h"
+#include "util/u_drm.h"
 
 enum modifier_priority {
    MODIFIER_PRIORITY_INVALID = 0,
@@ -458,7 +460,12 @@ static void
 iris_resource_destroy(struct pipe_screen *screen,
                       struct pipe_resource *p_res)
 {
+
    struct iris_resource *res = (struct iris_resource *) p_res;
+   struct iris_screen *pscreen = (struct iris_screen *)screen;
+
+   if (res->scanout)
+      renderonly_scanout_destroy(res->scanout, pscreen->ro);
 
    if (p_res->target == PIPE_BUFFER)
       util_range_destroy(&res->valid_buffer_range);
@@ -1060,6 +1067,43 @@ iris_resource_create_for_buffer(struct pipe_screen *pscreen,
    return &res->base.b;
 }
 
+static struct pipe_resource *
+iris_resource_create_renderonly(struct pipe_screen *pscreen,
+                                const struct pipe_resource *templ)
+{
+   struct iris_screen *screen = (struct iris_screen *)pscreen;
+   struct pipe_resource scanout_templat = *templ;
+   struct renderonly_scanout *scanout;
+   struct winsys_handle handle;
+   struct pipe_resource *pres;
+
+   if (templ->bind & (PIPE_BIND_RENDER_TARGET |
+                      PIPE_BIND_DEPTH_STENCIL)) {
+      scanout_templat.width0 = align(templ->width0, 16);
+      scanout_templat.height0 = align(templ->height0, 16);
+   }
+
+   scanout = renderonly_scanout_for_resource(&scanout_templat,
+                                             screen->ro, &handle);
+   if (!scanout)
+      return NULL;
+
+   assert(handle.type == WINSYS_HANDLE_TYPE_FD);
+   pres = pscreen->resource_from_handle(pscreen, templ, &handle,
+                                        PIPE_HANDLE_USAGE_FRAMEBUFFER_WRITE);
+
+   close(handle.handle);
+   if (!pres) {
+      renderonly_scanout_destroy(scanout, screen->ro);
+      return NULL;
+   }
+
+   struct iris_resource *res = (struct iris_resource *)pres;
+   res->scanout = scanout;
+
+   return pres;
+}
+
 static struct pipe_resource *
 iris_resource_create_with_modifiers(struct pipe_screen *pscreen,
                                     const struct pipe_resource *templ,
@@ -1068,8 +1112,14 @@ iris_resource_create_with_modifiers(struct pipe_screen *pscreen,
 {
    struct iris_screen *screen = (struct iris_screen *)pscreen;
    struct intel_device_info *devinfo = &screen->devinfo;
-   struct iris_resource *res = iris_alloc_resource(pscreen, templ);
 
+   if (screen->ro &&
+       (templ->bind & (PIPE_BIND_DISPLAY_TARGET |
+                       PIPE_BIND_SCANOUT | PIPE_BIND_SHARED))) {
+      return iris_resource_create_renderonly(pscreen, templ);
+   }
+
+   struct iris_resource *res = iris_alloc_resource(pscreen, templ);
    if (!res)
       return NULL;
 
@@ -1716,6 +1766,10 @@ iris_resource_get_handle(struct pipe_screen *pscreen,
    case WINSYS_HANDLE_TYPE_KMS: {
       iris_gem_set_tiling(bo, &res->surf);
 
+      if (screen->ro) {
+         assert(res->scanout);
+         return renderonly_get_handle(res->scanout, whandle);
+      }
       /* Because we share the same drm file across multiple iris_screen, when
        * we export a GEM handle we must make sure it is valid in the DRM file
        * descriptor the caller is using (this is the FD given at screen
diff --git a/src/gallium/drivers/iris/iris_resource.h b/src/gallium/drivers/iris/iris_resource.h
index 1acef60bd569..34d3775a6f61 100644
--- a/src/gallium/drivers/iris/iris_resource.h
+++ b/src/gallium/drivers/iris/iris_resource.h
@@ -55,6 +55,7 @@ struct iris_format_info {
 struct iris_resource {
    struct threaded_resource base;
    enum pipe_format internal_format;
+   struct renderonly_scanout *scanout;
 
    /**
     * The ISL surface layout information for this resource.
diff --git a/src/gallium/drivers/iris/iris_screen.c b/src/gallium/drivers/iris/iris_screen.c
index 97318e974c5e..0486f825b5cd 100644
--- a/src/gallium/drivers/iris/iris_screen.c
+++ b/src/gallium/drivers/iris/iris_screen.c
@@ -58,6 +58,7 @@
 #include "intel/common/intel_l3_config.h"
 #include "intel/common/intel_uuid.h"
 #include "iris_monitor.h"
+#include "renderonly/renderonly.h"
 
 #define genX_call(devinfo, func, ...)             \
    switch ((devinfo)->verx10) {                   \
@@ -625,6 +626,7 @@ iris_screen_destroy(struct iris_screen *screen)
    iris_bufmgr_unref(screen->bufmgr);
    disk_cache_destroy(screen->disk_cache);
    close(screen->winsys_fd);
+   free(screen->ro);
    ralloc_free(screen);
 }
 
diff --git a/src/gallium/drivers/iris/iris_screen.h b/src/gallium/drivers/iris/iris_screen.h
index 88d2fe6ebdcb..ef27e98f741e 100644
--- a/src/gallium/drivers/iris/iris_screen.h
+++ b/src/gallium/drivers/iris/iris_screen.h
@@ -148,6 +148,7 @@ struct iris_address {
 
 struct iris_screen {
    struct pipe_screen base;
+   struct renderonly *ro;
 
    uint32_t refcount;
 
diff --git a/src/gallium/winsys/iris/drm/iris_drm_public.h b/src/gallium/winsys/iris/drm/iris_drm_public.h
index f942e05ad8b5..c7003947e07e 100644
--- a/src/gallium/winsys/iris/drm/iris_drm_public.h
+++ b/src/gallium/winsys/iris/drm/iris_drm_public.h
@@ -26,8 +26,13 @@
 
 struct pipe_screen;
 struct pipe_screen_config;
+struct renderonly;
 
 struct pipe_screen *
 iris_drm_screen_create(int drm_fd, const struct pipe_screen_config *config);
 
+struct pipe_screen *
+iris_screen_create_renderonly(struct renderonly *ro,
+                              const struct pipe_screen_config *config);
+
 #endif /* IRIS_DRM_PUBLIC_H */
diff --git a/src/gallium/winsys/iris/drm/iris_drm_winsys.c b/src/gallium/winsys/iris/drm/iris_drm_winsys.c
index a7a70283ef93..4fb6a4c13d79 100644
--- a/src/gallium/winsys/iris/drm/iris_drm_winsys.c
+++ b/src/gallium/winsys/iris/drm/iris_drm_winsys.c
@@ -26,7 +26,11 @@
 
 #include "util/os_file.h"
 
+#include "renderonly/renderonly.h"
+#include "kmsro/drm/kmsro_drm_public.h"
 #include "iris_drm_public.h"
+#include "iris/iris_screen.h"
+
 extern struct pipe_screen *iris_screen_create(int fd, const struct pipe_screen_config *config);
 
 struct pipe_screen *
@@ -35,5 +39,22 @@ iris_drm_screen_create(int fd, const struct pipe_screen_config *config)
    int newfd = os_dupfd_cloexec(fd);
    if (newfd < 0)
       return NULL;
+
    return iris_screen_create(newfd, config);
 }
+
+struct pipe_screen *
+iris_screen_create_renderonly(struct renderonly *ro,
+                              const struct pipe_screen_config *config)
+{
+   struct iris_screen *pscreen;
+
+   pscreen = (struct iris_screen *)iris_screen_create(os_dupfd_cloexec(ro->gpu_fd), config);
+   if (!pscreen)
+      return NULL;
+
+   pscreen->ro = ro;
+   pscreen->winsys_fd = ro->kms_fd;
+
+   return &pscreen->base;
+}
diff --git a/src/gallium/winsys/iris/drm/meson.build b/src/gallium/winsys/iris/drm/meson.build
index 3dcdc4a455e8..cc9ea8107562 100644
--- a/src/gallium/winsys/iris/drm/meson.build
+++ b/src/gallium/winsys/iris/drm/meson.build
@@ -18,12 +18,18 @@
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 # SOFTWARE.
 
+iris_drm_winsys_c_args = []
+if with_gallium_kmsro
+  iris_drm_winsys_c_args += '-DGALLIUM_KMSRO'
+endif
+
 libiriswinsys = static_library(
   'iriswinsys',
   files('iris_drm_winsys.c'),
   include_directories : [
     inc_src, inc_include,
-    inc_gallium, inc_gallium_aux, inc_gallium_drivers,
+    inc_gallium, inc_gallium_aux, inc_gallium_drivers, inc_gallium_winsys, inc_intel
   ],
+  c_args : [iris_drm_winsys_c_args],
   gnu_symbol_visibility : 'hidden',
 )
-- 
2.34.1

