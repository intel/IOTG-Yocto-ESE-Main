From e74aebda0d8ea93da6ca217f23d64ffc26dcec88 Mon Sep 17 00:00:00 2001
From: Harish Krupo <harish.krupo.kps@intel.com>
Date: Mon, 11 Mar 2019 19:40:35 +0530
Subject: [PATCH 13/27] gl-renderer: Implement the renderer colorspace / HDR
 interface

The uses the set colorspace/hdr metadata to take decisions about the
colorspace conversion and/or the tone mapping to be applied.

Signed-off-by: Harish Krupo <harish.krupo.kps@intel.com>
Signed-off-by: alex.chae <alex.chae@intel.com>
---
 libweston/renderer-gl/gl-renderer.c | 38 +++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/libweston/renderer-gl/gl-renderer.c b/libweston/renderer-gl/gl-renderer.c
index edd753db..4a748d17 100644
--- a/libweston/renderer-gl/gl-renderer.c
+++ b/libweston/renderer-gl/gl-renderer.c
@@ -100,6 +100,9 @@ struct gl_output_state {
 	struct wl_list timeline_render_point_list;
 	GLuint shadow_fbo;
 	GLuint shadow_tex;
+	enum weston_colorspace_enums target_colorspace;
+	struct weston_hdr_metadata *target_hdr_metadata;
+	bool hdr_state_changed;
 };
 
 enum buffer_type {
@@ -3120,6 +3123,10 @@ gl_renderer_output_create(struct weston_output *output,
 
 	glBindFramebuffer(GL_FRAMEBUFFER, 0);
 
+	go->target_colorspace = WESTON_CS_BT709;
+	go->target_hdr_metadata = NULL;
+	go->hdr_state_changed = false;
+
 	return 0;
 }
 
@@ -3416,6 +3423,35 @@ gl_renderer_create_pbuffer_surface(struct gl_renderer *gr) {
 	return 0;
 }
 
+static void
+gl_renderer_set_output_colorspace(struct weston_output *output,
+				  uint32_t colorspace)
+{
+	struct gl_output_state *go = get_output_state(output);
+	if (go->target_colorspace == colorspace)
+		return;
+
+	go->target_colorspace = colorspace;
+	go->hdr_state_changed = true;
+}
+
+static void
+gl_renderer_set_output_hdr_metadata(struct weston_output *output,
+				    struct weston_hdr_metadata *hdr_metadata)
+{
+	struct gl_output_state *go = get_output_state(output);
+
+	if (go->target_hdr_metadata == hdr_metadata)
+		return;
+
+	if (go->target_hdr_metadata && hdr_metadata &&
+	    !memcmp(go->target_hdr_metadata, hdr_metadata, sizeof(*hdr_metadata)))
+		return;
+
+	go->target_hdr_metadata = hdr_metadata;
+	go->hdr_state_changed = true;
+}
+
 static int
 gl_renderer_display_create(struct weston_compositor *ec,
 			   EGLenum platform,
@@ -3453,6 +3489,8 @@ gl_renderer_display_create(struct weston_compositor *ec,
 		gl_renderer_surface_get_content_size;
 	gr->base.surface_copy_content = gl_renderer_surface_copy_content;
 	gr->platform = platform;
+	gr->base.set_output_colorspace = gl_renderer_set_output_colorspace;
+	gr->base.set_output_hdr_metadata = gl_renderer_set_output_hdr_metadata;
 	gr->egl_display = NULL;
 
 	wl_list_init(&gr->shader_list);
-- 
2.21.3

