From b36e5af31ebf37f90bad5765abeee2220471ce57 Mon Sep 17 00:00:00 2001
From: Shashank Sharma <shashank.sharma@intel.com>
Date: Mon, 22 Apr 2019 14:40:26 +0530
Subject: [PATCH 21/27] compositor-drm: Add connector's HDR color property

In order to display HDR output properly, we have to set
two output DRM properties in drm-backend:
- HDR output metadata property.
- Output color space property.

This patch:
- Adds a new connector property, HDR metadata, in drm-backend's connector
  property list. This property will allow compositor to control the output
  HDR metadata in form of AVI infoframes.
- Also adds a connector's color state structure to maintain a drm head's
  color correction status per flip.
- Sets/Resets/Modifies this color state, to reflect the color corrcetion
  during atomic flip.

PS: The kernel counterpart of this property in the drm framework can be
   found here: https://patchwork.freedesktop.org/series/25091/

V2: Addressed review comments from Pekka

Signed-off-by: Shashank Sharma <shashank.sharma@intel.com>
Signed-off-by: alex.chae <alex.chae@intel.com>
---
 libweston/backend-drm/drm-internal.h | 14 ++++++++++++
 libweston/backend-drm/drm.c          |  5 +++++
 libweston/backend-drm/kms.c          | 32 ++++++++++++++++++++++++++++
 3 files changed, 51 insertions(+)

diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index c7886998..7874ce18 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -200,6 +200,7 @@ enum wdrm_connector_property {
 	WDRM_CONNECTOR_NON_DESKTOP,
 	WDRM_CONNECTOR_CONTENT_PROTECTION,
 	WDRM_CONNECTOR_HDCP_CONTENT_TYPE,
+	WDRM_CONNECTOR_HDR_METADATA,
 	WDRM_CONNECTOR__COUNT
 };
 
@@ -497,6 +498,16 @@ struct hdr_output_metadata {
 	};
 };
 
+/* Connector's color correction status */
+struct drm_conn_color_state {
+	bool changed;
+	bool output_is_hdr;
+	uint8_t o_cs;
+	uint8_t o_eotf;
+	uint32_t hdr_md_blob_id;
+	struct drm_hdr_metadata_static o_md;
+};
+
 struct drm_head {
 	struct weston_head base;
 	struct drm_backend *backend;
@@ -511,6 +522,9 @@ struct drm_head {
 	/* Display's supported color spaces */
 	uint32_t clrspaces;
 
+	/* Connector's color correction status */
+	struct drm_conn_color_state color_state;
+
 	/* Holds the properties for the connector */
 	struct drm_property_info props_conn[WDRM_CONNECTOR__COUNT];
 
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 9f3f82e4..4e9beef7 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -2110,6 +2110,8 @@ err_alloc:
 static void
 drm_head_destroy(struct drm_head *head)
 {
+	struct drm_backend *b = head->backend;
+
 	weston_head_release(&head->base);
 
 	drm_property_info_free(head->props_conn, WDRM_CONNECTOR__COUNT);
@@ -2121,6 +2123,9 @@ drm_head_destroy(struct drm_head *head)
 	if (head->backlight)
 		backlight_destroy(head->backlight);
 
+	if (head->color_state.hdr_md_blob_id)
+		drmModeDestroyPropertyBlob(b->drm.fd, head->color_state.hdr_md_blob_id);
+
 	free(head);
 }
 
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 192435c7..4388dd40 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -135,6 +135,7 @@ const struct drm_property_info connector_props[] = {
 		.enum_values = hdcp_content_type_enums,
 		.num_enum_values = WDRM_HDCP_CONTENT_TYPE__COUNT,
 	},
+	[WDRM_CONNECTOR_HDR_METADATA] = { .name = "HDR_OUTPUT_METADATA", },
 };
 
 const struct drm_property_info crtc_props[] = {
@@ -953,6 +954,36 @@ drm_head_set_hdcp_property(struct drm_head *head,
 	assert(ret == 0);
 }
 
+static int
+connector_add_color_correction(drmModeAtomicReq *req,
+		struct drm_head *head, uint32_t *flags)
+{
+	int ret;
+	struct drm_conn_color_state *conn_state = &head->color_state;
+
+	if (!conn_state->changed)
+		return 0;
+
+	if ((int)conn_state->hdr_md_blob_id == -1)
+		return 0;
+
+	ret = connector_add_prop(req,
+				 head,
+				 WDRM_CONNECTOR_HDR_METADATA,
+				 conn_state->hdr_md_blob_id);
+	if (ret != 0) {
+		weston_log("Failed to apply output HDR metadata\n");
+		return ret;
+	}
+
+	*flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
+
+	if (!(*flags & DRM_MODE_ATOMIC_TEST_ONLY))
+		conn_state->changed = false;
+
+	return 0;
+}
+
 static int
 drm_output_apply_state_atomic(struct drm_output_state *state,
 			      drmModeAtomicReq *req,
@@ -988,6 +1019,7 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 		wl_list_for_each(head, &output->base.head_list, base.output_link) {
 			ret |= connector_add_prop(req, head, WDRM_CONNECTOR_CRTC_ID,
 						  output->crtc_id);
+			ret |= connector_add_color_correction(req, head, flags);
 		}
 	} else {
 		ret |= crtc_add_prop(req, output, WDRM_CRTC_MODE_ID, 0);
-- 
2.21.3

