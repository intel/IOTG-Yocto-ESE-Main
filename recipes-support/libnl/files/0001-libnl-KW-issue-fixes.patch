From a3343a32fc6cd370a81fd1a773ffa2cbf3875683 Mon Sep 17 00:00:00 2001
From: pnalamwx <prasadx.nalamwar@intel.com>
Date: Tue, 17 Mar 2020 17:51:02 +0530
Subject: [PATCH] libnl: KW issue fixes

Added changes to resolve klocwork critical and
error level issues

Signed-off-by: pnalamwx <prasadx.nalamwar@intel.com>
---
 lib/cache.c                 |  6 ++++--
 lib/cache_mngr.c            |  7 +++----
 lib/genl/mngt.c             |  6 +++++-
 lib/msg.c                   |  6 ++++--
 lib/route/classid.c         | 10 ++++++++++
 lib/route/cls/ematch.c      |  5 +++++
 lib/route/cls/ematch/text.c |  4 +++-
 lib/route/cls/u32.c         |  3 +++
 lib/route/link.c            |  6 ++++++
 lib/route/link/bonding.c    |  3 +++
 lib/route/link/macvlan.c    | 10 ++++++++++
 lib/route/link/sriov.c      |  2 +-
 lib/route/nexthop.c         |  6 ++++++
 lib/route/nexthop_encap.c   |  3 +++
 lib/route/pktloc.c          |  8 ++++++++
 lib/route/qdisc/netem.c     | 10 ++++++++++
 lib/route/route_obj.c       | 15 +++++++++++++--
 lib/route/rule.c            |  4 ++--
 lib/utils.c                 |  4 +++-
 lib/xfrm/ae.c               | 11 +++++++++--
 lib/xfrm/sa.c               | 34 ++++++++++++++++++++++++++-------
 lib/xfrm/sp.c               | 38 +++++++++++++++++++++++++++++++++----
 src/lib/route.c             |  2 ++
 src/nf-ct-add.c             |  2 ++
 src/nf-exp-add.c            |  2 ++
 src/nf-exp-delete.c         |  2 ++
 src/nf-log.c                |  1 +
 src/nf-monitor.c            |  3 +++
 src/nl-addr-add.c           |  2 ++
 src/nl-addr-list.c          |  2 +-
 src/nl-class-add.c          |  2 +-
 src/nl-cls-add.c            |  2 +-
 src/nl-fib-lookup.c         |  3 +++
 src/nl-link-stats.c         |  9 +++++++--
 src/nl-neigh-add.c          |  2 ++
 src/nl-qdisc-add.c          |  2 +-
 src/nl-route-add.c          |  2 ++
 src/nl-route-get.c          |  2 ++
 src/nl-util-addr.c          |  2 ++
 39 files changed, 208 insertions(+), 35 deletions(-)

diff --git a/lib/cache.c b/lib/cache.c
index 4bb10d1..c32438e 100644
--- a/lib/cache.c
+++ b/lib/cache.c
@@ -1242,8 +1242,10 @@ void nl_cache_dump_filter(struct nl_cache *cache,
 		if (filter && !nl_object_match_filter(obj, filter))
 			continue;
 
-		NL_DBG(4, "Dumping object %p...\n", obj);
-		dump_from_ops(obj, params);
+		if(params) {
+			NL_DBG(4, "Dumping object %p...\n", obj);
+			dump_from_ops(obj, params);
+		}
 	}
 }
 
diff --git a/lib/cache_mngr.c b/lib/cache_mngr.c
index 380834f..98d4544 100644
--- a/lib/cache_mngr.c
+++ b/lib/cache_mngr.c
@@ -185,8 +185,9 @@ int nl_cache_mngr_alloc(struct nl_sock *sk, int protocol, int flags,
 		err = -NLE_NOMEM;
 		goto errout;
 	}
-	if ((err = nl_connect(mngr->cm_sync_sock, protocol)) < 0)
-		goto errout_free_sync_sock;
+	if ((err = nl_connect(mngr->cm_sync_sock, protocol)) < 0) {
+		goto errout;
+	}
 
 	NL_DBG(1, "Allocated cache manager %p, protocol %d, %d caches\n",
 	       mngr, protocol, mngr->cm_nassocs);
@@ -194,8 +195,6 @@ int nl_cache_mngr_alloc(struct nl_sock *sk, int protocol, int flags,
 	*result = mngr;
 	return 0;
 
-errout_free_sync_sock:
-	nl_socket_free(mngr->cm_sync_sock);
 errout:
 	nl_cache_mngr_free(mngr);
 	return err;
diff --git a/lib/genl/mngt.c b/lib/genl/mngt.c
index 28326cd..2fe930f 100644
--- a/lib/genl/mngt.c
+++ b/lib/genl/mngt.c
@@ -30,6 +30,7 @@
 #include "netlink-private/utils.h"
 
 /** @cond SKIP */
+#define MAX_BUF        16384
 
 static NL_LIST_HEAD(genl_ops_list);
 
@@ -55,6 +56,7 @@ static int cmd_msg_parser(struct sockaddr_nl *who, struct nlmsghdr *nlh,
 	struct genlmsghdr *ghdr;
 	struct genl_cmd *cmd;
 	struct nlattr **tb;
+	int maxattr;
 
 	ghdr = genlmsg_hdr(nlh);
 
@@ -68,10 +70,12 @@ static int cmd_msg_parser(struct sockaddr_nl *who, struct nlmsghdr *nlh,
 	if (!tb)
 		return -NLE_NOMEM;
 
+	maxattr = (cmd->c_maxattr > MAX_BUF)?MAX_BUF:cmd->c_maxattr;
+
 	err = nlmsg_parse(nlh,
 	                  GENL_HDRSIZE(ops->o_hdrsize),
 	                  tb,
-	                  cmd->c_maxattr,
+	                  maxattr,
 	                  cmd->c_attr_policy);
 	if (err < 0)
 		return err;
diff --git a/lib/msg.c b/lib/msg.c
index c08b3a4..946f986 100644
--- a/lib/msg.c
+++ b/lib/msg.c
@@ -927,8 +927,10 @@ static void dump_error_msg(struct nl_msg *msg, FILE *ofd)
 		fprintf(ofd, "  [ORIGINAL MESSAGE] %zu octets\n", sizeof(*hdr));
 
 		errmsg = nlmsg_inherit(&err->msg);
-		print_hdr(ofd, errmsg);
-		nlmsg_free(errmsg);
+		if(errmsg) {
+			print_hdr(ofd, errmsg);
+			nlmsg_free(errmsg);
+		}
 	}
 }
 
diff --git a/lib/route/classid.c b/lib/route/classid.c
index 9dcf993..2222be3 100644
--- a/lib/route/classid.c
+++ b/lib/route/classid.c
@@ -290,6 +290,11 @@ static int classid_map_add(uint32_t classid, const char *name)
 	map->classid = classid;
 	map->name = strdup(name);
 
+	if (map->name == NULL) {
+               free(map);
+               return -NLE_NOMEM;
+        }
+
 	n = classid_tbl_hash(map->name);
 	nl_list_add_tail(&map->name_list, &tbl_name[n]);
 
@@ -320,6 +325,11 @@ int rtnl_tc_read_classid_file(void)
 	if (build_sysconf_path(&path, "classid") < 0)
 		return -NLE_NOMEM;
 
+	if(!path) {
+		err = -NLE_INVAL;
+		goto errout;
+	}
+
 	/* if stat fails, just (re-)read the file */
 	if (stat(path, &st) == 0) {
 		/* Don't re-read file if file is unchanged */
diff --git a/lib/route/cls/ematch.c b/lib/route/cls/ematch.c
index 18f5be9..d8f0d7a 100644
--- a/lib/route/cls/ematch.c
+++ b/lib/route/cls/ematch.c
@@ -704,6 +704,11 @@ int rtnl_ematch_parse_expr(const char *expr, char **errp,
 		goto errout;
 	}
 
+	if (!scanner) {
+		err = -NLE_FAILURE;
+		goto errout;
+	}
+
 	buf = ematch__scan_string(expr, scanner);
 
 	if ((err = ematch_parse(scanner, errp, &tree->et_list)) != 0) {
diff --git a/lib/route/cls/ematch/text.c b/lib/route/cls/ematch/text.c
index 4dcd4f0..84b832d 100644
--- a/lib/route/cls/ematch/text.c
+++ b/lib/route/cls/ematch/text.c
@@ -90,8 +90,10 @@ size_t rtnl_ematch_text_get_len(struct rtnl_ematch *e)
 void rtnl_ematch_text_set_algo(struct rtnl_ematch *e, const char *algo)
 {
 	struct text_data *t = rtnl_ematch_data(e);
+	if(strlen(algo) > (sizeof(t->cfg.algo) - 1))
+		return;
 
-	strncpy(t->cfg.algo, algo, sizeof(t->cfg.algo));
+	strncpy(t->cfg.algo, algo, (sizeof(t->cfg.algo)-1));
 	t->cfg.algo[sizeof(t->cfg.algo) - 1] = '\0';
 }
 
diff --git a/lib/route/cls/u32.c b/lib/route/cls/u32.c
index f06bc24..e9810b3 100644
--- a/lib/route/cls/u32.c
+++ b/lib/route/cls/u32.c
@@ -59,6 +59,9 @@ static inline struct tc_u32_mark *u32_mark_alloc(struct rtnl_u32 *u)
 	if (!u->cu_mark)
 		u->cu_mark = nl_data_alloc(NULL, sizeof(struct tc_u32_mark));
 
+	if ( !u->cu_mark )
+		return (struct tc_u32_mark *) NULL;
+
 	return (struct tc_u32_mark *) u->cu_mark->d_data;
 }
 
diff --git a/lib/route/link.c b/lib/route/link.c
index df01a71..a9743b3 100644
--- a/lib/route/link.c
+++ b/lib/route/link.c
@@ -1486,6 +1486,9 @@ char * rtnl_link_i2name(struct nl_cache *cache, int ifindex, char *dst,
 {
 	struct rtnl_link *link = rtnl_link_get(cache, ifindex);
 
+        if(sizeof( link->l_name) > len - 1)
+               return NULL;
+
 	if (link) {
 		strncpy(dst, link->l_name, len - 1);
 		rtnl_link_put(link);
@@ -2881,6 +2884,9 @@ int rtnl_link_enslave_ifindex(struct nl_sock *sock, int master, int slave)
 	if ((err = rtnl_link_get_kernel(sock, slave, NULL, &link)) < 0)
 		return err;
 
+	if ( !link )
+        	goto errout;
+
 	if (rtnl_link_get_master(link) != master)
 		err = -NLE_OPNOTSUPP;
 
diff --git a/lib/route/link/bonding.c b/lib/route/link/bonding.c
index 11b6d3d..1ca7cd7 100644
--- a/lib/route/link/bonding.c
+++ b/lib/route/link/bonding.c
@@ -132,6 +132,9 @@ int rtnl_link_bond_enslave_ifindex(struct nl_sock *sock, int master,
 	if ((err = rtnl_link_get_kernel(sock, slave, NULL, &link)) < 0)
 		return err;
 
+	if (!link)
+		goto errout;
+
 	if (rtnl_link_get_master(link) != master)
 		err = -NLE_OPNOTSUPP;
 
diff --git a/lib/route/link/macvlan.c b/lib/route/link/macvlan.c
index a23fe6d..2118a3c 100644
--- a/lib/route/link/macvlan.c
+++ b/lib/route/link/macvlan.c
@@ -123,6 +123,10 @@ static int macvlan_parse(struct rtnl_link *link, struct nlattr *data,
 
 			mvi->mvi_macaddr = calloc(mvi->mvi_maccount,
 			                          sizeof(*(mvi->mvi_macaddr)));
+			if(!mvi->mvi_macaddr) {
+				err = -1;
+				goto errout;
+			}
 
 			i = 0;
 			for (; nla_ok(nla, len); nla = nla_next(nla, &len)) {
@@ -131,6 +135,9 @@ static int macvlan_parse(struct rtnl_link *link, struct nlattr *data,
 				if (nla_type(nla) != IFLA_MACVLAN_MACADDR ||
 				    nla_len(nla) < ETH_ALEN)
 					continue;
+				if(!mvi->mvi_macaddr)
+					goto errout;
+
 				mvi->mvi_macaddr[i] = nl_addr_alloc_attr(nla, AF_LLC);
 				i++;
 			}
@@ -208,6 +215,9 @@ static int macvlan_clone(struct rtnl_link *dst, struct rtnl_link *src)
 	    && vsrc->mvi_maccount > 0) {
 		vdst->mvi_macaddr = calloc(vdst->mvi_maccount,
 		                           sizeof(*(vdst->mvi_macaddr)));
+		if(!vdst->mvi_macaddr)
+			return -1;
+
 		for (i = 0; i < vdst->mvi_maccount; i++)
 			vdst->mvi_macaddr[i] = nl_addr_clone(vsrc->mvi_macaddr[i]);
 	} else
diff --git a/lib/route/link/sriov.c b/lib/route/link/sriov.c
index 2a87cfe..640f0b8 100644
--- a/lib/route/link/sriov.c
+++ b/lib/route/link/sriov.c
@@ -656,7 +656,7 @@ int rtnl_link_sriov_parse_vflist(struct rtnl_link *link, struct nlattr **tb) {
 		}
 
 		if (t[IFLA_VF_STATS]) {
-			err = nla_parse_nested(stb, IFLA_VF_STATS_MAX,
+			err = nla_parse_nested(stb, RTNL_LINK_VF_STATS_MAX,
 					       t[IFLA_VF_STATS],
 					       sriov_stats_policy);
 			if (err < 0) {
diff --git a/lib/route/nexthop.c b/lib/route/nexthop.c
index 7a9904c..7f25913 100644
--- a/lib/route/nexthop.c
+++ b/lib/route/nexthop.c
@@ -351,6 +351,9 @@ int rtnl_route_nh_set_newdst(struct rtnl_nexthop *nh, struct nl_addr *addr)
 {
 	struct nl_addr *old = nh->rtnh_newdst;
 
+	if(!addr)
+		return -1;
+
 	if (!nl_addr_valid(nl_addr_get_binary_addr(addr),
 			   nl_addr_get_len(addr)))
 		return -NLE_INVAL;
@@ -378,6 +381,9 @@ int rtnl_route_nh_set_via(struct rtnl_nexthop *nh, struct nl_addr *addr)
 {
 	struct nl_addr *old = nh->rtnh_via;
 
+	if(!addr)
+		return -1;
+
 	if (!nl_addr_valid(nl_addr_get_binary_addr(addr),
 			   nl_addr_get_len(addr)))
 		return -NLE_INVAL;
diff --git a/lib/route/nexthop_encap.c b/lib/route/nexthop_encap.c
index 21f647a..eecad09 100644
--- a/lib/route/nexthop_encap.c
+++ b/lib/route/nexthop_encap.c
@@ -31,6 +31,9 @@ static const char *nh_encap_type2str(unsigned int type)
 
 void nh_encap_dump(struct rtnl_nh_encap *rtnh_encap, struct nl_dump_params *dp)
 {
+	if(!rtnh_encap->ops)
+		return;
+
 	nl_dump(dp, " encap %s ",
 		nh_encap_type2str(rtnh_encap->ops->encap_type));
 
diff --git a/lib/route/pktloc.c b/lib/route/pktloc.c
index 9462c6e..fd5ce05 100644
--- a/lib/route/pktloc.c
+++ b/lib/route/pktloc.c
@@ -99,6 +99,9 @@ static int read_pktlocs(void)
 	if (build_sysconf_path(&path, "pktloc") < 0)
 		return -NLE_NOMEM;
 
+	if(path == NULL)
+		return NLE_FAILURE;
+
 	/* if stat fails, just try to read the file */
 	if (stat(path, &st) == 0) {
 		/* Don't re-read file if file is unchanged */
@@ -129,6 +132,11 @@ static int read_pktlocs(void)
 		goto errout_close;
 	}
 
+	if(!scanner) {
+		err = -NLE_FAILURE;
+		goto errout_close;
+	}
+
 	buf = pktloc__create_buffer(fd, YY_BUF_SIZE, scanner);
 	pktloc__switch_to_buffer(buf, scanner);
 
diff --git a/lib/route/qdisc/netem.c b/lib/route/qdisc/netem.c
index 17dee3b..2b629e8 100644
--- a/lib/route/qdisc/netem.c
+++ b/lib/route/qdisc/netem.c
@@ -941,8 +941,17 @@ int rtnl_netem_set_delay_distribution(struct rtnl_qdisc *qdisc, const char *dist
 		return -nl_syserr2nlerr(errno);
 
 	data = (int16_t *) calloc (MAXDIST, sizeof(int16_t));
+	if(!data) {
+		fclose(f);
+		return -NLE_NOMEM;
+	}
 
 	line = (char *) calloc (sizeof(char), len + 1);
+	if(!line) {
+		free(data);
+		fclose(f);
+		return -NLE_NOMEM;
+	}
 
 	while (getline(&line, &len, f) != -1) {
 		char *p, *endp;
@@ -955,6 +964,7 @@ int rtnl_netem_set_delay_distribution(struct rtnl_qdisc *qdisc, const char *dist
 			if (endp == p) break;
 
 			if (n >= MAXDIST) {
+				free(data);
 				free(line);
 				fclose(f);
 				return -NLE_INVAL;
diff --git a/lib/route/route_obj.c b/lib/route/route_obj.c
index bacabe8..e902f40 100644
--- a/lib/route/route_obj.c
+++ b/lib/route/route_obj.c
@@ -1329,7 +1329,10 @@ int rtnl_route_parse(struct nlmsghdr *nlh, struct rtnl_route **result)
 
 			rtnl_route_nh_free(old_nh);
 		}
-		old_nh = NULL;
+		if(old_nh) {
+                  rtnl_route_nh_free(old_nh);
+                  old_nh = NULL;
+		}
 	}
 
 	*result = route;
@@ -1371,8 +1374,11 @@ int rtnl_route_build_msg(struct nl_msg *msg, struct rtnl_route *route)
 		rtmsg.rtm_scope = rtnl_route_guess_scope(route);
 
 	if (rtnl_route_get_nnexthops(route) == 1) {
-		struct rtnl_nexthop *nh;
+		struct rtnl_nexthop *nh = NULL;
 		nh = rtnl_route_nexthop_n(route, 0);
+		if(!nh)
+			goto nla_put_failure;
+
 		rtmsg.rtm_flags |= nh->rtnh_flags;
 	}
 
@@ -1391,6 +1397,8 @@ int rtnl_route_build_msg(struct nl_msg *msg, struct rtnl_route *route)
 
 	if (route->ce_mask & ROUTE_ATTR_PRIO)
 		NLA_PUT_U32(msg, RTA_PRIORITY, route->rt_prio);
+	if(!route->rt_src)
+		goto nla_put_failure;
 
 	if (route->ce_mask & ROUTE_ATTR_SRC)
 		NLA_PUT_ADDR(msg, RTA_SRC, route->rt_src);
@@ -1423,6 +1431,9 @@ int rtnl_route_build_msg(struct nl_msg *msg, struct rtnl_route *route)
 		struct rtnl_nexthop *nh;
 
 		nh = rtnl_route_nexthop_n(route, 0);
+		if(!nh)
+			goto nla_put_failure;
+
 		if (nh->rtnh_gateway)
 			NLA_PUT_ADDR(msg, RTA_GATEWAY, nh->rtnh_gateway);
 		if (nh->rtnh_ifindex)
diff --git a/lib/route/rule.c b/lib/route/rule.c
index a0ba42e..ce4e75f 100644
--- a/lib/route/rule.c
+++ b/lib/route/rule.c
@@ -736,7 +736,7 @@ int rtnl_rule_set_iif(struct rtnl_rule *rule, const char *dev)
 	if (strlen(dev) > IFNAMSIZ-1)
 		return -NLE_RANGE;
 
-	strcpy(rule->r_iifname, dev);
+	strncpy(rule->r_iifname, dev,(sizeof(rule->r_iifname)-1));
 	rule->ce_mask |= RULE_ATTR_IIFNAME;
 	return 0;
 }
@@ -754,7 +754,7 @@ int rtnl_rule_set_oif(struct rtnl_rule *rule, const char *dev)
 	if (strlen(dev) > IFNAMSIZ-1)
 		return -NLE_RANGE;
 
-	strcpy(rule->r_oifname, dev);
+	strncpy(rule->r_oifname, dev,(sizeof(rule->r_oifname)-1));
 	rule->ce_mask |= RULE_ATTR_OIFNAME;
 	return 0;
 }
diff --git a/lib/utils.c b/lib/utils.c
index 496bf3b..e1cad2b 100644
--- a/lib/utils.c
+++ b/lib/utils.c
@@ -448,8 +448,10 @@ static void get_psched_settings(void)
 
 	nl_lock(&mutex);
 
-	if (initialized == 1)
+	if (initialized == 1) {
+		nl_unlock(&mutex);
 		return;
+	}
 
 	if ((ev = getenv("HZ"))) {
 		long hz = strtol(ev, NULL, 0);
diff --git a/lib/xfrm/ae.c b/lib/xfrm/ae.c
index c7baf35..8d47c72 100644
--- a/lib/xfrm/ae.c
+++ b/lib/xfrm/ae.c
@@ -314,7 +314,10 @@ static void xfrm_ae_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		add_time = ae->lifetime_cur.add_time;
 		add_time_tm = gmtime (&add_time);
-		strftime (flags, 128, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		if(add_time_tm)
+			strftime (flags, 128, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		else
+			sprintf (flags, "%s", "-");
 	}
 	else
 	{
@@ -325,7 +328,11 @@ static void xfrm_ae_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		use_time = ae->lifetime_cur.use_time;
 		use_time_tm = gmtime (&use_time);
-		strftime (buf, 128, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		if(use_time_tm) 
+			strftime (buf, 128, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		else
+			sprintf (buf,"%s","-");
+
 	}
 	else
 	{
diff --git a/lib/xfrm/sa.c b/lib/xfrm/sa.c
index 48265ba..b715434 100644
--- a/lib/xfrm/sa.c
+++ b/lib/xfrm/sa.c
@@ -442,7 +442,11 @@ static void xfrm_sa_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		add_time = sa->curlft.add_time;
 		add_time_tm = gmtime (&add_time);
-		strftime (flags, 128, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		if(add_time_tm)
+			strftime (flags, 128, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		else
+			sprintf (flags, "%s", "-");
+
 	}
 	else
 	{
@@ -453,7 +457,11 @@ static void xfrm_sa_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		use_time = sa->curlft.use_time;
 		use_time_tm = gmtime (&use_time);
-		strftime (mode, 128, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		if(use_time_tm)
+			strftime (mode, 128, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		else
+			sprintf (mode, "%s", "-");
+
 	}
 	else
 	{
@@ -697,6 +705,8 @@ int xfrmnl_sa_parse(struct nlmsghdr *n, struct xfrmnl_sa **result)
 		addr    = nl_addr_build (sa_info->sel.family, &sa_info->sel.daddr.a4, sizeof (sa_info->sel.daddr.a4));
 	else
 		addr    = nl_addr_build (sa_info->sel.family, &sa_info->sel.daddr.a6, sizeof (sa_info->sel.daddr.a6));
+	if(!addr)
+		goto errout;
 	nl_addr_set_prefixlen (addr, sa_info->sel.prefixlen_d);
 	xfrmnl_sel_set_daddr (sa->sel, addr);
 	xfrmnl_sel_set_prefixlen_d (sa->sel, sa_info->sel.prefixlen_d);
@@ -705,6 +715,10 @@ int xfrmnl_sa_parse(struct nlmsghdr *n, struct xfrmnl_sa **result)
 		addr    = nl_addr_build (sa_info->sel.family, &sa_info->sel.saddr.a4, sizeof (sa_info->sel.saddr.a4));
 	else
 		addr    = nl_addr_build (sa_info->sel.family, &sa_info->sel.saddr.a6, sizeof (sa_info->sel.saddr.a6));
+
+	if(!addr)
+		goto errout;
+
 	nl_addr_set_prefixlen (addr, sa_info->sel.prefixlen_s);
 	xfrmnl_sel_set_saddr (sa->sel, addr);
 	xfrmnl_sel_set_prefixlen_s (sa->sel, sa_info->sel.prefixlen_s);
@@ -1192,7 +1206,7 @@ static int build_xfrm_sa_message(struct xfrmnl_sa *tmpl, int cmd, int flags, str
 				return -NLE_NOMEM;
 			}
 
-			strncpy(auth->alg_name, tmpl->auth->alg_name, sizeof(auth->alg_name));
+			strncpy(auth->alg_name, tmpl->auth->alg_name, (sizeof(auth->alg_name)-1));
 			auth->alg_name[sizeof(auth->alg_name) - 1] = '\0';
 			auth->alg_key_len = tmpl->auth->alg_key_len;
 			memcpy(auth->alg_key, tmpl->auth->alg_key, (tmpl->auth->alg_key_len + 7) / 8);
@@ -1693,7 +1707,10 @@ int xfrmnl_sa_set_aead_params (struct xfrmnl_sa* sa, const char* alg_name, unsig
 	if (!(b = calloc (1, newlen)))
 		return -1;
 
-	strcpy (b->alg_name, alg_name);
+	if(strlen (alg_name) > (sizeof(b->alg_name)-1))
+		return -1;
+
+	strncpy (b->alg_name, alg_name,(sizeof(b->alg_name)-1));
 	b->alg_key_len   = key_len;
 	b->alg_icv_len   = icv_len;
 	memcpy (b->alg_key, key, keysize);
@@ -1750,7 +1767,7 @@ int xfrmnl_sa_set_auth_params (struct xfrmnl_sa* sa, const char* alg_name, unsig
 	if (!(b = calloc (1, newlen)))
 		return -1;
 
-	strcpy (b->alg_name, alg_name);
+	strncpy (b->alg_name, alg_name, (sizeof(b->alg_name)-1));
 	b->alg_key_len   = key_len;
 	b->alg_trunc_len = trunc_len;
 	memcpy (b->alg_key, key, keysize);
@@ -1804,7 +1821,10 @@ int xfrmnl_sa_set_crypto_params (struct xfrmnl_sa* sa, const char* alg_name, uns
 	if (!(b = calloc (1, newlen)))
 		return -1;
 
-	strcpy (b->alg_name, alg_name);
+	if(strlen (alg_name) > (sizeof(b->alg_name)-1))
+		return -1;
+
+	strncpy (b->alg_name, alg_name,(sizeof(b->alg_name)-1));
 	b->alg_key_len  = key_len;
 	memcpy (b->alg_key, key, keysize);
 
@@ -1857,7 +1877,7 @@ int xfrmnl_sa_set_comp_params (struct xfrmnl_sa* sa, const char* alg_name, unsig
 	if (!(b = calloc (1, newlen)))
 		return -1;
 
-	strcpy (b->alg_name, alg_name);
+	strncpy (b->alg_name, alg_name, (sizeof(b->alg_name)-1));
 	b->alg_key_len  = key_len;
 	memcpy (b->alg_key, key, keysize);
 
diff --git a/lib/xfrm/sp.c b/lib/xfrm/sp.c
index 99b6a4c..b653f49 100644
--- a/lib/xfrm/sp.c
+++ b/lib/xfrm/sp.c
@@ -109,7 +109,7 @@ static int xfrm_sp_clone(struct nl_object *_dst, struct nl_object *_src)
 	struct xfrmnl_sp*       dst = nl_object_priv(_dst);
 	struct xfrmnl_sp*       src = nl_object_priv(_src);
 	uint32_t                len = 0;
-	struct xfrmnl_user_tmpl *utmpl, *new;
+	struct xfrmnl_user_tmpl *utmpl = NULL, *new = NULL;
 
 	if (src->sel)
 		if ((dst->sel = xfrmnl_sel_clone (src->sel)) == NULL)
@@ -129,6 +129,12 @@ static int xfrm_sp_clone(struct nl_object *_dst, struct nl_object *_src)
 
 	nl_init_list_head(&dst->usertmpl_list);
 	nl_list_for_each_entry(utmpl, &src->usertmpl_list, utmpl_list) {
+		if(new) {
+			if(new->saddr)
+				free(new->saddr);
+
+			free(new);
+		}
 		new = xfrmnl_user_tmpl_clone (utmpl);
 		if (!new)
 			return -NLE_NOMEM;
@@ -371,7 +377,11 @@ static void xfrm_sp_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		add_time = sp->curlft.add_time;
 		add_time_tm = gmtime (&add_time);
-		strftime (dst, INET6_ADDRSTRLEN+5, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		if(add_time_tm)
+			strftime (dst, INET6_ADDRSTRLEN+5, "%Y-%m-%d %H-%M-%S", add_time_tm);
+		else
+			sprintf (dst, "%s", "-");
+
 	}
 	else
 	{
@@ -382,7 +392,11 @@ static void xfrm_sp_dump_line(struct nl_object *a, struct nl_dump_params *p)
 	{
 		use_time = sp->curlft.use_time;
 		use_time_tm = gmtime (&use_time);
-		strftime (src, INET6_ADDRSTRLEN+5, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		if(use_time_tm)
+			strftime (src, INET6_ADDRSTRLEN+5, "%Y-%m-%d %H-%M-%S", use_time_tm);
+		else
+			sprintf (src, "%s", "-");
+
 	}
 	else
 	{
@@ -550,6 +564,10 @@ int xfrmnl_sp_parse(struct nlmsghdr *n, struct xfrmnl_sp **result)
 		addr    = nl_addr_build (sp_info->sel.family, &sp_info->sel.daddr.a4, sizeof (sp_info->sel.daddr.a4));
 	else
 		addr    = nl_addr_build (sp_info->sel.family, &sp_info->sel.daddr.a6, sizeof (sp_info->sel.daddr.a6));
+
+	if(!addr)
+		goto errout;
+
 	nl_addr_set_prefixlen (addr, sp_info->sel.prefixlen_d);
 	xfrmnl_sel_set_daddr (sp->sel, addr);
 	xfrmnl_sel_set_prefixlen_d (sp->sel, sp_info->sel.prefixlen_d);
@@ -558,6 +576,10 @@ int xfrmnl_sp_parse(struct nlmsghdr *n, struct xfrmnl_sp **result)
 		addr    = nl_addr_build (sp_info->sel.family, &sp_info->sel.saddr.a4, sizeof (sp_info->sel.saddr.a4));
 	else
 		addr    = nl_addr_build (sp_info->sel.family, &sp_info->sel.saddr.a6, sizeof (sp_info->sel.saddr.a6));
+
+	if(!addr)
+		goto errout;
+
 	nl_addr_set_prefixlen (addr, sp_info->sel.prefixlen_s);
 	xfrmnl_sel_set_saddr (sp->sel, addr);
 	xfrmnl_sel_set_prefixlen_s (sp->sel, sp_info->sel.prefixlen_s);
@@ -618,7 +640,7 @@ int xfrmnl_sp_parse(struct nlmsghdr *n, struct xfrmnl_sp **result)
 
 	if (tb[XFRMA_TMPL]) {
 		struct xfrm_user_tmpl*      tmpl = nla_data(tb[XFRMA_TMPL]);
-		struct xfrmnl_user_tmpl*    sputmpl;
+		struct xfrmnl_user_tmpl*    sputmpl = NULL;
 		uint32_t                    i;
 		uint32_t                    num_tmpls = nla_len(tb[XFRMA_TMPL]) / sizeof (*tmpl);
 		struct  nl_addr*            addr;
@@ -635,6 +657,10 @@ int xfrmnl_sp_parse(struct nlmsghdr *n, struct xfrmnl_sp **result)
 				addr = nl_addr_build(tmpl->family, &tmpl->id.daddr.a4, sizeof (tmpl->id.daddr.a4));
 			else
 				addr = nl_addr_build(tmpl->family, &tmpl->id.daddr.a6, sizeof (tmpl->id.daddr.a6));
+
+			if(!addr)
+				goto errout;
+
 			xfrmnl_user_tmpl_set_daddr (sputmpl, addr);
 			xfrmnl_user_tmpl_set_spi (sputmpl, ntohl(tmpl->id.spi));
 			xfrmnl_user_tmpl_set_proto (sputmpl, tmpl->id.proto);
@@ -644,6 +670,10 @@ int xfrmnl_sp_parse(struct nlmsghdr *n, struct xfrmnl_sp **result)
 				addr = nl_addr_build(tmpl->family, &tmpl->saddr.a4, sizeof (tmpl->saddr.a4));
 			else
 				addr = nl_addr_build(tmpl->family, &tmpl->saddr.a6, sizeof (tmpl->saddr.a6));
+			
+			if(!addr)
+				goto errout;
+
 			xfrmnl_user_tmpl_set_saddr (sputmpl, addr);
 
 			xfrmnl_user_tmpl_set_reqid (sputmpl, tmpl->reqid);
diff --git a/src/lib/route.c b/src/lib/route.c
index 9d0fbe8..6a608b7 100644
--- a/src/lib/route.c
+++ b/src/lib/route.c
@@ -207,6 +207,8 @@ void nl_cli_route_parse_nexthop(struct rtnl_route *route, char *subopts,
 	}
 
 	rtnl_route_add_nexthop(route, nh);
+
+	free(nh);
 }
 
 void nl_cli_route_parse_table(struct rtnl_route *route, char *arg)
diff --git a/src/nf-ct-add.c b/src/nf-ct-add.c
index eec9b86..966c48d 100644
--- a/src/nf-ct-add.c
+++ b/src/nf-ct-add.c
@@ -141,5 +141,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(ct), &params);
 	}
 
+	free(ct);
+
 	return 0;
 }
diff --git a/src/nf-exp-add.c b/src/nf-exp-add.c
index 1f71cd5..1eb1e81 100644
--- a/src/nf-exp-add.c
+++ b/src/nf-exp-add.c
@@ -186,5 +186,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(exp), &params);
 	}
 
+	free(exp);
+
 	return 0;
 }
diff --git a/src/nf-exp-delete.c b/src/nf-exp-delete.c
index c6e478c..df909ec 100644
--- a/src/nf-exp-delete.c
+++ b/src/nf-exp-delete.c
@@ -164,5 +164,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(exp), &params);
 	}
 
+	free(exp);
+
 	return 0;
 }
diff --git a/src/nf-log.c b/src/nf-log.c
index c8a40bf..3285aa0 100644
--- a/src/nf-log.c
+++ b/src/nf-log.c
@@ -68,6 +68,7 @@ int main(int argc, char *argv[])
 	if ((argc > 1 && !strcasecmp(argv[1], "-h")) || argc < 3) {
 		printf("Usage: nf-log family group [ copy_mode ] "
 		       "[copy_range] \n");
+		free(nf_sock);
 		return 2;
 	}
 
diff --git a/src/nf-monitor.c b/src/nf-monitor.c
index 4afbdb2..cd15bbf 100644
--- a/src/nf-monitor.c
+++ b/src/nf-monitor.c
@@ -65,6 +65,7 @@ int main(int argc, char *argv[])
 		for (i = 0; groups[i].gr_id != NFNLGRP_NONE; i++)
 			printf(" %s", groups[i].gr_name);
 		printf("\n");
+		free(sock);
 		return 2;
 	}
 
@@ -105,5 +106,7 @@ int main(int argc, char *argv[])
 		}
 	}
 
+	free(sock);
+
 	return 0;
 }
diff --git a/src/nl-addr-add.c b/src/nl-addr-add.c
index e6ebefe..7eec566 100644
--- a/src/nl-addr-add.c
+++ b/src/nl-addr-add.c
@@ -119,5 +119,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(addr), &dp);
 	}
 
+	free(addr);
+
 	return 0;
 }
diff --git a/src/nl-addr-list.c b/src/nl-addr-list.c
index c5258bd..4551728 100644
--- a/src/nl-addr-list.c
+++ b/src/nl-addr-list.c
@@ -174,7 +174,7 @@ int main(int argc, char *argv[])
 		case '6': rtnl_addr_set_family(addr, AF_INET6); break;
 		case ARG_DETAILS: params.dp_type = NL_DUMP_DETAILS; break;
 		case ARG_ENV: dump_env = 1; break;
-		case ARG_PREFIX: prefix = strdup(optarg); break;
+		case ARG_PREFIX: if(prefix) { free(prefix); } prefix = strdup(optarg); break;
 		case 'h': print_usage(); break;
 		case 'v': nl_cli_print_version(); break;
 		case 'a': nl_cli_addr_parse_local(addr, optarg); break;
diff --git a/src/nl-class-add.c b/src/nl-class-add.c
index a1ccf4e..45947d1 100644
--- a/src/nl-class-add.c
+++ b/src/nl-class-add.c
@@ -111,7 +111,7 @@ int main(int argc, char *argv[])
 		case 'v': nl_cli_print_version(); break;
 		case 'd': nl_cli_tc_parse_dev(tc, link_cache, optarg); break;
 		case 'p': nl_cli_tc_parse_parent(tc, optarg); break;
-		case 'i': id = strdup(optarg); break;
+		case 'i': if(id) { free(id); } id = strdup(optarg); break;
 		case ARG_UPDATE: flags = NLM_F_CREATE; break;
 		case ARG_UPDATE_ONLY: flags = 0; break;
 		case ARG_MTU: nl_cli_tc_parse_mtu(tc, optarg); break;
diff --git a/src/nl-cls-add.c b/src/nl-cls-add.c
index c2ad717..ba382a9 100644
--- a/src/nl-cls-add.c
+++ b/src/nl-cls-add.c
@@ -115,7 +115,7 @@ int main(int argc, char *argv[])
 		case 'v': nl_cli_print_version(); break;
 		case 'd': nl_cli_tc_parse_dev(tc, link_cache, optarg); break;
 		case 'p': nl_cli_tc_parse_parent(tc, optarg); break;
-		case 'i': id = strdup(optarg); break;
+		case 'i': if(id) {  free(id); } id = strdup(optarg); break;
 		case ARG_UPDATE: flags = NLM_F_CREATE; break;
 		case ARG_UPDATE_ONLY: flags = 0; break;
 		case ARG_MTU: nl_cli_tc_parse_mtu(tc, optarg); break;
diff --git a/src/nl-fib-lookup.c b/src/nl-fib-lookup.c
index a649687..7a8cac9 100644
--- a/src/nl-fib-lookup.c
+++ b/src/nl-fib-lookup.c
@@ -108,5 +108,8 @@ int main(int argc, char *argv[])
 
 	nl_cache_dump(result, &params);
 
+	free(result);
+	free(request);
+
 	return 0;
 }
diff --git a/src/nl-link-stats.c b/src/nl-link-stats.c
index 85719c1..6607403 100644
--- a/src/nl-link-stats.c
+++ b/src/nl-link-stats.c
@@ -48,9 +48,14 @@ static int gargc;
 static void dump_stat(struct rtnl_link *link, int id)
 {
 	uint64_t st = rtnl_link_get_stat(link, id);
-	char buf[64];
+	char buf[64] = {0};
+	char *buff = NULL;
+
+	buff = rtnl_link_get_name(link);
+	if(!buff)
+		return;
 
-	printf("%s.%s %" PRIu64 "\n", rtnl_link_get_name(link),
+	printf("%s.%s %" PRIu64 "\n", buff,
 	       rtnl_link_stat2str(id, buf, sizeof(buf)), st);
 }
 
diff --git a/src/nl-neigh-add.c b/src/nl-neigh-add.c
index 585639a..b09cbcd 100644
--- a/src/nl-neigh-add.c
+++ b/src/nl-neigh-add.c
@@ -109,5 +109,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(neigh), &dp);
 	}
 
+	free(neigh);
+
 	return 0;
 }
diff --git a/src/nl-qdisc-add.c b/src/nl-qdisc-add.c
index 38903f3..929f894 100644
--- a/src/nl-qdisc-add.c
+++ b/src/nl-qdisc-add.c
@@ -104,7 +104,7 @@ int main(int argc, char *argv[])
 		case 'v': nl_cli_print_version(); break;
 		case 'd': nl_cli_tc_parse_dev(tc, link_cache, optarg); break;
 		case 'p': nl_cli_tc_parse_parent(tc, optarg); break;
-		case 'i': id = strdup(optarg); break;
+		case 'i': if(id) free(id); id = strdup(optarg); break;
 		case ARG_UPDATE: flags = NLM_F_CREATE; break;
 		case ARG_REPLACE: flags = NLM_F_CREATE | NLM_F_REPLACE; break;
 		case ARG_UPDATE_ONLY: flags = 0; break;
diff --git a/src/nl-route-add.c b/src/nl-route-add.c
index ed2c4e2..1f247f2 100644
--- a/src/nl-route-add.c
+++ b/src/nl-route-add.c
@@ -131,5 +131,7 @@ int main(int argc, char *argv[])
 		nl_object_dump(OBJ_CAST(route), &dp);
 	}
 
+	free(route);
+
 	return 0;
 }
diff --git a/src/nl-route-get.c b/src/nl-route-get.c
index 564fc16..365224e 100644
--- a/src/nl-route-get.c
+++ b/src/nl-route-get.c
@@ -85,5 +85,7 @@ int main(int argc, char *argv[])
 			nl_cli_fatal(err, "%s", nl_geterror(err));
 	}
 
+	free(dst);
+
 	return 0;
 }
diff --git a/src/nl-util-addr.c b/src/nl-util-addr.c
index 6a81166..ba608b0 100644
--- a/src/nl-util-addr.c
+++ b/src/nl-util-addr.c
@@ -31,5 +31,7 @@ int main(int argc, char *argv[])
 
 	printf("%s\n", host);
 
+	free(a);
+
 	return 0;
 }
-- 
2.17.1

