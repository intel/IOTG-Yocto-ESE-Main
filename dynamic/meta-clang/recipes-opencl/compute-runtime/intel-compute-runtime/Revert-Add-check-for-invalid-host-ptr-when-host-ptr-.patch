From e39c3b14eb9bcf96ec5a5b55f1d8699ef041991b Mon Sep 17 00:00:00 2001
From: Dongwon Kim <dongwon.kim@intel.com>
Date: Wed, 11 Mar 2020 12:15:01 -0700
Subject: [PATCH] Revert Add check for invalid host ptr when host ptr tracking
 is disabled.

commit c81f0e5c17b64fe9f41b75e773c9dc23ae7f39b9
Author: Pawel Wilma <pawel.wilma@intel.com>
Date:   Mon Dec 16 17:50:54 2019 +0100

    Add check for invalid host ptr when host ptr tracking is disabled.

    Change-Id: I6aa8276c44b0bcb192d13b6a4dc36d55bd1eafb4
    Signed-off-by: Pawel Wilma <pawel.wilma@intel.com>

This causes conformance regressions. So temporarily reverting it.

Signed-off-by: Dongwon Kim <dongwon.kim@intel.com>
---
 .../os_interface/linux/drm_memory_manager.cpp |  9 ---
 .../linux/drm_memory_manager_tests.cpp        | 76 -------------------
 2 files changed, 85 deletions(-)

diff --git a/runtime/os_interface/linux/drm_memory_manager.cpp b/runtime/os_interface/linux/drm_memory_manager.cpp
index ccdfb7b53..5dce72a7c 100644
--- a/runtime/os_interface/linux/drm_memory_manager.cpp
+++ b/runtime/os_interface/linux/drm_memory_manager.cpp
@@ -249,15 +249,6 @@ DrmAllocation *DrmMemoryManager::allocateGraphicsMemoryForNonSvmHostPtr(const Al
         return nullptr;
     }
 
-    if (validateHostPtrMemory) {
-        int result = pinBB->pin(&bo, 1, getDefaultDrmContextId());
-        if (result != SUCCESS) {
-            unreference(bo, true);
-            releaseGpuRange(reinterpret_cast<void *>(gpuVirtualAddress), alignedSize, allocationData.rootDeviceIndex);
-            return nullptr;
-        }
-    }
-
     bo->gpuAddress = gpuVirtualAddress;
 
     auto allocation = new DrmAllocation(allocationData.rootDeviceIndex, allocationData.type, bo, const_cast<void *>(allocationData.hostPtr),
diff --git a/unit_tests/os_interface/linux/drm_memory_manager_tests.cpp b/unit_tests/os_interface/linux/drm_memory_manager_tests.cpp
index 0fb698bcb..99f4dd4e0 100644
--- a/unit_tests/os_interface/linux/drm_memory_manager_tests.cpp
+++ b/unit_tests/os_interface/linux/drm_memory_manager_tests.cpp
@@ -632,82 +632,6 @@ TEST_F(DrmMemoryManagerWithExplicitExpectationsTest, givenEnabledHostMemoryValid
     mock->ioctl_res_ext = &mock->NONE;
 }
 
-TEST_F(DrmMemoryManagerWithExplicitExpectationsTest, givenEnabledHostMemoryValidationWhenReadOnlyPointerCausesPinningFailWithEfaultThenAlocateMemoryForNonSvmHostPtrReturnsNullptr) {
-    std::unique_ptr<TestedDrmMemoryManager> memoryManager(new (std::nothrow) TestedDrmMemoryManager(false,
-                                                                                                    false,
-                                                                                                    true,
-                                                                                                    *executionEnvironment));
-
-    memoryManager->registeredEngines = EngineControlContainer{this->device->engines};
-    for (auto engine : memoryManager->registeredEngines) {
-        engine.osContext->incRefInternal();
-    }
-
-    mock->reset();
-    size_t dummySize = 13u;
-
-    DrmMockCustom::IoctlResExt ioctlResExt = {1, -1};
-    mock->ioctl_res_ext = &ioctlResExt;
-    mock->errnoValue = EFAULT;
-    mock->ioctl_expected.gemUserptr = 1;
-    mock->ioctl_expected.execbuffer2 = 1;
-    mock->ioctl_expected.gemClose = 1;
-
-    AllocationData allocationData;
-    allocationData.size = dummySize;
-    allocationData.hostPtr = reinterpret_cast<const void *>(0x5001);
-
-    auto gfxPartition = memoryManager->getGfxPartition(0u);
-
-    auto allocatedPointer = gfxPartition->heapAllocate(HeapIndex::HEAP_STANDARD, dummySize);
-    gfxPartition->freeGpuAddressRange(allocatedPointer, dummySize);
-
-    auto allocation = memoryManager->allocateGraphicsMemoryForNonSvmHostPtr(allocationData);
-
-    EXPECT_EQ(nullptr, allocation);
-    mock->testIoctls();
-    mock->ioctl_res_ext = &mock->NONE;
-
-    //make sure that partition is free
-    size_t dummySize2 = 13u;
-    auto allocatedPointer2 = gfxPartition->heapAllocate(HeapIndex::HEAP_STANDARD, dummySize2);
-    EXPECT_EQ(allocatedPointer2, allocatedPointer);
-    gfxPartition->freeGpuAddressRange(allocatedPointer, dummySize2);
-}
-
-TEST_F(DrmMemoryManagerWithExplicitExpectationsTest, givenEnabledHostMemoryValidationWhenHostPtrDoesntCausePinningFailThenAlocateMemoryForNonSvmHostPtrReturnsAllocation) {
-    std::unique_ptr<TestedDrmMemoryManager> memoryManager(new (std::nothrow) TestedDrmMemoryManager(false,
-                                                                                                    false,
-                                                                                                    true,
-                                                                                                    *executionEnvironment));
-
-    memoryManager->registeredEngines = EngineControlContainer{this->device->engines};
-    for (auto engine : memoryManager->registeredEngines) {
-        engine.osContext->incRefInternal();
-    }
-
-    mock->reset();
-
-    DrmMockCustom::IoctlResExt ioctlResExt = {1, -1};
-    mock->ioctl_res_ext = &ioctlResExt;
-    mock->errnoValue = SUCCESS;
-    mock->ioctl_expected.gemUserptr = 1;
-    mock->ioctl_expected.execbuffer2 = 1;
-
-    AllocationData allocationData;
-    allocationData.size = 13u;
-    allocationData.hostPtr = reinterpret_cast<const void *>(0x5001);
-
-    auto allocation = memoryManager->allocateGraphicsMemoryForNonSvmHostPtr(allocationData);
-
-    EXPECT_NE(nullptr, allocation);
-
-    mock->testIoctls();
-    mock->ioctl_res_ext = &mock->NONE;
-
-    memoryManager->freeGraphicsMemory(allocation);
-}
-
 TEST_F(DrmMemoryManagerWithExplicitExpectationsTest, givenEnabledHostMemoryValidationWhenPinningFailWithErrorDifferentThanEfaultThenPopulateOsHandlesReturnsError) {
     std::unique_ptr<TestedDrmMemoryManager> memoryManager(new (std::nothrow) TestedDrmMemoryManager(false,
                                                                                                     false,
-- 
2.20.1

